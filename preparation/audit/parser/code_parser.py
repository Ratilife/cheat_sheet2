import sys
from antlr4 import *
from preparation.audit.parser.antlr4.Python3.PythonLexer import PythonLexer
from preparation.audit.parser.antlr4.Python3.PythonParser import PythonParser
from preparation.audit.parser.code_collector import CodeCollector

def start_code_parser(target_file):
    analysis_results = analyze_python_file(target_file)

    if analysis_results:
        print_results(analysis_results)


def analyze_python_file(file_path: str) -> dict:
    """
        –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
    """

    print(f"üöÄ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {file_path}\n")
    try:
        # 1. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
        input_stream = FileStream(file_path, encoding='utf-8')

        # 2. –°–æ–∑–¥–∞–Ω–∏–µ –ª–µ–∫—Å–µ—Ä–∞ (—Ä–∞–∑–±–∏–≤–∞–µ—Ç –∫–æ–¥ –Ω–∞ —Ç–æ–∫–µ–Ω—ã)
        lexer = PythonLexer(input_stream)

        # 3. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞
        stream = CommonTokenStream(lexer)

        # 4. –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ (—Å—Ç—Ä–æ–∏—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–æ–µ –¥–µ—Ä–µ–≤–æ)
        parser = PythonParser(stream)

        # 5. –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞ 'file_input'
        tree = parser.file_input()

        # 6. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–±–æ—Ä—â–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        collector = CodeCollector(file_path)

        # 8. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ —Å–±–æ—Ä—â–∏–∫–∞ —Å –ø–æ–º–æ—â—å—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
        results = {
            "module_info": collector.get_module_info(),
            "classes_list": collector.get_classes(),
            "full_structure": collector.get_methods_by_class()
        }
        return results


    except FileNotFoundError:
        print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {file_path}")
        return {}
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞: {e}")
        return {}

def print_results(results: dict):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å."""
    if not results:
        return

    full_structure = results["full_structure"]
    if not full_structure:
        print("  –ö–ª–∞—Å—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    else:
        for cls in full_structure:
            print(f"\n  ‚ñ∂Ô∏è –ö–ª–∞—Å—Å: '{cls['class_name']}' (—Å—Ç—Ä–æ–∫–∞: {cls['line_number']})")
            if not cls['methods']:
                print("    - –ú–µ—Ç–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            else:
                for method in cls['methods']:
                    print(f"    - –ú–µ—Ç–æ–¥: '{method['method_name']}' (—Å—Ç—Ä–æ–∫–∞: {method['line_number']})")
                    print(f"      - –í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π —Ç–∏–ø: {method['return_type']}")
    print("-" * 40)