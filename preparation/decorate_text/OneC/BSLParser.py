# Generated from BSLParser.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,126,917,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        1,0,3,0,210,8,0,1,0,3,0,213,8,0,1,0,5,0,216,8,0,10,0,12,0,219,9,
        0,1,0,3,0,222,8,0,1,0,5,0,225,8,0,10,0,12,0,228,9,0,1,0,1,0,1,0,
        3,0,233,8,0,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,4,
        1,4,5,4,249,8,4,10,4,12,4,252,9,4,1,4,4,4,255,8,4,11,4,12,4,256,
        1,4,3,4,260,8,4,1,4,5,4,263,8,4,10,4,12,4,266,9,4,3,4,268,8,4,1,
        5,1,5,1,5,5,5,273,8,5,10,5,12,5,276,9,5,1,6,1,6,1,6,1,7,1,7,1,8,
        1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,13,
        3,13,298,8,13,1,13,1,13,1,13,1,13,1,13,3,13,305,8,13,1,14,1,14,3,
        14,309,8,14,1,14,1,14,1,14,1,14,3,14,315,8,14,1,14,1,14,1,14,1,14,
        1,14,3,14,322,8,14,1,15,1,15,1,15,1,15,5,15,328,8,15,10,15,12,15,
        331,9,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
        1,16,1,16,1,16,1,16,1,16,1,16,3,16,350,8,16,1,17,1,17,1,18,1,18,
        1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,363,8,19,1,20,1,20,1,21,
        1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,24,3,24,377,8,24,1,25,
        1,25,1,25,1,25,5,25,383,8,25,10,25,12,25,386,9,25,3,25,388,8,25,
        1,25,1,25,1,26,1,26,1,26,3,26,395,8,26,1,26,3,26,398,8,26,1,27,1,
        27,1,28,4,28,403,8,28,11,28,12,28,404,1,29,1,29,1,29,5,29,410,8,
        29,10,29,12,29,413,9,29,1,29,1,29,1,29,3,29,418,8,29,1,30,1,30,1,
        30,5,30,423,8,30,10,30,12,30,426,9,30,1,31,1,31,3,31,430,8,31,1,
        32,4,32,433,8,32,11,32,12,32,434,1,33,1,33,1,33,5,33,440,8,33,10,
        33,12,33,443,9,33,1,33,1,33,1,33,3,33,448,8,33,1,34,1,34,1,34,5,
        34,453,8,34,10,34,12,34,456,9,34,1,35,1,35,1,36,1,36,1,37,4,37,463,
        8,37,11,37,12,37,464,1,38,1,38,3,38,469,8,38,1,39,1,39,1,39,1,39,
        1,40,1,40,1,40,1,40,1,41,1,41,1,41,5,41,482,8,41,10,41,12,41,485,
        9,41,1,41,3,41,488,8,41,1,41,1,41,1,41,1,41,3,41,494,8,41,1,41,1,
        41,3,41,498,8,41,1,42,1,42,1,42,5,42,503,8,42,10,42,12,42,506,9,
        42,1,42,3,42,509,8,42,1,42,1,42,1,42,1,42,3,42,515,8,42,1,42,1,42,
        3,42,519,8,42,1,43,3,43,522,8,43,1,43,1,43,1,44,1,44,1,45,1,45,1,
        46,1,46,1,46,3,46,533,8,46,1,47,1,47,5,47,537,8,47,10,47,12,47,540,
        9,47,1,47,3,47,543,8,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,49,
        1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,
        1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,53,1,53,1,53,
        1,53,1,53,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,1,55,
        1,55,3,55,593,8,55,1,56,1,56,1,56,3,56,598,8,56,1,57,1,57,3,57,602,
        8,57,1,57,5,57,605,8,57,10,57,12,57,608,9,57,1,57,1,57,3,57,612,
        8,57,1,58,1,58,1,59,1,59,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,
        1,62,1,62,1,63,1,63,1,64,1,64,1,65,1,65,1,66,1,66,1,66,1,66,1,66,
        1,67,1,67,1,67,1,67,1,67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,1,69,1,69,1,69,1,70,1,70,1,71,1,71,1,72,1,72,5,72,662,8,72,
        10,72,12,72,665,9,72,1,73,1,73,1,74,1,74,1,74,5,74,672,8,74,10,74,
        12,74,675,9,74,1,75,5,75,678,8,75,10,75,12,75,681,9,75,1,75,3,75,
        684,8,75,1,75,1,75,1,75,3,75,689,8,75,1,76,1,76,1,77,3,77,694,8,
        77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,703,8,77,1,78,1,78,1,
        78,1,78,5,78,709,8,78,10,78,12,78,712,9,78,1,78,1,78,1,79,1,79,4,
        79,718,8,79,11,79,12,79,719,1,80,1,80,1,80,1,80,1,80,1,80,3,80,728,
        8,80,1,80,1,80,1,80,1,80,1,80,3,80,735,8,80,3,80,737,8,80,1,80,3,
        80,740,8,80,1,80,3,80,743,8,80,1,81,1,81,5,81,747,8,81,10,81,12,
        81,750,9,81,1,81,1,81,5,81,754,8,81,10,81,12,81,757,9,81,1,81,1,
        81,1,82,1,82,1,82,5,82,764,8,82,10,82,12,82,767,9,82,1,83,3,83,770,
        8,83,1,84,1,84,5,84,774,8,84,10,84,12,84,777,9,84,1,84,1,84,5,84,
        781,8,84,10,84,12,84,784,9,84,1,84,1,84,5,84,788,8,84,10,84,12,84,
        791,9,84,5,84,793,8,84,10,84,12,84,796,9,84,1,85,1,85,1,85,1,85,
        1,85,1,85,1,85,3,85,805,8,85,1,86,1,86,1,87,1,87,1,88,1,88,1,89,
        3,89,814,8,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,5,89,823,8,89,10,
        89,12,89,826,9,89,1,89,1,89,3,89,830,8,89,1,89,3,89,833,8,89,1,90,
        1,90,1,90,3,90,838,8,90,1,90,1,90,3,90,842,8,90,1,91,1,91,1,92,1,
        92,1,92,1,93,1,93,1,93,1,94,1,94,1,95,1,95,1,95,1,95,3,95,858,8,
        95,1,95,5,95,861,8,95,10,95,12,95,864,9,95,1,96,1,96,1,96,3,96,869,
        8,96,1,97,5,97,872,8,97,10,97,12,97,875,9,97,1,97,1,97,3,97,879,
        8,97,1,98,1,98,3,98,883,8,98,1,98,3,98,886,8,98,1,99,1,99,1,99,1,
        100,1,100,1,100,1,100,1,101,1,101,1,101,1,102,1,102,1,102,1,102,
        1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
        1,103,1,103,3,103,915,8,103,1,103,0,0,104,0,2,4,6,8,10,12,14,16,
        18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,
        62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,
        104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,
        136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,
        168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,
        200,202,204,206,0,10,2,0,81,81,110,110,2,0,110,110,112,112,1,0,87,
        88,1,0,113,117,1,0,118,122,2,0,34,34,36,36,1,0,12,13,2,0,11,11,14,
        18,1,0,67,68,2,0,12,13,66,66,969,0,209,1,0,0,0,2,237,1,0,0,0,4,240,
        1,0,0,0,6,242,1,0,0,0,8,267,1,0,0,0,10,269,1,0,0,0,12,277,1,0,0,
        0,14,280,1,0,0,0,16,282,1,0,0,0,18,284,1,0,0,0,20,288,1,0,0,0,22,
        292,1,0,0,0,24,294,1,0,0,0,26,304,1,0,0,0,28,321,1,0,0,0,30,323,
        1,0,0,0,32,349,1,0,0,0,34,351,1,0,0,0,36,353,1,0,0,0,38,355,1,0,
        0,0,40,364,1,0,0,0,42,366,1,0,0,0,44,369,1,0,0,0,46,371,1,0,0,0,
        48,373,1,0,0,0,50,378,1,0,0,0,52,397,1,0,0,0,54,399,1,0,0,0,56,402,
        1,0,0,0,58,411,1,0,0,0,60,419,1,0,0,0,62,427,1,0,0,0,64,432,1,0,
        0,0,66,441,1,0,0,0,68,449,1,0,0,0,70,457,1,0,0,0,72,459,1,0,0,0,
        74,462,1,0,0,0,76,468,1,0,0,0,78,470,1,0,0,0,80,474,1,0,0,0,82,483,
        1,0,0,0,84,504,1,0,0,0,86,521,1,0,0,0,88,525,1,0,0,0,90,527,1,0,
        0,0,92,529,1,0,0,0,94,534,1,0,0,0,96,546,1,0,0,0,98,551,1,0,0,0,
        100,556,1,0,0,0,102,559,1,0,0,0,104,565,1,0,0,0,106,575,1,0,0,0,
        108,584,1,0,0,0,110,590,1,0,0,0,112,594,1,0,0,0,114,611,1,0,0,0,
        116,613,1,0,0,0,118,615,1,0,0,0,120,617,1,0,0,0,122,621,1,0,0,0,
        124,625,1,0,0,0,126,627,1,0,0,0,128,629,1,0,0,0,130,631,1,0,0,0,
        132,633,1,0,0,0,134,638,1,0,0,0,136,643,1,0,0,0,138,652,1,0,0,0,
        140,655,1,0,0,0,142,657,1,0,0,0,144,663,1,0,0,0,146,666,1,0,0,0,
        148,668,1,0,0,0,150,679,1,0,0,0,152,690,1,0,0,0,154,702,1,0,0,0,
        156,704,1,0,0,0,158,717,1,0,0,0,160,742,1,0,0,0,162,744,1,0,0,0,
        164,760,1,0,0,0,166,769,1,0,0,0,168,771,1,0,0,0,170,804,1,0,0,0,
        172,806,1,0,0,0,174,808,1,0,0,0,176,810,1,0,0,0,178,813,1,0,0,0,
        180,841,1,0,0,0,182,843,1,0,0,0,184,845,1,0,0,0,186,848,1,0,0,0,
        188,851,1,0,0,0,190,857,1,0,0,0,192,868,1,0,0,0,194,873,1,0,0,0,
        196,882,1,0,0,0,198,887,1,0,0,0,200,890,1,0,0,0,202,894,1,0,0,0,
        204,897,1,0,0,0,206,914,1,0,0,0,208,210,3,10,5,0,209,208,1,0,0,0,
        209,210,1,0,0,0,210,212,1,0,0,0,211,213,3,8,4,0,212,211,1,0,0,0,
        212,213,1,0,0,0,213,217,1,0,0,0,214,216,3,38,19,0,215,214,1,0,0,
        0,216,219,1,0,0,0,217,215,1,0,0,0,217,218,1,0,0,0,218,221,1,0,0,
        0,219,217,1,0,0,0,220,222,3,56,28,0,221,220,1,0,0,0,221,222,1,0,
        0,0,222,226,1,0,0,0,223,225,3,38,19,0,224,223,1,0,0,0,225,228,1,
        0,0,0,226,224,1,0,0,0,226,227,1,0,0,0,227,232,1,0,0,0,228,226,1,
        0,0,0,229,230,3,140,70,0,230,231,3,74,37,0,231,233,1,0,0,0,232,229,
        1,0,0,0,232,233,1,0,0,0,233,234,1,0,0,0,234,235,3,142,71,0,235,236,
        5,0,0,1,236,1,1,0,0,0,237,238,5,27,0,0,238,239,5,82,0,0,239,3,1,
        0,0,0,240,241,7,0,0,0,241,5,1,0,0,0,242,243,5,27,0,0,243,244,5,83,
        0,0,244,245,3,4,2,0,245,7,1,0,0,0,246,250,3,2,1,0,247,249,3,6,3,
        0,248,247,1,0,0,0,249,252,1,0,0,0,250,248,1,0,0,0,250,251,1,0,0,
        0,251,268,1,0,0,0,252,250,1,0,0,0,253,255,3,6,3,0,254,253,1,0,0,
        0,255,256,1,0,0,0,256,254,1,0,0,0,256,257,1,0,0,0,257,259,1,0,0,
        0,258,260,3,2,1,0,259,258,1,0,0,0,259,260,1,0,0,0,260,264,1,0,0,
        0,261,263,3,6,3,0,262,261,1,0,0,0,263,266,1,0,0,0,264,262,1,0,0,
        0,264,265,1,0,0,0,265,268,1,0,0,0,266,264,1,0,0,0,267,246,1,0,0,
        0,267,254,1,0,0,0,268,9,1,0,0,0,269,270,5,27,0,0,270,274,5,78,0,
        0,271,273,7,1,0,0,272,271,1,0,0,0,273,276,1,0,0,0,274,272,1,0,0,
        0,274,275,1,0,0,0,275,11,1,0,0,0,276,274,1,0,0,0,277,278,5,84,0,
        0,278,279,3,16,8,0,279,13,1,0,0,0,280,281,5,85,0,0,281,15,1,0,0,
        0,282,283,5,110,0,0,283,17,1,0,0,0,284,285,5,89,0,0,285,286,3,26,
        13,0,286,287,5,90,0,0,287,19,1,0,0,0,288,289,5,91,0,0,289,290,3,
        26,13,0,290,291,5,90,0,0,291,21,1,0,0,0,292,293,5,93,0,0,293,23,
        1,0,0,0,294,295,5,92,0,0,295,25,1,0,0,0,296,298,5,86,0,0,297,296,
        1,0,0,0,297,298,1,0,0,0,298,299,1,0,0,0,299,300,5,79,0,0,300,301,
        3,26,13,0,301,302,5,80,0,0,302,305,1,0,0,0,303,305,3,30,15,0,304,
        297,1,0,0,0,304,303,1,0,0,0,305,27,1,0,0,0,306,308,5,79,0,0,307,
        309,5,86,0,0,308,307,1,0,0,0,308,309,1,0,0,0,309,310,1,0,0,0,310,
        311,3,28,14,0,311,312,5,80,0,0,312,322,1,0,0,0,313,315,5,86,0,0,
        314,313,1,0,0,0,314,315,1,0,0,0,315,316,1,0,0,0,316,322,3,32,16,
        0,317,318,5,79,0,0,318,319,3,30,15,0,319,320,5,80,0,0,320,322,1,
        0,0,0,321,306,1,0,0,0,321,314,1,0,0,0,321,317,1,0,0,0,322,29,1,0,
        0,0,323,329,3,28,14,0,324,325,3,36,18,0,325,326,3,28,14,0,326,328,
        1,0,0,0,327,324,1,0,0,0,328,331,1,0,0,0,329,327,1,0,0,0,329,330,
        1,0,0,0,330,31,1,0,0,0,331,329,1,0,0,0,332,350,5,103,0,0,333,350,
        5,102,0,0,334,350,5,105,0,0,335,350,5,104,0,0,336,350,5,94,0,0,337,
        350,5,95,0,0,338,350,5,96,0,0,339,350,5,97,0,0,340,350,5,98,0,0,
        341,350,5,99,0,0,342,350,5,100,0,0,343,350,5,101,0,0,344,350,5,106,
        0,0,345,350,5,107,0,0,346,350,5,108,0,0,347,350,5,109,0,0,348,350,
        3,34,17,0,349,332,1,0,0,0,349,333,1,0,0,0,349,334,1,0,0,0,349,335,
        1,0,0,0,349,336,1,0,0,0,349,337,1,0,0,0,349,338,1,0,0,0,349,339,
        1,0,0,0,349,340,1,0,0,0,349,341,1,0,0,0,349,342,1,0,0,0,349,343,
        1,0,0,0,349,344,1,0,0,0,349,345,1,0,0,0,349,346,1,0,0,0,349,347,
        1,0,0,0,349,348,1,0,0,0,350,33,1,0,0,0,351,352,5,110,0,0,352,35,
        1,0,0,0,353,354,7,2,0,0,354,37,1,0,0,0,355,362,5,27,0,0,356,363,
        3,12,6,0,357,363,3,14,7,0,358,363,3,18,9,0,359,363,3,20,10,0,360,
        363,3,22,11,0,361,363,3,24,12,0,362,356,1,0,0,0,362,357,1,0,0,0,
        362,358,1,0,0,0,362,359,1,0,0,0,362,360,1,0,0,0,362,361,1,0,0,0,
        363,39,1,0,0,0,364,365,7,3,0,0,365,41,1,0,0,0,366,367,5,23,0,0,367,
        368,3,40,20,0,368,43,1,0,0,0,369,370,7,4,0,0,370,45,1,0,0,0,371,
        372,5,76,0,0,372,47,1,0,0,0,373,374,5,23,0,0,374,376,3,44,22,0,375,
        377,3,50,25,0,376,375,1,0,0,0,376,377,1,0,0,0,377,49,1,0,0,0,378,
        387,5,6,0,0,379,384,3,52,26,0,380,381,5,10,0,0,381,383,3,52,26,0,
        382,380,1,0,0,0,383,386,1,0,0,0,384,382,1,0,0,0,384,385,1,0,0,0,
        385,388,1,0,0,0,386,384,1,0,0,0,387,379,1,0,0,0,387,388,1,0,0,0,
        388,389,1,0,0,0,389,390,5,7,0,0,390,51,1,0,0,0,391,394,3,46,23,0,
        392,393,5,11,0,0,393,395,3,154,77,0,394,392,1,0,0,0,394,395,1,0,
        0,0,395,398,1,0,0,0,396,398,3,154,77,0,397,391,1,0,0,0,397,396,1,
        0,0,0,398,53,1,0,0,0,399,400,5,76,0,0,400,55,1,0,0,0,401,403,3,58,
        29,0,402,401,1,0,0,0,403,404,1,0,0,0,404,402,1,0,0,0,404,405,1,0,
        0,0,405,57,1,0,0,0,406,410,3,38,19,0,407,410,3,42,21,0,408,410,3,
        48,24,0,409,406,1,0,0,0,409,407,1,0,0,0,409,408,1,0,0,0,410,413,
        1,0,0,0,411,409,1,0,0,0,411,412,1,0,0,0,412,414,1,0,0,0,413,411,
        1,0,0,0,414,415,5,65,0,0,415,417,3,60,30,0,416,418,5,9,0,0,417,416,
        1,0,0,0,417,418,1,0,0,0,418,59,1,0,0,0,419,424,3,62,31,0,420,421,
        5,10,0,0,421,423,3,62,31,0,422,420,1,0,0,0,423,426,1,0,0,0,424,422,
        1,0,0,0,424,425,1,0,0,0,425,61,1,0,0,0,426,424,1,0,0,0,427,429,3,
        54,27,0,428,430,5,45,0,0,429,428,1,0,0,0,429,430,1,0,0,0,430,63,
        1,0,0,0,431,433,3,66,33,0,432,431,1,0,0,0,433,434,1,0,0,0,434,432,
        1,0,0,0,434,435,1,0,0,0,435,65,1,0,0,0,436,440,3,38,19,0,437,440,
        3,42,21,0,438,440,3,48,24,0,439,436,1,0,0,0,439,437,1,0,0,0,439,
        438,1,0,0,0,440,443,1,0,0,0,441,439,1,0,0,0,441,442,1,0,0,0,442,
        444,1,0,0,0,443,441,1,0,0,0,444,445,5,65,0,0,445,447,3,68,34,0,446,
        448,5,9,0,0,447,446,1,0,0,0,447,448,1,0,0,0,448,67,1,0,0,0,449,454,
        3,70,35,0,450,451,5,10,0,0,451,453,3,70,35,0,452,450,1,0,0,0,453,
        456,1,0,0,0,454,452,1,0,0,0,454,455,1,0,0,0,455,69,1,0,0,0,456,454,
        1,0,0,0,457,458,3,54,27,0,458,71,1,0,0,0,459,460,5,76,0,0,460,73,
        1,0,0,0,461,463,3,76,38,0,462,461,1,0,0,0,463,464,1,0,0,0,464,462,
        1,0,0,0,464,465,1,0,0,0,465,75,1,0,0,0,466,469,3,78,39,0,467,469,
        3,80,40,0,468,466,1,0,0,0,468,467,1,0,0,0,469,77,1,0,0,0,470,471,
        3,82,41,0,471,472,3,86,43,0,472,473,5,43,0,0,473,79,1,0,0,0,474,
        475,3,84,42,0,475,476,3,86,43,0,476,477,5,44,0,0,477,81,1,0,0,0,
        478,482,3,38,19,0,479,482,3,42,21,0,480,482,3,48,24,0,481,478,1,
        0,0,0,481,479,1,0,0,0,481,480,1,0,0,0,482,485,1,0,0,0,483,481,1,
        0,0,0,483,484,1,0,0,0,484,487,1,0,0,0,485,483,1,0,0,0,486,488,5,
        75,0,0,487,486,1,0,0,0,487,488,1,0,0,0,488,489,1,0,0,0,489,490,5,
        41,0,0,490,491,3,72,36,0,491,493,5,6,0,0,492,494,3,148,74,0,493,
        492,1,0,0,0,493,494,1,0,0,0,494,495,1,0,0,0,495,497,5,7,0,0,496,
        498,5,45,0,0,497,496,1,0,0,0,497,498,1,0,0,0,498,83,1,0,0,0,499,
        503,3,38,19,0,500,503,3,42,21,0,501,503,3,48,24,0,502,499,1,0,0,
        0,502,500,1,0,0,0,502,501,1,0,0,0,503,506,1,0,0,0,504,502,1,0,0,
        0,504,505,1,0,0,0,505,508,1,0,0,0,506,504,1,0,0,0,507,509,5,75,0,
        0,508,507,1,0,0,0,508,509,1,0,0,0,509,510,1,0,0,0,510,511,5,42,0,
        0,511,512,3,72,36,0,512,514,5,6,0,0,513,515,3,148,74,0,514,513,1,
        0,0,0,514,515,1,0,0,0,515,516,1,0,0,0,516,518,5,7,0,0,517,519,5,
        45,0,0,518,517,1,0,0,0,518,519,1,0,0,0,519,85,1,0,0,0,520,522,3,
        64,32,0,521,520,1,0,0,0,521,522,1,0,0,0,522,523,1,0,0,0,523,524,
        3,144,72,0,524,87,1,0,0,0,525,526,5,63,0,0,526,89,1,0,0,0,527,528,
        5,71,0,0,528,91,1,0,0,0,529,532,5,64,0,0,530,533,3,204,102,0,531,
        533,3,168,84,0,532,530,1,0,0,0,532,531,1,0,0,0,532,533,1,0,0,0,533,
        93,1,0,0,0,534,538,3,96,48,0,535,537,3,98,49,0,536,535,1,0,0,0,537,
        540,1,0,0,0,538,536,1,0,0,0,538,539,1,0,0,0,539,542,1,0,0,0,540,
        538,1,0,0,0,541,543,3,100,50,0,542,541,1,0,0,0,542,543,1,0,0,0,543,
        544,1,0,0,0,544,545,5,47,0,0,545,95,1,0,0,0,546,547,5,49,0,0,547,
        548,3,168,84,0,548,549,5,52,0,0,549,550,3,144,72,0,550,97,1,0,0,
        0,551,552,5,50,0,0,552,553,3,168,84,0,553,554,5,52,0,0,554,555,3,
        144,72,0,555,99,1,0,0,0,556,557,5,51,0,0,557,558,3,144,72,0,558,
        101,1,0,0,0,559,560,5,53,0,0,560,561,3,168,84,0,561,562,5,54,0,0,
        562,563,3,144,72,0,563,564,5,48,0,0,564,103,1,0,0,0,565,566,5,55,
        0,0,566,567,5,76,0,0,567,568,5,11,0,0,568,569,3,168,84,0,569,570,
        5,56,0,0,570,571,3,168,84,0,571,572,5,54,0,0,572,573,3,144,72,0,
        573,574,5,48,0,0,574,105,1,0,0,0,575,576,5,55,0,0,576,577,5,57,0,
        0,577,578,5,76,0,0,578,579,5,58,0,0,579,580,3,168,84,0,580,581,5,
        54,0,0,581,582,3,144,72,0,582,583,5,48,0,0,583,107,1,0,0,0,584,585,
        5,59,0,0,585,586,3,124,62,0,586,587,5,60,0,0,587,588,3,126,63,0,
        588,589,5,61,0,0,589,109,1,0,0,0,590,592,5,62,0,0,591,593,3,168,
        84,0,592,591,1,0,0,0,592,593,1,0,0,0,593,111,1,0,0,0,594,597,5,72,
        0,0,595,598,3,204,102,0,596,598,3,164,82,0,597,595,1,0,0,0,597,596,
        1,0,0,0,598,113,1,0,0,0,599,602,5,76,0,0,600,602,3,186,93,0,601,
        599,1,0,0,0,601,600,1,0,0,0,602,606,1,0,0,0,603,605,3,192,96,0,604,
        603,1,0,0,0,605,608,1,0,0,0,606,604,1,0,0,0,606,607,1,0,0,0,607,
        609,1,0,0,0,608,606,1,0,0,0,609,612,3,198,99,0,610,612,3,186,93,
        0,611,601,1,0,0,0,611,610,1,0,0,0,612,115,1,0,0,0,613,614,3,138,
        69,0,614,117,1,0,0,0,615,616,5,76,0,0,616,119,1,0,0,0,617,618,5,
        29,0,0,618,619,3,118,59,0,619,620,5,8,0,0,620,121,1,0,0,0,621,622,
        5,70,0,0,622,623,5,29,0,0,623,624,3,118,59,0,624,123,1,0,0,0,625,
        626,3,144,72,0,626,125,1,0,0,0,627,628,3,144,72,0,628,127,1,0,0,
        0,629,630,3,168,84,0,630,129,1,0,0,0,631,632,3,168,84,0,632,131,
        1,0,0,0,633,634,5,73,0,0,634,635,3,128,64,0,635,636,5,10,0,0,636,
        637,3,130,65,0,637,133,1,0,0,0,638,639,5,74,0,0,639,640,3,128,64,
        0,640,641,5,10,0,0,641,642,3,130,65,0,642,135,1,0,0,0,643,644,5,
        22,0,0,644,645,5,6,0,0,645,646,3,168,84,0,646,647,5,10,0,0,647,648,
        3,168,84,0,648,649,5,10,0,0,649,650,3,168,84,0,650,651,5,7,0,0,651,
        137,1,0,0,0,652,653,5,126,0,0,653,654,3,168,84,0,654,139,1,0,0,0,
        655,656,3,144,72,0,656,141,1,0,0,0,657,658,3,144,72,0,658,143,1,
        0,0,0,659,662,3,160,80,0,660,662,3,38,19,0,661,659,1,0,0,0,661,660,
        1,0,0,0,662,665,1,0,0,0,663,661,1,0,0,0,663,664,1,0,0,0,664,145,
        1,0,0,0,665,663,1,0,0,0,666,667,7,5,0,0,667,147,1,0,0,0,668,673,
        3,150,75,0,669,670,5,10,0,0,670,672,3,150,75,0,671,669,1,0,0,0,672,
        675,1,0,0,0,673,671,1,0,0,0,673,674,1,0,0,0,674,149,1,0,0,0,675,
        673,1,0,0,0,676,678,3,48,24,0,677,676,1,0,0,0,678,681,1,0,0,0,679,
        677,1,0,0,0,679,680,1,0,0,0,680,683,1,0,0,0,681,679,1,0,0,0,682,
        684,5,46,0,0,683,682,1,0,0,0,683,684,1,0,0,0,684,685,1,0,0,0,685,
        688,5,76,0,0,686,687,5,11,0,0,687,689,3,152,76,0,688,686,1,0,0,0,
        688,689,1,0,0,0,689,151,1,0,0,0,690,691,3,154,77,0,691,153,1,0,0,
        0,692,694,7,6,0,0,693,692,1,0,0,0,693,694,1,0,0,0,694,695,1,0,0,
        0,695,703,3,146,73,0,696,703,3,158,79,0,697,703,5,30,0,0,698,703,
        5,31,0,0,699,703,5,32,0,0,700,703,5,33,0,0,701,703,5,35,0,0,702,
        693,1,0,0,0,702,696,1,0,0,0,702,697,1,0,0,0,702,698,1,0,0,0,702,
        699,1,0,0,0,702,700,1,0,0,0,702,701,1,0,0,0,703,155,1,0,0,0,704,
        710,5,38,0,0,705,709,5,40,0,0,706,709,5,28,0,0,707,709,3,38,19,0,
        708,705,1,0,0,0,708,706,1,0,0,0,708,707,1,0,0,0,709,712,1,0,0,0,
        710,708,1,0,0,0,710,711,1,0,0,0,711,713,1,0,0,0,712,710,1,0,0,0,
        713,714,5,39,0,0,714,157,1,0,0,0,715,718,5,37,0,0,716,718,3,156,
        78,0,717,715,1,0,0,0,717,716,1,0,0,0,718,719,1,0,0,0,719,717,1,0,
        0,0,719,720,1,0,0,0,720,159,1,0,0,0,721,727,3,120,60,0,722,728,3,
        114,57,0,723,728,3,116,58,0,724,728,3,206,103,0,725,728,3,162,81,
        0,726,728,3,38,19,0,727,722,1,0,0,0,727,723,1,0,0,0,727,724,1,0,
        0,0,727,725,1,0,0,0,727,726,1,0,0,0,727,728,1,0,0,0,728,737,1,0,
        0,0,729,735,3,114,57,0,730,735,3,116,58,0,731,735,3,206,103,0,732,
        735,3,162,81,0,733,735,3,38,19,0,734,729,1,0,0,0,734,730,1,0,0,0,
        734,731,1,0,0,0,734,732,1,0,0,0,734,733,1,0,0,0,735,737,1,0,0,0,
        736,721,1,0,0,0,736,734,1,0,0,0,737,739,1,0,0,0,738,740,5,9,0,0,
        739,738,1,0,0,0,739,740,1,0,0,0,740,743,1,0,0,0,741,743,5,9,0,0,
        742,736,1,0,0,0,742,741,1,0,0,0,743,161,1,0,0,0,744,748,3,196,98,
        0,745,747,3,38,19,0,746,745,1,0,0,0,747,750,1,0,0,0,748,746,1,0,
        0,0,748,749,1,0,0,0,749,751,1,0,0,0,750,748,1,0,0,0,751,755,5,11,
        0,0,752,754,3,38,19,0,753,752,1,0,0,0,754,757,1,0,0,0,755,753,1,
        0,0,0,755,756,1,0,0,0,756,758,1,0,0,0,757,755,1,0,0,0,758,759,3,
        168,84,0,759,163,1,0,0,0,760,765,3,166,83,0,761,762,5,10,0,0,762,
        764,3,166,83,0,763,761,1,0,0,0,764,767,1,0,0,0,765,763,1,0,0,0,765,
        766,1,0,0,0,766,165,1,0,0,0,767,765,1,0,0,0,768,770,3,168,84,0,769,
        768,1,0,0,0,769,770,1,0,0,0,770,167,1,0,0,0,771,794,3,178,89,0,772,
        774,3,38,19,0,773,772,1,0,0,0,774,777,1,0,0,0,775,773,1,0,0,0,775,
        776,1,0,0,0,776,778,1,0,0,0,777,775,1,0,0,0,778,782,3,170,85,0,779,
        781,3,38,19,0,780,779,1,0,0,0,781,784,1,0,0,0,782,780,1,0,0,0,782,
        783,1,0,0,0,783,785,1,0,0,0,784,782,1,0,0,0,785,789,3,178,89,0,786,
        788,3,38,19,0,787,786,1,0,0,0,788,791,1,0,0,0,789,787,1,0,0,0,789,
        790,1,0,0,0,790,793,1,0,0,0,791,789,1,0,0,0,792,775,1,0,0,0,793,
        796,1,0,0,0,794,792,1,0,0,0,794,795,1,0,0,0,795,169,1,0,0,0,796,
        794,1,0,0,0,797,805,5,12,0,0,798,805,5,13,0,0,799,805,5,19,0,0,800,
        805,5,20,0,0,801,805,5,21,0,0,802,805,3,174,87,0,803,805,3,172,86,
        0,804,797,1,0,0,0,804,798,1,0,0,0,804,799,1,0,0,0,804,800,1,0,0,
        0,804,801,1,0,0,0,804,802,1,0,0,0,804,803,1,0,0,0,805,171,1,0,0,
        0,806,807,7,7,0,0,807,173,1,0,0,0,808,809,7,8,0,0,809,175,1,0,0,
        0,810,811,7,9,0,0,811,177,1,0,0,0,812,814,3,176,88,0,813,812,1,0,
        0,0,813,814,1,0,0,0,814,832,1,0,0,0,815,833,3,154,77,0,816,833,3,
        190,95,0,817,818,5,6,0,0,818,819,3,168,84,0,819,820,5,7,0,0,820,
        824,1,0,0,0,821,823,3,192,96,0,822,821,1,0,0,0,823,826,1,0,0,0,824,
        822,1,0,0,0,824,825,1,0,0,0,825,833,1,0,0,0,826,824,1,0,0,0,827,
        830,5,76,0,0,828,830,3,186,93,0,829,827,1,0,0,0,829,828,1,0,0,0,
        830,833,1,0,0,0,831,833,3,138,69,0,832,815,1,0,0,0,832,816,1,0,0,
        0,832,817,1,0,0,0,832,829,1,0,0,0,832,831,1,0,0,0,833,179,1,0,0,
        0,834,835,5,69,0,0,835,837,3,182,91,0,836,838,3,204,102,0,837,836,
        1,0,0,0,837,838,1,0,0,0,838,842,1,0,0,0,839,840,5,69,0,0,840,842,
        3,204,102,0,841,834,1,0,0,0,841,839,1,0,0,0,842,181,1,0,0,0,843,
        844,5,76,0,0,844,183,1,0,0,0,845,846,3,188,94,0,846,847,3,204,102,
        0,847,185,1,0,0,0,848,849,3,188,94,0,849,850,3,204,102,0,850,187,
        1,0,0,0,851,852,5,76,0,0,852,189,1,0,0,0,853,858,5,76,0,0,854,858,
        3,180,90,0,855,858,3,136,68,0,856,858,3,186,93,0,857,853,1,0,0,0,
        857,854,1,0,0,0,857,855,1,0,0,0,857,856,1,0,0,0,858,862,1,0,0,0,
        859,861,3,192,96,0,860,859,1,0,0,0,861,864,1,0,0,0,862,860,1,0,0,
        0,862,863,1,0,0,0,863,191,1,0,0,0,864,862,1,0,0,0,865,869,3,202,
        101,0,866,869,3,200,100,0,867,869,3,198,99,0,868,865,1,0,0,0,868,
        866,1,0,0,0,868,867,1,0,0,0,869,193,1,0,0,0,870,872,3,192,96,0,871,
        870,1,0,0,0,872,875,1,0,0,0,873,871,1,0,0,0,873,874,1,0,0,0,874,
        878,1,0,0,0,875,873,1,0,0,0,876,879,3,202,101,0,877,879,3,200,100,
        0,878,876,1,0,0,0,878,877,1,0,0,0,879,195,1,0,0,0,880,883,5,76,0,
        0,881,883,3,186,93,0,882,880,1,0,0,0,882,881,1,0,0,0,883,885,1,0,
        0,0,884,886,3,194,97,0,885,884,1,0,0,0,885,886,1,0,0,0,886,197,1,
        0,0,0,887,888,5,3,0,0,888,889,3,184,92,0,889,199,1,0,0,0,890,891,
        5,4,0,0,891,892,3,168,84,0,892,893,5,5,0,0,893,201,1,0,0,0,894,895,
        5,3,0,0,895,896,5,76,0,0,896,203,1,0,0,0,897,898,5,6,0,0,898,899,
        3,164,82,0,899,900,5,7,0,0,900,205,1,0,0,0,901,915,3,94,47,0,902,
        915,3,102,51,0,903,915,3,104,52,0,904,915,3,106,53,0,905,915,3,108,
        54,0,906,915,3,110,55,0,907,915,3,88,44,0,908,915,3,90,45,0,909,
        915,3,92,46,0,910,915,3,112,56,0,911,915,3,122,61,0,912,915,3,132,
        66,0,913,915,3,134,67,0,914,901,1,0,0,0,914,902,1,0,0,0,914,903,
        1,0,0,0,914,904,1,0,0,0,914,905,1,0,0,0,914,906,1,0,0,0,914,907,
        1,0,0,0,914,908,1,0,0,0,914,909,1,0,0,0,914,910,1,0,0,0,914,911,
        1,0,0,0,914,912,1,0,0,0,914,913,1,0,0,0,915,207,1,0,0,0,97,209,212,
        217,221,226,232,250,256,259,264,267,274,297,304,308,314,321,329,
        349,362,376,384,387,394,397,404,409,411,417,424,429,434,439,441,
        447,454,464,468,481,483,487,493,497,502,504,508,514,518,521,532,
        538,542,592,597,601,606,611,661,663,673,679,683,688,693,702,708,
        710,717,719,727,734,736,739,742,748,755,765,769,775,782,789,794,
        804,813,824,829,832,837,841,857,862,868,873,878,882,885,914
    ]

class BSLParser ( Parser ):

    grammarFileName = "BSLParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "'.'", "'['", 
                     "']'", "<INVALID>", "<INVALID>", "':'", "';'", "','", 
                     "'='", "'+'", "'-'", "'<='", "'<>'", "'<'", "'>='", 
                     "'>'", "'*'", "'/'", "'%'", "'?'", "'&'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'#'", "'|'", "'~'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'!'" ]

    symbolicNames = [ "<INVALID>", "LINE_COMMENT", "WHITE_SPACE", "DOT", 
                      "LBRACK", "RBRACK", "LPAREN", "RPAREN", "COLON", "SEMICOLON", 
                      "COMMA", "ASSIGN", "PLUS", "MINUS", "LESS_OR_EQUAL", 
                      "NOT_EQUAL", "LESS", "GREATER_OR_EQUAL", "GREATER", 
                      "MUL", "QUOTIENT", "MODULO", "QUESTION", "AMPERSAND", 
                      "PREPROC_DELETE", "PREPROC_INSERT", "PREPROC_ENDINSERT", 
                      "HASH", "BAR", "TILDA", "TRUE", "FALSE", "UNDEFINED", 
                      "NULL", "DECIMAL", "DATETIME", "FLOAT", "STRING", 
                      "STRINGSTART", "STRINGTAIL", "STRINGPART", "PROCEDURE_KEYWORD", 
                      "FUNCTION_KEYWORD", "ENDPROCEDURE_KEYWORD", "ENDFUNCTION_KEYWORD", 
                      "EXPORT_KEYWORD", "VAL_KEYWORD", "ENDIF_KEYWORD", 
                      "ENDDO_KEYWORD", "IF_KEYWORD", "ELSIF_KEYWORD", "ELSE_KEYWORD", 
                      "THEN_KEYWORD", "WHILE_KEYWORD", "DO_KEYWORD", "FOR_KEYWORD", 
                      "TO_KEYWORD", "EACH_KEYWORD", "IN_KEYWORD", "TRY_KEYWORD", 
                      "EXCEPT_KEYWORD", "ENDTRY_KEYWORD", "RETURN_KEYWORD", 
                      "CONTINUE_KEYWORD", "RAISE_KEYWORD", "VAR_KEYWORD", 
                      "NOT_KEYWORD", "OR_KEYWORD", "AND_KEYWORD", "NEW_KEYWORD", 
                      "GOTO_KEYWORD", "BREAK_KEYWORD", "EXECUTE_KEYWORD", 
                      "ADDHANDLER_KEYWORD", "REMOVEHANDLER_KEYWORD", "ASYNC_KEYWORD", 
                      "IDENTIFIER", "UNKNOWN", "PREPROC_EXCLAMATION_MARK", 
                      "PREPROC_LPAREN", "PREPROC_RPAREN", "PREPROC_STRING", 
                      "PREPROC_NATIVE", "PREPROC_USE_KEYWORD", "PREPROC_REGION", 
                      "PREPROC_END_REGION", "PREPROC_NOT_KEYWORD", "PREPROC_OR_KEYWORD", 
                      "PREPROC_AND_KEYWORD", "PREPROC_IF_KEYWORD", "PREPROC_THEN_KEYWORD", 
                      "PREPROC_ELSIF_KEYWORD", "PREPROC_ENDIF_KEYWORD", 
                      "PREPROC_ELSE_KEYWORD", "PREPROC_MOBILEAPPCLIENT_SYMBOL", 
                      "PREPROC_MOBILEAPPSERVER_SYMBOL", "PREPROC_MOBILECLIENT_SYMBOL", 
                      "PREPROC_THICKCLIENTORDINARYAPPLICATION_SYMBOL", "PREPROC_THICKCLIENTMANAGEDAPPLICATION_SYMBOL", 
                      "PREPROC_EXTERNALCONNECTION_SYMBOL", "PREPROC_THINCLIENT_SYMBOL", 
                      "PREPROC_WEBCLIENT_SYMBOL", "PREPROC_ATCLIENT_SYMBOL", 
                      "PREPROC_CLIENT_SYMBOL", "PREPROC_ATSERVER_SYMBOL", 
                      "PREPROC_SERVER_SYMBOL", "PREPROC_MOBILE_STANDALONE_SERVER", 
                      "PREPROC_LINUX", "PREPROC_WINDOWS", "PREPROC_MACOS", 
                      "PREPROC_IDENTIFIER", "PREPROC_NEWLINE", "PREPROC_ANY", 
                      "ANNOTATION_ATSERVERNOCONTEXT_SYMBOL", "ANNOTATION_ATCLIENTATSERVERNOCONTEXT_SYMBOL", 
                      "ANNOTATION_ATCLIENTATSERVER_SYMBOL", "ANNOTATION_ATCLIENT_SYMBOL", 
                      "ANNOTATION_ATSERVER_SYMBOL", "ANNOTATION_BEFORE_SYMBOL", 
                      "ANNOTATION_AFTER_SYMBOL", "ANNOTATION_AROUND_SYMBOL", 
                      "ANNOTATION_CHANGEANDVALIDATE_SYMBOL", "ANNOTATION_CUSTOM_SYMBOL", 
                      "ANNOTATION_UNKNOWN", "PREPROC_ENDDELETE", "PREPROC_DELETE_ANY", 
                      "AWAIT_KEYWORD" ]

    RULE_file = 0
    RULE_preproc_native = 1
    RULE_usedLib = 2
    RULE_use = 3
    RULE_moduleAnnotations = 4
    RULE_shebang = 5
    RULE_regionStart = 6
    RULE_regionEnd = 7
    RULE_regionName = 8
    RULE_preproc_if = 9
    RULE_preproc_elsif = 10
    RULE_preproc_else = 11
    RULE_preproc_endif = 12
    RULE_preproc_expression = 13
    RULE_preproc_logicalOperand = 14
    RULE_preproc_logicalExpression = 15
    RULE_preproc_symbol = 16
    RULE_preproc_unknownSymbol = 17
    RULE_preproc_boolOperation = 18
    RULE_preprocessor = 19
    RULE_compilerDirectiveSymbol = 20
    RULE_compilerDirective = 21
    RULE_annotationName = 22
    RULE_annotationParamName = 23
    RULE_annotation = 24
    RULE_annotationParams = 25
    RULE_annotationParam = 26
    RULE_var_name = 27
    RULE_moduleVars = 28
    RULE_moduleVar = 29
    RULE_moduleVarsList = 30
    RULE_moduleVarDeclaration = 31
    RULE_subVars = 32
    RULE_subVar = 33
    RULE_subVarsList = 34
    RULE_subVarDeclaration = 35
    RULE_subName = 36
    RULE_subs = 37
    RULE_sub = 38
    RULE_procedure = 39
    RULE_function = 40
    RULE_procDeclaration = 41
    RULE_funcDeclaration = 42
    RULE_subCodeBlock = 43
    RULE_continueStatement = 44
    RULE_breakStatement = 45
    RULE_raiseStatement = 46
    RULE_ifStatement = 47
    RULE_ifBranch = 48
    RULE_elsifBranch = 49
    RULE_elseBranch = 50
    RULE_whileStatement = 51
    RULE_forStatement = 52
    RULE_forEachStatement = 53
    RULE_tryStatement = 54
    RULE_returnStatement = 55
    RULE_executeStatement = 56
    RULE_callStatement = 57
    RULE_waitStatement = 58
    RULE_labelName = 59
    RULE_label = 60
    RULE_gotoStatement = 61
    RULE_tryCodeBlock = 62
    RULE_exceptCodeBlock = 63
    RULE_event = 64
    RULE_handler = 65
    RULE_addHandlerStatement = 66
    RULE_removeHandlerStatement = 67
    RULE_ternaryOperator = 68
    RULE_waitExpression = 69
    RULE_fileCodeBlockBeforeSub = 70
    RULE_fileCodeBlock = 71
    RULE_codeBlock = 72
    RULE_numeric = 73
    RULE_paramList = 74
    RULE_param = 75
    RULE_defaultValue = 76
    RULE_constValue = 77
    RULE_multilineString = 78
    RULE_string = 79
    RULE_statement = 80
    RULE_assignment = 81
    RULE_callParamList = 82
    RULE_callParam = 83
    RULE_expression = 84
    RULE_operation = 85
    RULE_compareOperation = 86
    RULE_boolOperation = 87
    RULE_unaryModifier = 88
    RULE_member = 89
    RULE_newExpression = 90
    RULE_typeName = 91
    RULE_methodCall = 92
    RULE_globalMethodCall = 93
    RULE_methodName = 94
    RULE_complexIdentifier = 95
    RULE_modifier = 96
    RULE_acceptor = 97
    RULE_lValue = 98
    RULE_accessCall = 99
    RULE_accessIndex = 100
    RULE_accessProperty = 101
    RULE_doCall = 102
    RULE_compoundStatement = 103

    ruleNames =  [ "file", "preproc_native", "usedLib", "use", "moduleAnnotations", 
                   "shebang", "regionStart", "regionEnd", "regionName", 
                   "preproc_if", "preproc_elsif", "preproc_else", "preproc_endif", 
                   "preproc_expression", "preproc_logicalOperand", "preproc_logicalExpression", 
                   "preproc_symbol", "preproc_unknownSymbol", "preproc_boolOperation", 
                   "preprocessor", "compilerDirectiveSymbol", "compilerDirective", 
                   "annotationName", "annotationParamName", "annotation", 
                   "annotationParams", "annotationParam", "var_name", "moduleVars", 
                   "moduleVar", "moduleVarsList", "moduleVarDeclaration", 
                   "subVars", "subVar", "subVarsList", "subVarDeclaration", 
                   "subName", "subs", "sub", "procedure", "function", "procDeclaration", 
                   "funcDeclaration", "subCodeBlock", "continueStatement", 
                   "breakStatement", "raiseStatement", "ifStatement", "ifBranch", 
                   "elsifBranch", "elseBranch", "whileStatement", "forStatement", 
                   "forEachStatement", "tryStatement", "returnStatement", 
                   "executeStatement", "callStatement", "waitStatement", 
                   "labelName", "label", "gotoStatement", "tryCodeBlock", 
                   "exceptCodeBlock", "event", "handler", "addHandlerStatement", 
                   "removeHandlerStatement", "ternaryOperator", "waitExpression", 
                   "fileCodeBlockBeforeSub", "fileCodeBlock", "codeBlock", 
                   "numeric", "paramList", "param", "defaultValue", "constValue", 
                   "multilineString", "string", "statement", "assignment", 
                   "callParamList", "callParam", "expression", "operation", 
                   "compareOperation", "boolOperation", "unaryModifier", 
                   "member", "newExpression", "typeName", "methodCall", 
                   "globalMethodCall", "methodName", "complexIdentifier", 
                   "modifier", "acceptor", "lValue", "accessCall", "accessIndex", 
                   "accessProperty", "doCall", "compoundStatement" ]

    EOF = Token.EOF
    LINE_COMMENT=1
    WHITE_SPACE=2
    DOT=3
    LBRACK=4
    RBRACK=5
    LPAREN=6
    RPAREN=7
    COLON=8
    SEMICOLON=9
    COMMA=10
    ASSIGN=11
    PLUS=12
    MINUS=13
    LESS_OR_EQUAL=14
    NOT_EQUAL=15
    LESS=16
    GREATER_OR_EQUAL=17
    GREATER=18
    MUL=19
    QUOTIENT=20
    MODULO=21
    QUESTION=22
    AMPERSAND=23
    PREPROC_DELETE=24
    PREPROC_INSERT=25
    PREPROC_ENDINSERT=26
    HASH=27
    BAR=28
    TILDA=29
    TRUE=30
    FALSE=31
    UNDEFINED=32
    NULL=33
    DECIMAL=34
    DATETIME=35
    FLOAT=36
    STRING=37
    STRINGSTART=38
    STRINGTAIL=39
    STRINGPART=40
    PROCEDURE_KEYWORD=41
    FUNCTION_KEYWORD=42
    ENDPROCEDURE_KEYWORD=43
    ENDFUNCTION_KEYWORD=44
    EXPORT_KEYWORD=45
    VAL_KEYWORD=46
    ENDIF_KEYWORD=47
    ENDDO_KEYWORD=48
    IF_KEYWORD=49
    ELSIF_KEYWORD=50
    ELSE_KEYWORD=51
    THEN_KEYWORD=52
    WHILE_KEYWORD=53
    DO_KEYWORD=54
    FOR_KEYWORD=55
    TO_KEYWORD=56
    EACH_KEYWORD=57
    IN_KEYWORD=58
    TRY_KEYWORD=59
    EXCEPT_KEYWORD=60
    ENDTRY_KEYWORD=61
    RETURN_KEYWORD=62
    CONTINUE_KEYWORD=63
    RAISE_KEYWORD=64
    VAR_KEYWORD=65
    NOT_KEYWORD=66
    OR_KEYWORD=67
    AND_KEYWORD=68
    NEW_KEYWORD=69
    GOTO_KEYWORD=70
    BREAK_KEYWORD=71
    EXECUTE_KEYWORD=72
    ADDHANDLER_KEYWORD=73
    REMOVEHANDLER_KEYWORD=74
    ASYNC_KEYWORD=75
    IDENTIFIER=76
    UNKNOWN=77
    PREPROC_EXCLAMATION_MARK=78
    PREPROC_LPAREN=79
    PREPROC_RPAREN=80
    PREPROC_STRING=81
    PREPROC_NATIVE=82
    PREPROC_USE_KEYWORD=83
    PREPROC_REGION=84
    PREPROC_END_REGION=85
    PREPROC_NOT_KEYWORD=86
    PREPROC_OR_KEYWORD=87
    PREPROC_AND_KEYWORD=88
    PREPROC_IF_KEYWORD=89
    PREPROC_THEN_KEYWORD=90
    PREPROC_ELSIF_KEYWORD=91
    PREPROC_ENDIF_KEYWORD=92
    PREPROC_ELSE_KEYWORD=93
    PREPROC_MOBILEAPPCLIENT_SYMBOL=94
    PREPROC_MOBILEAPPSERVER_SYMBOL=95
    PREPROC_MOBILECLIENT_SYMBOL=96
    PREPROC_THICKCLIENTORDINARYAPPLICATION_SYMBOL=97
    PREPROC_THICKCLIENTMANAGEDAPPLICATION_SYMBOL=98
    PREPROC_EXTERNALCONNECTION_SYMBOL=99
    PREPROC_THINCLIENT_SYMBOL=100
    PREPROC_WEBCLIENT_SYMBOL=101
    PREPROC_ATCLIENT_SYMBOL=102
    PREPROC_CLIENT_SYMBOL=103
    PREPROC_ATSERVER_SYMBOL=104
    PREPROC_SERVER_SYMBOL=105
    PREPROC_MOBILE_STANDALONE_SERVER=106
    PREPROC_LINUX=107
    PREPROC_WINDOWS=108
    PREPROC_MACOS=109
    PREPROC_IDENTIFIER=110
    PREPROC_NEWLINE=111
    PREPROC_ANY=112
    ANNOTATION_ATSERVERNOCONTEXT_SYMBOL=113
    ANNOTATION_ATCLIENTATSERVERNOCONTEXT_SYMBOL=114
    ANNOTATION_ATCLIENTATSERVER_SYMBOL=115
    ANNOTATION_ATCLIENT_SYMBOL=116
    ANNOTATION_ATSERVER_SYMBOL=117
    ANNOTATION_BEFORE_SYMBOL=118
    ANNOTATION_AFTER_SYMBOL=119
    ANNOTATION_AROUND_SYMBOL=120
    ANNOTATION_CHANGEANDVALIDATE_SYMBOL=121
    ANNOTATION_CUSTOM_SYMBOL=122
    ANNOTATION_UNKNOWN=123
    PREPROC_ENDDELETE=124
    PREPROC_DELETE_ANY=125
    AWAIT_KEYWORD=126

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class FileContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fileCodeBlock(self):
            return self.getTypedRuleContext(BSLParser.FileCodeBlockContext,0)


        def EOF(self):
            return self.getToken(BSLParser.EOF, 0)

        def shebang(self):
            return self.getTypedRuleContext(BSLParser.ShebangContext,0)


        def moduleAnnotations(self):
            return self.getTypedRuleContext(BSLParser.ModuleAnnotationsContext,0)


        def preprocessor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BSLParser.PreprocessorContext)
            else:
                return self.getTypedRuleContext(BSLParser.PreprocessorContext,i)


        def moduleVars(self):
            return self.getTypedRuleContext(BSLParser.ModuleVarsContext,0)


        def fileCodeBlockBeforeSub(self):
            return self.getTypedRuleContext(BSLParser.FileCodeBlockBeforeSubContext,0)


        def subs(self):
            return self.getTypedRuleContext(BSLParser.SubsContext,0)


        def getRuleIndex(self):
            return BSLParser.RULE_file

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile" ):
                listener.enterFile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile" ):
                listener.exitFile(self)




    def file_(self):

        localctx = BSLParser.FileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_file)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 209
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.state = 208
                self.shebang()


            self.state = 212
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.state = 211
                self.moduleAnnotations()


            self.state = 217
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 214
                    self.preprocessor() 
                self.state = 219
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

            self.state = 221
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.state = 220
                self.moduleVars()


            self.state = 226
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 223
                    self.preprocessor() 
                self.state = 228
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

            self.state = 232
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 229
                self.fileCodeBlockBeforeSub()
                self.state = 230
                self.subs()


            self.state = 234
            self.fileCodeBlock()
            self.state = 235
            self.match(BSLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Preproc_nativeContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HASH(self):
            return self.getToken(BSLParser.HASH, 0)

        def PREPROC_NATIVE(self):
            return self.getToken(BSLParser.PREPROC_NATIVE, 0)

        def getRuleIndex(self):
            return BSLParser.RULE_preproc_native

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreproc_native" ):
                listener.enterPreproc_native(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreproc_native" ):
                listener.exitPreproc_native(self)




    def preproc_native(self):

        localctx = BSLParser.Preproc_nativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_preproc_native)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 237
            self.match(BSLParser.HASH)
            self.state = 238
            self.match(BSLParser.PREPROC_NATIVE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsedLibContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREPROC_STRING(self):
            return self.getToken(BSLParser.PREPROC_STRING, 0)

        def PREPROC_IDENTIFIER(self):
            return self.getToken(BSLParser.PREPROC_IDENTIFIER, 0)

        def getRuleIndex(self):
            return BSLParser.RULE_usedLib

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsedLib" ):
                listener.enterUsedLib(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsedLib" ):
                listener.exitUsedLib(self)




    def usedLib(self):

        localctx = BSLParser.UsedLibContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_usedLib)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 240
            _la = self._input.LA(1)
            if not(_la==81 or _la==110):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HASH(self):
            return self.getToken(BSLParser.HASH, 0)

        def PREPROC_USE_KEYWORD(self):
            return self.getToken(BSLParser.PREPROC_USE_KEYWORD, 0)

        def usedLib(self):
            return self.getTypedRuleContext(BSLParser.UsedLibContext,0)


        def getRuleIndex(self):
            return BSLParser.RULE_use

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUse" ):
                listener.enterUse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUse" ):
                listener.exitUse(self)




    def use(self):

        localctx = BSLParser.UseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_use)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 242
            self.match(BSLParser.HASH)
            self.state = 243
            self.match(BSLParser.PREPROC_USE_KEYWORD)
            self.state = 244
            self.usedLib()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleAnnotationsContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def preproc_native(self):
            return self.getTypedRuleContext(BSLParser.Preproc_nativeContext,0)


        def use(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BSLParser.UseContext)
            else:
                return self.getTypedRuleContext(BSLParser.UseContext,i)


        def getRuleIndex(self):
            return BSLParser.RULE_moduleAnnotations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleAnnotations" ):
                listener.enterModuleAnnotations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleAnnotations" ):
                listener.exitModuleAnnotations(self)




    def moduleAnnotations(self):

        localctx = BSLParser.ModuleAnnotationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_moduleAnnotations)
        try:
            self.state = 267
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 246
                self.preproc_native()
                self.state = 250
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 247
                        self.use() 
                    self.state = 252
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 254 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 253
                        self.use()

                    else:
                        raise NoViableAltException(self)
                    self.state = 256 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

                self.state = 259
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
                if la_ == 1:
                    self.state = 258
                    self.preproc_native()


                self.state = 264
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 261
                        self.use() 
                    self.state = 266
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShebangContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HASH(self):
            return self.getToken(BSLParser.HASH, 0)

        def PREPROC_EXCLAMATION_MARK(self):
            return self.getToken(BSLParser.PREPROC_EXCLAMATION_MARK, 0)

        def PREPROC_ANY(self, i:int=None):
            if i is None:
                return self.getTokens(BSLParser.PREPROC_ANY)
            else:
                return self.getToken(BSLParser.PREPROC_ANY, i)

        def PREPROC_IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(BSLParser.PREPROC_IDENTIFIER)
            else:
                return self.getToken(BSLParser.PREPROC_IDENTIFIER, i)

        def getRuleIndex(self):
            return BSLParser.RULE_shebang

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShebang" ):
                listener.enterShebang(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShebang" ):
                listener.exitShebang(self)




    def shebang(self):

        localctx = BSLParser.ShebangContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_shebang)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 269
            self.match(BSLParser.HASH)
            self.state = 270
            self.match(BSLParser.PREPROC_EXCLAMATION_MARK)
            self.state = 274
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==110 or _la==112:
                self.state = 271
                _la = self._input.LA(1)
                if not(_la==110 or _la==112):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 276
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RegionStartContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREPROC_REGION(self):
            return self.getToken(BSLParser.PREPROC_REGION, 0)

        def regionName(self):
            return self.getTypedRuleContext(BSLParser.RegionNameContext,0)


        def getRuleIndex(self):
            return BSLParser.RULE_regionStart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegionStart" ):
                listener.enterRegionStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegionStart" ):
                listener.exitRegionStart(self)




    def regionStart(self):

        localctx = BSLParser.RegionStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_regionStart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 277
            self.match(BSLParser.PREPROC_REGION)
            self.state = 278
            self.regionName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RegionEndContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREPROC_END_REGION(self):
            return self.getToken(BSLParser.PREPROC_END_REGION, 0)

        def getRuleIndex(self):
            return BSLParser.RULE_regionEnd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegionEnd" ):
                listener.enterRegionEnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegionEnd" ):
                listener.exitRegionEnd(self)




    def regionEnd(self):

        localctx = BSLParser.RegionEndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_regionEnd)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 280
            self.match(BSLParser.PREPROC_END_REGION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RegionNameContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREPROC_IDENTIFIER(self):
            return self.getToken(BSLParser.PREPROC_IDENTIFIER, 0)

        def getRuleIndex(self):
            return BSLParser.RULE_regionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegionName" ):
                listener.enterRegionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegionName" ):
                listener.exitRegionName(self)




    def regionName(self):

        localctx = BSLParser.RegionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_regionName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 282
            self.match(BSLParser.PREPROC_IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Preproc_ifContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREPROC_IF_KEYWORD(self):
            return self.getToken(BSLParser.PREPROC_IF_KEYWORD, 0)

        def preproc_expression(self):
            return self.getTypedRuleContext(BSLParser.Preproc_expressionContext,0)


        def PREPROC_THEN_KEYWORD(self):
            return self.getToken(BSLParser.PREPROC_THEN_KEYWORD, 0)

        def getRuleIndex(self):
            return BSLParser.RULE_preproc_if

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreproc_if" ):
                listener.enterPreproc_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreproc_if" ):
                listener.exitPreproc_if(self)




    def preproc_if(self):

        localctx = BSLParser.Preproc_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_preproc_if)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 284
            self.match(BSLParser.PREPROC_IF_KEYWORD)
            self.state = 285
            self.preproc_expression()
            self.state = 286
            self.match(BSLParser.PREPROC_THEN_KEYWORD)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Preproc_elsifContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREPROC_ELSIF_KEYWORD(self):
            return self.getToken(BSLParser.PREPROC_ELSIF_KEYWORD, 0)

        def preproc_expression(self):
            return self.getTypedRuleContext(BSLParser.Preproc_expressionContext,0)


        def PREPROC_THEN_KEYWORD(self):
            return self.getToken(BSLParser.PREPROC_THEN_KEYWORD, 0)

        def getRuleIndex(self):
            return BSLParser.RULE_preproc_elsif

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreproc_elsif" ):
                listener.enterPreproc_elsif(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreproc_elsif" ):
                listener.exitPreproc_elsif(self)




    def preproc_elsif(self):

        localctx = BSLParser.Preproc_elsifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_preproc_elsif)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 288
            self.match(BSLParser.PREPROC_ELSIF_KEYWORD)
            self.state = 289
            self.preproc_expression()
            self.state = 290
            self.match(BSLParser.PREPROC_THEN_KEYWORD)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Preproc_elseContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREPROC_ELSE_KEYWORD(self):
            return self.getToken(BSLParser.PREPROC_ELSE_KEYWORD, 0)

        def getRuleIndex(self):
            return BSLParser.RULE_preproc_else

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreproc_else" ):
                listener.enterPreproc_else(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreproc_else" ):
                listener.exitPreproc_else(self)




    def preproc_else(self):

        localctx = BSLParser.Preproc_elseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_preproc_else)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 292
            self.match(BSLParser.PREPROC_ELSE_KEYWORD)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Preproc_endifContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREPROC_ENDIF_KEYWORD(self):
            return self.getToken(BSLParser.PREPROC_ENDIF_KEYWORD, 0)

        def getRuleIndex(self):
            return BSLParser.RULE_preproc_endif

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreproc_endif" ):
                listener.enterPreproc_endif(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreproc_endif" ):
                listener.exitPreproc_endif(self)




    def preproc_endif(self):

        localctx = BSLParser.Preproc_endifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_preproc_endif)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 294
            self.match(BSLParser.PREPROC_ENDIF_KEYWORD)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Preproc_expressionContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREPROC_LPAREN(self):
            return self.getToken(BSLParser.PREPROC_LPAREN, 0)

        def preproc_expression(self):
            return self.getTypedRuleContext(BSLParser.Preproc_expressionContext,0)


        def PREPROC_RPAREN(self):
            return self.getToken(BSLParser.PREPROC_RPAREN, 0)

        def PREPROC_NOT_KEYWORD(self):
            return self.getToken(BSLParser.PREPROC_NOT_KEYWORD, 0)

        def preproc_logicalExpression(self):
            return self.getTypedRuleContext(BSLParser.Preproc_logicalExpressionContext,0)


        def getRuleIndex(self):
            return BSLParser.RULE_preproc_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreproc_expression" ):
                listener.enterPreproc_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreproc_expression" ):
                listener.exitPreproc_expression(self)




    def preproc_expression(self):

        localctx = BSLParser.Preproc_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_preproc_expression)
        self._la = 0 # Token type
        try:
            self.state = 304
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 297
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 296
                    self.match(BSLParser.PREPROC_NOT_KEYWORD)


                self.state = 299
                self.match(BSLParser.PREPROC_LPAREN)
                self.state = 300
                self.preproc_expression()
                self.state = 301
                self.match(BSLParser.PREPROC_RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 303
                self.preproc_logicalExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Preproc_logicalOperandContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREPROC_LPAREN(self):
            return self.getToken(BSLParser.PREPROC_LPAREN, 0)

        def preproc_logicalOperand(self):
            return self.getTypedRuleContext(BSLParser.Preproc_logicalOperandContext,0)


        def PREPROC_RPAREN(self):
            return self.getToken(BSLParser.PREPROC_RPAREN, 0)

        def PREPROC_NOT_KEYWORD(self):
            return self.getToken(BSLParser.PREPROC_NOT_KEYWORD, 0)

        def preproc_symbol(self):
            return self.getTypedRuleContext(BSLParser.Preproc_symbolContext,0)


        def preproc_logicalExpression(self):
            return self.getTypedRuleContext(BSLParser.Preproc_logicalExpressionContext,0)


        def getRuleIndex(self):
            return BSLParser.RULE_preproc_logicalOperand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreproc_logicalOperand" ):
                listener.enterPreproc_logicalOperand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreproc_logicalOperand" ):
                listener.exitPreproc_logicalOperand(self)




    def preproc_logicalOperand(self):

        localctx = BSLParser.Preproc_logicalOperandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_preproc_logicalOperand)
        self._la = 0 # Token type
        try:
            self.state = 321
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 306
                self.match(BSLParser.PREPROC_LPAREN)
                self.state = 308
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
                if la_ == 1:
                    self.state = 307
                    self.match(BSLParser.PREPROC_NOT_KEYWORD)


                self.state = 310
                self.preproc_logicalOperand()
                self.state = 311
                self.match(BSLParser.PREPROC_RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 314
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 313
                    self.match(BSLParser.PREPROC_NOT_KEYWORD)


                self.state = 316
                self.preproc_symbol()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 317
                self.match(BSLParser.PREPROC_LPAREN)
                self.state = 318
                self.preproc_logicalExpression()
                self.state = 319
                self.match(BSLParser.PREPROC_RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Preproc_logicalExpressionContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def preproc_logicalOperand(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BSLParser.Preproc_logicalOperandContext)
            else:
                return self.getTypedRuleContext(BSLParser.Preproc_logicalOperandContext,i)


        def preproc_boolOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BSLParser.Preproc_boolOperationContext)
            else:
                return self.getTypedRuleContext(BSLParser.Preproc_boolOperationContext,i)


        def getRuleIndex(self):
            return BSLParser.RULE_preproc_logicalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreproc_logicalExpression" ):
                listener.enterPreproc_logicalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreproc_logicalExpression" ):
                listener.exitPreproc_logicalExpression(self)




    def preproc_logicalExpression(self):

        localctx = BSLParser.Preproc_logicalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_preproc_logicalExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 323
            self.preproc_logicalOperand()
            self.state = 329
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==87 or _la==88:
                self.state = 324
                self.preproc_boolOperation()
                self.state = 325
                self.preproc_logicalOperand()
                self.state = 331
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Preproc_symbolContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREPROC_CLIENT_SYMBOL(self):
            return self.getToken(BSLParser.PREPROC_CLIENT_SYMBOL, 0)

        def PREPROC_ATCLIENT_SYMBOL(self):
            return self.getToken(BSLParser.PREPROC_ATCLIENT_SYMBOL, 0)

        def PREPROC_SERVER_SYMBOL(self):
            return self.getToken(BSLParser.PREPROC_SERVER_SYMBOL, 0)

        def PREPROC_ATSERVER_SYMBOL(self):
            return self.getToken(BSLParser.PREPROC_ATSERVER_SYMBOL, 0)

        def PREPROC_MOBILEAPPCLIENT_SYMBOL(self):
            return self.getToken(BSLParser.PREPROC_MOBILEAPPCLIENT_SYMBOL, 0)

        def PREPROC_MOBILEAPPSERVER_SYMBOL(self):
            return self.getToken(BSLParser.PREPROC_MOBILEAPPSERVER_SYMBOL, 0)

        def PREPROC_MOBILECLIENT_SYMBOL(self):
            return self.getToken(BSLParser.PREPROC_MOBILECLIENT_SYMBOL, 0)

        def PREPROC_THICKCLIENTORDINARYAPPLICATION_SYMBOL(self):
            return self.getToken(BSLParser.PREPROC_THICKCLIENTORDINARYAPPLICATION_SYMBOL, 0)

        def PREPROC_THICKCLIENTMANAGEDAPPLICATION_SYMBOL(self):
            return self.getToken(BSLParser.PREPROC_THICKCLIENTMANAGEDAPPLICATION_SYMBOL, 0)

        def PREPROC_EXTERNALCONNECTION_SYMBOL(self):
            return self.getToken(BSLParser.PREPROC_EXTERNALCONNECTION_SYMBOL, 0)

        def PREPROC_THINCLIENT_SYMBOL(self):
            return self.getToken(BSLParser.PREPROC_THINCLIENT_SYMBOL, 0)

        def PREPROC_WEBCLIENT_SYMBOL(self):
            return self.getToken(BSLParser.PREPROC_WEBCLIENT_SYMBOL, 0)

        def PREPROC_MOBILE_STANDALONE_SERVER(self):
            return self.getToken(BSLParser.PREPROC_MOBILE_STANDALONE_SERVER, 0)

        def PREPROC_LINUX(self):
            return self.getToken(BSLParser.PREPROC_LINUX, 0)

        def PREPROC_WINDOWS(self):
            return self.getToken(BSLParser.PREPROC_WINDOWS, 0)

        def PREPROC_MACOS(self):
            return self.getToken(BSLParser.PREPROC_MACOS, 0)

        def preproc_unknownSymbol(self):
            return self.getTypedRuleContext(BSLParser.Preproc_unknownSymbolContext,0)


        def getRuleIndex(self):
            return BSLParser.RULE_preproc_symbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreproc_symbol" ):
                listener.enterPreproc_symbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreproc_symbol" ):
                listener.exitPreproc_symbol(self)




    def preproc_symbol(self):

        localctx = BSLParser.Preproc_symbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_preproc_symbol)
        try:
            self.state = 349
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [103]:
                self.enterOuterAlt(localctx, 1)
                self.state = 332
                self.match(BSLParser.PREPROC_CLIENT_SYMBOL)
                pass
            elif token in [102]:
                self.enterOuterAlt(localctx, 2)
                self.state = 333
                self.match(BSLParser.PREPROC_ATCLIENT_SYMBOL)
                pass
            elif token in [105]:
                self.enterOuterAlt(localctx, 3)
                self.state = 334
                self.match(BSLParser.PREPROC_SERVER_SYMBOL)
                pass
            elif token in [104]:
                self.enterOuterAlt(localctx, 4)
                self.state = 335
                self.match(BSLParser.PREPROC_ATSERVER_SYMBOL)
                pass
            elif token in [94]:
                self.enterOuterAlt(localctx, 5)
                self.state = 336
                self.match(BSLParser.PREPROC_MOBILEAPPCLIENT_SYMBOL)
                pass
            elif token in [95]:
                self.enterOuterAlt(localctx, 6)
                self.state = 337
                self.match(BSLParser.PREPROC_MOBILEAPPSERVER_SYMBOL)
                pass
            elif token in [96]:
                self.enterOuterAlt(localctx, 7)
                self.state = 338
                self.match(BSLParser.PREPROC_MOBILECLIENT_SYMBOL)
                pass
            elif token in [97]:
                self.enterOuterAlt(localctx, 8)
                self.state = 339
                self.match(BSLParser.PREPROC_THICKCLIENTORDINARYAPPLICATION_SYMBOL)
                pass
            elif token in [98]:
                self.enterOuterAlt(localctx, 9)
                self.state = 340
                self.match(BSLParser.PREPROC_THICKCLIENTMANAGEDAPPLICATION_SYMBOL)
                pass
            elif token in [99]:
                self.enterOuterAlt(localctx, 10)
                self.state = 341
                self.match(BSLParser.PREPROC_EXTERNALCONNECTION_SYMBOL)
                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 11)
                self.state = 342
                self.match(BSLParser.PREPROC_THINCLIENT_SYMBOL)
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 12)
                self.state = 343
                self.match(BSLParser.PREPROC_WEBCLIENT_SYMBOL)
                pass
            elif token in [106]:
                self.enterOuterAlt(localctx, 13)
                self.state = 344
                self.match(BSLParser.PREPROC_MOBILE_STANDALONE_SERVER)
                pass
            elif token in [107]:
                self.enterOuterAlt(localctx, 14)
                self.state = 345
                self.match(BSLParser.PREPROC_LINUX)
                pass
            elif token in [108]:
                self.enterOuterAlt(localctx, 15)
                self.state = 346
                self.match(BSLParser.PREPROC_WINDOWS)
                pass
            elif token in [109]:
                self.enterOuterAlt(localctx, 16)
                self.state = 347
                self.match(BSLParser.PREPROC_MACOS)
                pass
            elif token in [110]:
                self.enterOuterAlt(localctx, 17)
                self.state = 348
                self.preproc_unknownSymbol()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Preproc_unknownSymbolContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREPROC_IDENTIFIER(self):
            return self.getToken(BSLParser.PREPROC_IDENTIFIER, 0)

        def getRuleIndex(self):
            return BSLParser.RULE_preproc_unknownSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreproc_unknownSymbol" ):
                listener.enterPreproc_unknownSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreproc_unknownSymbol" ):
                listener.exitPreproc_unknownSymbol(self)




    def preproc_unknownSymbol(self):

        localctx = BSLParser.Preproc_unknownSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_preproc_unknownSymbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 351
            self.match(BSLParser.PREPROC_IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Preproc_boolOperationContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREPROC_OR_KEYWORD(self):
            return self.getToken(BSLParser.PREPROC_OR_KEYWORD, 0)

        def PREPROC_AND_KEYWORD(self):
            return self.getToken(BSLParser.PREPROC_AND_KEYWORD, 0)

        def getRuleIndex(self):
            return BSLParser.RULE_preproc_boolOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreproc_boolOperation" ):
                listener.enterPreproc_boolOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreproc_boolOperation" ):
                listener.exitPreproc_boolOperation(self)




    def preproc_boolOperation(self):

        localctx = BSLParser.Preproc_boolOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_preproc_boolOperation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 353
            _la = self._input.LA(1)
            if not(_la==87 or _la==88):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PreprocessorContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HASH(self):
            return self.getToken(BSLParser.HASH, 0)

        def regionStart(self):
            return self.getTypedRuleContext(BSLParser.RegionStartContext,0)


        def regionEnd(self):
            return self.getTypedRuleContext(BSLParser.RegionEndContext,0)


        def preproc_if(self):
            return self.getTypedRuleContext(BSLParser.Preproc_ifContext,0)


        def preproc_elsif(self):
            return self.getTypedRuleContext(BSLParser.Preproc_elsifContext,0)


        def preproc_else(self):
            return self.getTypedRuleContext(BSLParser.Preproc_elseContext,0)


        def preproc_endif(self):
            return self.getTypedRuleContext(BSLParser.Preproc_endifContext,0)


        def getRuleIndex(self):
            return BSLParser.RULE_preprocessor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreprocessor" ):
                listener.enterPreprocessor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreprocessor" ):
                listener.exitPreprocessor(self)




    def preprocessor(self):

        localctx = BSLParser.PreprocessorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_preprocessor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 355
            self.match(BSLParser.HASH)
            self.state = 362
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [84]:
                self.state = 356
                self.regionStart()
                pass
            elif token in [85]:
                self.state = 357
                self.regionEnd()
                pass
            elif token in [89]:
                self.state = 358
                self.preproc_if()
                pass
            elif token in [91]:
                self.state = 359
                self.preproc_elsif()
                pass
            elif token in [93]:
                self.state = 360
                self.preproc_else()
                pass
            elif token in [92]:
                self.state = 361
                self.preproc_endif()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompilerDirectiveSymbolContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANNOTATION_ATSERVERNOCONTEXT_SYMBOL(self):
            return self.getToken(BSLParser.ANNOTATION_ATSERVERNOCONTEXT_SYMBOL, 0)

        def ANNOTATION_ATCLIENTATSERVERNOCONTEXT_SYMBOL(self):
            return self.getToken(BSLParser.ANNOTATION_ATCLIENTATSERVERNOCONTEXT_SYMBOL, 0)

        def ANNOTATION_ATCLIENTATSERVER_SYMBOL(self):
            return self.getToken(BSLParser.ANNOTATION_ATCLIENTATSERVER_SYMBOL, 0)

        def ANNOTATION_ATCLIENT_SYMBOL(self):
            return self.getToken(BSLParser.ANNOTATION_ATCLIENT_SYMBOL, 0)

        def ANNOTATION_ATSERVER_SYMBOL(self):
            return self.getToken(BSLParser.ANNOTATION_ATSERVER_SYMBOL, 0)

        def getRuleIndex(self):
            return BSLParser.RULE_compilerDirectiveSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilerDirectiveSymbol" ):
                listener.enterCompilerDirectiveSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilerDirectiveSymbol" ):
                listener.exitCompilerDirectiveSymbol(self)




    def compilerDirectiveSymbol(self):

        localctx = BSLParser.CompilerDirectiveSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_compilerDirectiveSymbol)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 364
            _la = self._input.LA(1)
            if not(((((_la - 113)) & ~0x3f) == 0 and ((1 << (_la - 113)) & 31) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompilerDirectiveContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AMPERSAND(self):
            return self.getToken(BSLParser.AMPERSAND, 0)

        def compilerDirectiveSymbol(self):
            return self.getTypedRuleContext(BSLParser.CompilerDirectiveSymbolContext,0)


        def getRuleIndex(self):
            return BSLParser.RULE_compilerDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilerDirective" ):
                listener.enterCompilerDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilerDirective" ):
                listener.exitCompilerDirective(self)




    def compilerDirective(self):

        localctx = BSLParser.CompilerDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_compilerDirective)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 366
            self.match(BSLParser.AMPERSAND)
            self.state = 367
            self.compilerDirectiveSymbol()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationNameContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANNOTATION_CUSTOM_SYMBOL(self):
            return self.getToken(BSLParser.ANNOTATION_CUSTOM_SYMBOL, 0)

        def ANNOTATION_BEFORE_SYMBOL(self):
            return self.getToken(BSLParser.ANNOTATION_BEFORE_SYMBOL, 0)

        def ANNOTATION_AFTER_SYMBOL(self):
            return self.getToken(BSLParser.ANNOTATION_AFTER_SYMBOL, 0)

        def ANNOTATION_AROUND_SYMBOL(self):
            return self.getToken(BSLParser.ANNOTATION_AROUND_SYMBOL, 0)

        def ANNOTATION_CHANGEANDVALIDATE_SYMBOL(self):
            return self.getToken(BSLParser.ANNOTATION_CHANGEANDVALIDATE_SYMBOL, 0)

        def getRuleIndex(self):
            return BSLParser.RULE_annotationName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationName" ):
                listener.enterAnnotationName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationName" ):
                listener.exitAnnotationName(self)




    def annotationName(self):

        localctx = BSLParser.AnnotationNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_annotationName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 369
            _la = self._input.LA(1)
            if not(((((_la - 118)) & ~0x3f) == 0 and ((1 << (_la - 118)) & 31) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationParamNameContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(BSLParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return BSLParser.RULE_annotationParamName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationParamName" ):
                listener.enterAnnotationParamName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationParamName" ):
                listener.exitAnnotationParamName(self)




    def annotationParamName(self):

        localctx = BSLParser.AnnotationParamNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_annotationParamName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 371
            self.match(BSLParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AMPERSAND(self):
            return self.getToken(BSLParser.AMPERSAND, 0)

        def annotationName(self):
            return self.getTypedRuleContext(BSLParser.AnnotationNameContext,0)


        def annotationParams(self):
            return self.getTypedRuleContext(BSLParser.AnnotationParamsContext,0)


        def getRuleIndex(self):
            return BSLParser.RULE_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation" ):
                listener.enterAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation" ):
                listener.exitAnnotation(self)




    def annotation(self):

        localctx = BSLParser.AnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_annotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 373
            self.match(BSLParser.AMPERSAND)
            self.state = 374
            self.annotationName()
            self.state = 376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6:
                self.state = 375
                self.annotationParams()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationParamsContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(BSLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(BSLParser.RPAREN, 0)

        def annotationParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BSLParser.AnnotationParamContext)
            else:
                return self.getTypedRuleContext(BSLParser.AnnotationParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BSLParser.COMMA)
            else:
                return self.getToken(BSLParser.COMMA, i)

        def getRuleIndex(self):
            return BSLParser.RULE_annotationParams

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationParams" ):
                listener.enterAnnotationParams(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationParams" ):
                listener.exitAnnotationParams(self)




    def annotationParams(self):

        localctx = BSLParser.AnnotationParamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_annotationParams)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 378
            self.match(BSLParser.LPAREN)
            self.state = 387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 548682084352) != 0) or _la==76:
                self.state = 379
                self.annotationParam()
                self.state = 384
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==10:
                    self.state = 380
                    self.match(BSLParser.COMMA)
                    self.state = 381
                    self.annotationParam()
                    self.state = 386
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 389
            self.match(BSLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationParamContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotationParamName(self):
            return self.getTypedRuleContext(BSLParser.AnnotationParamNameContext,0)


        def ASSIGN(self):
            return self.getToken(BSLParser.ASSIGN, 0)

        def constValue(self):
            return self.getTypedRuleContext(BSLParser.ConstValueContext,0)


        def getRuleIndex(self):
            return BSLParser.RULE_annotationParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationParam" ):
                listener.enterAnnotationParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationParam" ):
                listener.exitAnnotationParam(self)




    def annotationParam(self):

        localctx = BSLParser.AnnotationParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_annotationParam)
        self._la = 0 # Token type
        try:
            self.state = 397
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [76]:
                self.enterOuterAlt(localctx, 1)
                self.state = 391
                self.annotationParamName()
                self.state = 394
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 392
                    self.match(BSLParser.ASSIGN)
                    self.state = 393
                    self.constValue()


                pass
            elif token in [12, 13, 30, 31, 32, 33, 34, 35, 36, 37, 38]:
                self.enterOuterAlt(localctx, 2)
                self.state = 396
                self.constValue()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_nameContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(BSLParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return BSLParser.RULE_var_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_name" ):
                listener.enterVar_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_name" ):
                listener.exitVar_name(self)




    def var_name(self):

        localctx = BSLParser.Var_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_var_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 399
            self.match(BSLParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleVarsContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def moduleVar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BSLParser.ModuleVarContext)
            else:
                return self.getTypedRuleContext(BSLParser.ModuleVarContext,i)


        def getRuleIndex(self):
            return BSLParser.RULE_moduleVars

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleVars" ):
                listener.enterModuleVars(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleVars" ):
                listener.exitModuleVars(self)




    def moduleVars(self):

        localctx = BSLParser.ModuleVarsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_moduleVars)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 402 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 401
                    self.moduleVar()

                else:
                    raise NoViableAltException(self)
                self.state = 404 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleVarContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR_KEYWORD(self):
            return self.getToken(BSLParser.VAR_KEYWORD, 0)

        def moduleVarsList(self):
            return self.getTypedRuleContext(BSLParser.ModuleVarsListContext,0)


        def preprocessor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BSLParser.PreprocessorContext)
            else:
                return self.getTypedRuleContext(BSLParser.PreprocessorContext,i)


        def compilerDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BSLParser.CompilerDirectiveContext)
            else:
                return self.getTypedRuleContext(BSLParser.CompilerDirectiveContext,i)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BSLParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(BSLParser.AnnotationContext,i)


        def SEMICOLON(self):
            return self.getToken(BSLParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return BSLParser.RULE_moduleVar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleVar" ):
                listener.enterModuleVar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleVar" ):
                listener.exitModuleVar(self)




    def moduleVar(self):

        localctx = BSLParser.ModuleVarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_moduleVar)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==23 or _la==27:
                self.state = 409
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
                if la_ == 1:
                    self.state = 406
                    self.preprocessor()
                    pass

                elif la_ == 2:
                    self.state = 407
                    self.compilerDirective()
                    pass

                elif la_ == 3:
                    self.state = 408
                    self.annotation()
                    pass


                self.state = 413
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 414
            self.match(BSLParser.VAR_KEYWORD)
            self.state = 415
            self.moduleVarsList()
            self.state = 417
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 416
                self.match(BSLParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleVarsListContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def moduleVarDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BSLParser.ModuleVarDeclarationContext)
            else:
                return self.getTypedRuleContext(BSLParser.ModuleVarDeclarationContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BSLParser.COMMA)
            else:
                return self.getToken(BSLParser.COMMA, i)

        def getRuleIndex(self):
            return BSLParser.RULE_moduleVarsList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleVarsList" ):
                listener.enterModuleVarsList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleVarsList" ):
                listener.exitModuleVarsList(self)




    def moduleVarsList(self):

        localctx = BSLParser.ModuleVarsListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_moduleVarsList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 419
            self.moduleVarDeclaration()
            self.state = 424
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==10:
                self.state = 420
                self.match(BSLParser.COMMA)
                self.state = 421
                self.moduleVarDeclaration()
                self.state = 426
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleVarDeclarationContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def var_name(self):
            return self.getTypedRuleContext(BSLParser.Var_nameContext,0)


        def EXPORT_KEYWORD(self):
            return self.getToken(BSLParser.EXPORT_KEYWORD, 0)

        def getRuleIndex(self):
            return BSLParser.RULE_moduleVarDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleVarDeclaration" ):
                listener.enterModuleVarDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleVarDeclaration" ):
                listener.exitModuleVarDeclaration(self)




    def moduleVarDeclaration(self):

        localctx = BSLParser.ModuleVarDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_moduleVarDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 427
            self.var_name()
            self.state = 429
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 428
                self.match(BSLParser.EXPORT_KEYWORD)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubVarsContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subVar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BSLParser.SubVarContext)
            else:
                return self.getTypedRuleContext(BSLParser.SubVarContext,i)


        def getRuleIndex(self):
            return BSLParser.RULE_subVars

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubVars" ):
                listener.enterSubVars(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubVars" ):
                listener.exitSubVars(self)




    def subVars(self):

        localctx = BSLParser.SubVarsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_subVars)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 432 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 431
                    self.subVar()

                else:
                    raise NoViableAltException(self)
                self.state = 434 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubVarContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR_KEYWORD(self):
            return self.getToken(BSLParser.VAR_KEYWORD, 0)

        def subVarsList(self):
            return self.getTypedRuleContext(BSLParser.SubVarsListContext,0)


        def preprocessor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BSLParser.PreprocessorContext)
            else:
                return self.getTypedRuleContext(BSLParser.PreprocessorContext,i)


        def compilerDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BSLParser.CompilerDirectiveContext)
            else:
                return self.getTypedRuleContext(BSLParser.CompilerDirectiveContext,i)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BSLParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(BSLParser.AnnotationContext,i)


        def SEMICOLON(self):
            return self.getToken(BSLParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return BSLParser.RULE_subVar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubVar" ):
                listener.enterSubVar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubVar" ):
                listener.exitSubVar(self)




    def subVar(self):

        localctx = BSLParser.SubVarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_subVar)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 441
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==23 or _la==27:
                self.state = 439
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
                if la_ == 1:
                    self.state = 436
                    self.preprocessor()
                    pass

                elif la_ == 2:
                    self.state = 437
                    self.compilerDirective()
                    pass

                elif la_ == 3:
                    self.state = 438
                    self.annotation()
                    pass


                self.state = 443
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 444
            self.match(BSLParser.VAR_KEYWORD)
            self.state = 445
            self.subVarsList()
            self.state = 447
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.state = 446
                self.match(BSLParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubVarsListContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subVarDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BSLParser.SubVarDeclarationContext)
            else:
                return self.getTypedRuleContext(BSLParser.SubVarDeclarationContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BSLParser.COMMA)
            else:
                return self.getToken(BSLParser.COMMA, i)

        def getRuleIndex(self):
            return BSLParser.RULE_subVarsList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubVarsList" ):
                listener.enterSubVarsList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubVarsList" ):
                listener.exitSubVarsList(self)




    def subVarsList(self):

        localctx = BSLParser.SubVarsListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_subVarsList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 449
            self.subVarDeclaration()
            self.state = 454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==10:
                self.state = 450
                self.match(BSLParser.COMMA)
                self.state = 451
                self.subVarDeclaration()
                self.state = 456
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubVarDeclarationContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def var_name(self):
            return self.getTypedRuleContext(BSLParser.Var_nameContext,0)


        def getRuleIndex(self):
            return BSLParser.RULE_subVarDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubVarDeclaration" ):
                listener.enterSubVarDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubVarDeclaration" ):
                listener.exitSubVarDeclaration(self)




    def subVarDeclaration(self):

        localctx = BSLParser.SubVarDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_subVarDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 457
            self.var_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubNameContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(BSLParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return BSLParser.RULE_subName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubName" ):
                listener.enterSubName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubName" ):
                listener.exitSubName(self)




    def subName(self):

        localctx = BSLParser.SubNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_subName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 459
            self.match(BSLParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubsContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sub(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BSLParser.SubContext)
            else:
                return self.getTypedRuleContext(BSLParser.SubContext,i)


        def getRuleIndex(self):
            return BSLParser.RULE_subs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubs" ):
                listener.enterSubs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubs" ):
                listener.exitSubs(self)




    def subs(self):

        localctx = BSLParser.SubsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_subs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 462 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 461
                    self.sub()

                else:
                    raise NoViableAltException(self)
                self.state = 464 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def procedure(self):
            return self.getTypedRuleContext(BSLParser.ProcedureContext,0)


        def function(self):
            return self.getTypedRuleContext(BSLParser.FunctionContext,0)


        def getRuleIndex(self):
            return BSLParser.RULE_sub

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSub" ):
                listener.enterSub(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSub" ):
                listener.exitSub(self)




    def sub(self):

        localctx = BSLParser.SubContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_sub)
        try:
            self.state = 468
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 466
                self.procedure()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 467
                self.function()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def procDeclaration(self):
            return self.getTypedRuleContext(BSLParser.ProcDeclarationContext,0)


        def subCodeBlock(self):
            return self.getTypedRuleContext(BSLParser.SubCodeBlockContext,0)


        def ENDPROCEDURE_KEYWORD(self):
            return self.getToken(BSLParser.ENDPROCEDURE_KEYWORD, 0)

        def getRuleIndex(self):
            return BSLParser.RULE_procedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure" ):
                listener.enterProcedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure" ):
                listener.exitProcedure(self)




    def procedure(self):

        localctx = BSLParser.ProcedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_procedure)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 470
            self.procDeclaration()
            self.state = 471
            self.subCodeBlock()
            self.state = 472
            self.match(BSLParser.ENDPROCEDURE_KEYWORD)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def funcDeclaration(self):
            return self.getTypedRuleContext(BSLParser.FuncDeclarationContext,0)


        def subCodeBlock(self):
            return self.getTypedRuleContext(BSLParser.SubCodeBlockContext,0)


        def ENDFUNCTION_KEYWORD(self):
            return self.getToken(BSLParser.ENDFUNCTION_KEYWORD, 0)

        def getRuleIndex(self):
            return BSLParser.RULE_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction" ):
                listener.enterFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction" ):
                listener.exitFunction(self)




    def function(self):

        localctx = BSLParser.FunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_function)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 474
            self.funcDeclaration()
            self.state = 475
            self.subCodeBlock()
            self.state = 476
            self.match(BSLParser.ENDFUNCTION_KEYWORD)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcDeclarationContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURE_KEYWORD(self):
            return self.getToken(BSLParser.PROCEDURE_KEYWORD, 0)

        def subName(self):
            return self.getTypedRuleContext(BSLParser.SubNameContext,0)


        def LPAREN(self):
            return self.getToken(BSLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(BSLParser.RPAREN, 0)

        def preprocessor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BSLParser.PreprocessorContext)
            else:
                return self.getTypedRuleContext(BSLParser.PreprocessorContext,i)


        def compilerDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BSLParser.CompilerDirectiveContext)
            else:
                return self.getTypedRuleContext(BSLParser.CompilerDirectiveContext,i)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BSLParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(BSLParser.AnnotationContext,i)


        def ASYNC_KEYWORD(self):
            return self.getToken(BSLParser.ASYNC_KEYWORD, 0)

        def paramList(self):
            return self.getTypedRuleContext(BSLParser.ParamListContext,0)


        def EXPORT_KEYWORD(self):
            return self.getToken(BSLParser.EXPORT_KEYWORD, 0)

        def getRuleIndex(self):
            return BSLParser.RULE_procDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcDeclaration" ):
                listener.enterProcDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcDeclaration" ):
                listener.exitProcDeclaration(self)




    def procDeclaration(self):

        localctx = BSLParser.ProcDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_procDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 483
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==23 or _la==27:
                self.state = 481
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
                if la_ == 1:
                    self.state = 478
                    self.preprocessor()
                    pass

                elif la_ == 2:
                    self.state = 479
                    self.compilerDirective()
                    pass

                elif la_ == 3:
                    self.state = 480
                    self.annotation()
                    pass


                self.state = 485
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 487
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75:
                self.state = 486
                self.match(BSLParser.ASYNC_KEYWORD)


            self.state = 489
            self.match(BSLParser.PROCEDURE_KEYWORD)
            self.state = 490
            self.subName()
            self.state = 491
            self.match(BSLParser.LPAREN)
            self.state = 493
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 23)) & ~0x3f) == 0 and ((1 << (_la - 23)) & 9007199263129601) != 0):
                self.state = 492
                self.paramList()


            self.state = 495
            self.match(BSLParser.RPAREN)
            self.state = 497
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 496
                self.match(BSLParser.EXPORT_KEYWORD)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncDeclarationContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION_KEYWORD(self):
            return self.getToken(BSLParser.FUNCTION_KEYWORD, 0)

        def subName(self):
            return self.getTypedRuleContext(BSLParser.SubNameContext,0)


        def LPAREN(self):
            return self.getToken(BSLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(BSLParser.RPAREN, 0)

        def preprocessor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BSLParser.PreprocessorContext)
            else:
                return self.getTypedRuleContext(BSLParser.PreprocessorContext,i)


        def compilerDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BSLParser.CompilerDirectiveContext)
            else:
                return self.getTypedRuleContext(BSLParser.CompilerDirectiveContext,i)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BSLParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(BSLParser.AnnotationContext,i)


        def ASYNC_KEYWORD(self):
            return self.getToken(BSLParser.ASYNC_KEYWORD, 0)

        def paramList(self):
            return self.getTypedRuleContext(BSLParser.ParamListContext,0)


        def EXPORT_KEYWORD(self):
            return self.getToken(BSLParser.EXPORT_KEYWORD, 0)

        def getRuleIndex(self):
            return BSLParser.RULE_funcDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncDeclaration" ):
                listener.enterFuncDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncDeclaration" ):
                listener.exitFuncDeclaration(self)




    def funcDeclaration(self):

        localctx = BSLParser.FuncDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_funcDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 504
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==23 or _la==27:
                self.state = 502
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
                if la_ == 1:
                    self.state = 499
                    self.preprocessor()
                    pass

                elif la_ == 2:
                    self.state = 500
                    self.compilerDirective()
                    pass

                elif la_ == 3:
                    self.state = 501
                    self.annotation()
                    pass


                self.state = 506
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 508
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75:
                self.state = 507
                self.match(BSLParser.ASYNC_KEYWORD)


            self.state = 510
            self.match(BSLParser.FUNCTION_KEYWORD)
            self.state = 511
            self.subName()
            self.state = 512
            self.match(BSLParser.LPAREN)
            self.state = 514
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 23)) & ~0x3f) == 0 and ((1 << (_la - 23)) & 9007199263129601) != 0):
                self.state = 513
                self.paramList()


            self.state = 516
            self.match(BSLParser.RPAREN)
            self.state = 518
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 517
                self.match(BSLParser.EXPORT_KEYWORD)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubCodeBlockContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def codeBlock(self):
            return self.getTypedRuleContext(BSLParser.CodeBlockContext,0)


        def subVars(self):
            return self.getTypedRuleContext(BSLParser.SubVarsContext,0)


        def getRuleIndex(self):
            return BSLParser.RULE_subCodeBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubCodeBlock" ):
                listener.enterSubCodeBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubCodeBlock" ):
                listener.exitSubCodeBlock(self)




    def subCodeBlock(self):

        localctx = BSLParser.SubCodeBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_subCodeBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 521
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 520
                self.subVars()


            self.state = 523
            self.codeBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinueStatementContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE_KEYWORD(self):
            return self.getToken(BSLParser.CONTINUE_KEYWORD, 0)

        def getRuleIndex(self):
            return BSLParser.RULE_continueStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStatement" ):
                listener.enterContinueStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStatement" ):
                listener.exitContinueStatement(self)




    def continueStatement(self):

        localctx = BSLParser.ContinueStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_continueStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 525
            self.match(BSLParser.CONTINUE_KEYWORD)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakStatementContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK_KEYWORD(self):
            return self.getToken(BSLParser.BREAK_KEYWORD, 0)

        def getRuleIndex(self):
            return BSLParser.RULE_breakStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStatement" ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStatement" ):
                listener.exitBreakStatement(self)




    def breakStatement(self):

        localctx = BSLParser.BreakStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_breakStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 527
            self.match(BSLParser.BREAK_KEYWORD)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RaiseStatementContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE_KEYWORD(self):
            return self.getToken(BSLParser.RAISE_KEYWORD, 0)

        def doCall(self):
            return self.getTypedRuleContext(BSLParser.DoCallContext,0)


        def expression(self):
            return self.getTypedRuleContext(BSLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return BSLParser.RULE_raiseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaiseStatement" ):
                listener.enterRaiseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaiseStatement" ):
                listener.exitRaiseStatement(self)




    def raiseStatement(self):

        localctx = BSLParser.RaiseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_raiseStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 529
            self.match(BSLParser.RAISE_KEYWORD)
            self.state = 532
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.state = 530
                self.doCall()

            elif la_ == 2:
                self.state = 531
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifBranch(self):
            return self.getTypedRuleContext(BSLParser.IfBranchContext,0)


        def ENDIF_KEYWORD(self):
            return self.getToken(BSLParser.ENDIF_KEYWORD, 0)

        def elsifBranch(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BSLParser.ElsifBranchContext)
            else:
                return self.getTypedRuleContext(BSLParser.ElsifBranchContext,i)


        def elseBranch(self):
            return self.getTypedRuleContext(BSLParser.ElseBranchContext,0)


        def getRuleIndex(self):
            return BSLParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)




    def ifStatement(self):

        localctx = BSLParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_ifStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 534
            self.ifBranch()
            self.state = 538
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==50:
                self.state = 535
                self.elsifBranch()
                self.state = 540
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 542
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51:
                self.state = 541
                self.elseBranch()


            self.state = 544
            self.match(BSLParser.ENDIF_KEYWORD)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfBranchContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF_KEYWORD(self):
            return self.getToken(BSLParser.IF_KEYWORD, 0)

        def expression(self):
            return self.getTypedRuleContext(BSLParser.ExpressionContext,0)


        def THEN_KEYWORD(self):
            return self.getToken(BSLParser.THEN_KEYWORD, 0)

        def codeBlock(self):
            return self.getTypedRuleContext(BSLParser.CodeBlockContext,0)


        def getRuleIndex(self):
            return BSLParser.RULE_ifBranch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfBranch" ):
                listener.enterIfBranch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfBranch" ):
                listener.exitIfBranch(self)




    def ifBranch(self):

        localctx = BSLParser.IfBranchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_ifBranch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 546
            self.match(BSLParser.IF_KEYWORD)
            self.state = 547
            self.expression()
            self.state = 548
            self.match(BSLParser.THEN_KEYWORD)
            self.state = 549
            self.codeBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElsifBranchContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSIF_KEYWORD(self):
            return self.getToken(BSLParser.ELSIF_KEYWORD, 0)

        def expression(self):
            return self.getTypedRuleContext(BSLParser.ExpressionContext,0)


        def THEN_KEYWORD(self):
            return self.getToken(BSLParser.THEN_KEYWORD, 0)

        def codeBlock(self):
            return self.getTypedRuleContext(BSLParser.CodeBlockContext,0)


        def getRuleIndex(self):
            return BSLParser.RULE_elsifBranch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElsifBranch" ):
                listener.enterElsifBranch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElsifBranch" ):
                listener.exitElsifBranch(self)




    def elsifBranch(self):

        localctx = BSLParser.ElsifBranchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_elsifBranch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 551
            self.match(BSLParser.ELSIF_KEYWORD)
            self.state = 552
            self.expression()
            self.state = 553
            self.match(BSLParser.THEN_KEYWORD)
            self.state = 554
            self.codeBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseBranchContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE_KEYWORD(self):
            return self.getToken(BSLParser.ELSE_KEYWORD, 0)

        def codeBlock(self):
            return self.getTypedRuleContext(BSLParser.CodeBlockContext,0)


        def getRuleIndex(self):
            return BSLParser.RULE_elseBranch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseBranch" ):
                listener.enterElseBranch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseBranch" ):
                listener.exitElseBranch(self)




    def elseBranch(self):

        localctx = BSLParser.ElseBranchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_elseBranch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 556
            self.match(BSLParser.ELSE_KEYWORD)
            self.state = 557
            self.codeBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE_KEYWORD(self):
            return self.getToken(BSLParser.WHILE_KEYWORD, 0)

        def expression(self):
            return self.getTypedRuleContext(BSLParser.ExpressionContext,0)


        def DO_KEYWORD(self):
            return self.getToken(BSLParser.DO_KEYWORD, 0)

        def codeBlock(self):
            return self.getTypedRuleContext(BSLParser.CodeBlockContext,0)


        def ENDDO_KEYWORD(self):
            return self.getToken(BSLParser.ENDDO_KEYWORD, 0)

        def getRuleIndex(self):
            return BSLParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)




    def whileStatement(self):

        localctx = BSLParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_whileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 559
            self.match(BSLParser.WHILE_KEYWORD)
            self.state = 560
            self.expression()
            self.state = 561
            self.match(BSLParser.DO_KEYWORD)
            self.state = 562
            self.codeBlock()
            self.state = 563
            self.match(BSLParser.ENDDO_KEYWORD)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStatementContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR_KEYWORD(self):
            return self.getToken(BSLParser.FOR_KEYWORD, 0)

        def IDENTIFIER(self):
            return self.getToken(BSLParser.IDENTIFIER, 0)

        def ASSIGN(self):
            return self.getToken(BSLParser.ASSIGN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BSLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(BSLParser.ExpressionContext,i)


        def TO_KEYWORD(self):
            return self.getToken(BSLParser.TO_KEYWORD, 0)

        def DO_KEYWORD(self):
            return self.getToken(BSLParser.DO_KEYWORD, 0)

        def codeBlock(self):
            return self.getTypedRuleContext(BSLParser.CodeBlockContext,0)


        def ENDDO_KEYWORD(self):
            return self.getToken(BSLParser.ENDDO_KEYWORD, 0)

        def getRuleIndex(self):
            return BSLParser.RULE_forStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)




    def forStatement(self):

        localctx = BSLParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_forStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 565
            self.match(BSLParser.FOR_KEYWORD)
            self.state = 566
            self.match(BSLParser.IDENTIFIER)
            self.state = 567
            self.match(BSLParser.ASSIGN)
            self.state = 568
            self.expression()
            self.state = 569
            self.match(BSLParser.TO_KEYWORD)
            self.state = 570
            self.expression()
            self.state = 571
            self.match(BSLParser.DO_KEYWORD)
            self.state = 572
            self.codeBlock()
            self.state = 573
            self.match(BSLParser.ENDDO_KEYWORD)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForEachStatementContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR_KEYWORD(self):
            return self.getToken(BSLParser.FOR_KEYWORD, 0)

        def EACH_KEYWORD(self):
            return self.getToken(BSLParser.EACH_KEYWORD, 0)

        def IDENTIFIER(self):
            return self.getToken(BSLParser.IDENTIFIER, 0)

        def IN_KEYWORD(self):
            return self.getToken(BSLParser.IN_KEYWORD, 0)

        def expression(self):
            return self.getTypedRuleContext(BSLParser.ExpressionContext,0)


        def DO_KEYWORD(self):
            return self.getToken(BSLParser.DO_KEYWORD, 0)

        def codeBlock(self):
            return self.getTypedRuleContext(BSLParser.CodeBlockContext,0)


        def ENDDO_KEYWORD(self):
            return self.getToken(BSLParser.ENDDO_KEYWORD, 0)

        def getRuleIndex(self):
            return BSLParser.RULE_forEachStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForEachStatement" ):
                listener.enterForEachStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForEachStatement" ):
                listener.exitForEachStatement(self)




    def forEachStatement(self):

        localctx = BSLParser.ForEachStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_forEachStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 575
            self.match(BSLParser.FOR_KEYWORD)
            self.state = 576
            self.match(BSLParser.EACH_KEYWORD)
            self.state = 577
            self.match(BSLParser.IDENTIFIER)
            self.state = 578
            self.match(BSLParser.IN_KEYWORD)
            self.state = 579
            self.expression()
            self.state = 580
            self.match(BSLParser.DO_KEYWORD)
            self.state = 581
            self.codeBlock()
            self.state = 582
            self.match(BSLParser.ENDDO_KEYWORD)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryStatementContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY_KEYWORD(self):
            return self.getToken(BSLParser.TRY_KEYWORD, 0)

        def tryCodeBlock(self):
            return self.getTypedRuleContext(BSLParser.TryCodeBlockContext,0)


        def EXCEPT_KEYWORD(self):
            return self.getToken(BSLParser.EXCEPT_KEYWORD, 0)

        def exceptCodeBlock(self):
            return self.getTypedRuleContext(BSLParser.ExceptCodeBlockContext,0)


        def ENDTRY_KEYWORD(self):
            return self.getToken(BSLParser.ENDTRY_KEYWORD, 0)

        def getRuleIndex(self):
            return BSLParser.RULE_tryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryStatement" ):
                listener.enterTryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryStatement" ):
                listener.exitTryStatement(self)




    def tryStatement(self):

        localctx = BSLParser.TryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_tryStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 584
            self.match(BSLParser.TRY_KEYWORD)
            self.state = 585
            self.tryCodeBlock()
            self.state = 586
            self.match(BSLParser.EXCEPT_KEYWORD)
            self.state = 587
            self.exceptCodeBlock()
            self.state = 588
            self.match(BSLParser.ENDTRY_KEYWORD)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN_KEYWORD(self):
            return self.getToken(BSLParser.RETURN_KEYWORD, 0)

        def expression(self):
            return self.getTypedRuleContext(BSLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return BSLParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)




    def returnStatement(self):

        localctx = BSLParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_returnStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 590
            self.match(BSLParser.RETURN_KEYWORD)
            self.state = 592
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.state = 591
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecuteStatementContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE_KEYWORD(self):
            return self.getToken(BSLParser.EXECUTE_KEYWORD, 0)

        def doCall(self):
            return self.getTypedRuleContext(BSLParser.DoCallContext,0)


        def callParamList(self):
            return self.getTypedRuleContext(BSLParser.CallParamListContext,0)


        def getRuleIndex(self):
            return BSLParser.RULE_executeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecuteStatement" ):
                listener.enterExecuteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecuteStatement" ):
                listener.exitExecuteStatement(self)




    def executeStatement(self):

        localctx = BSLParser.ExecuteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_executeStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 594
            self.match(BSLParser.EXECUTE_KEYWORD)
            self.state = 597
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.state = 595
                self.doCall()
                pass

            elif la_ == 2:
                self.state = 596
                self.callParamList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallStatementContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def accessCall(self):
            return self.getTypedRuleContext(BSLParser.AccessCallContext,0)


        def IDENTIFIER(self):
            return self.getToken(BSLParser.IDENTIFIER, 0)

        def globalMethodCall(self):
            return self.getTypedRuleContext(BSLParser.GlobalMethodCallContext,0)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BSLParser.ModifierContext)
            else:
                return self.getTypedRuleContext(BSLParser.ModifierContext,i)


        def getRuleIndex(self):
            return BSLParser.RULE_callStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallStatement" ):
                listener.enterCallStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallStatement" ):
                listener.exitCallStatement(self)




    def callStatement(self):

        localctx = BSLParser.CallStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_callStatement)
        try:
            self.state = 611
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 601
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
                if la_ == 1:
                    self.state = 599
                    self.match(BSLParser.IDENTIFIER)
                    pass

                elif la_ == 2:
                    self.state = 600
                    self.globalMethodCall()
                    pass


                self.state = 606
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,55,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 603
                        self.modifier() 
                    self.state = 608
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,55,self._ctx)

                self.state = 609
                self.accessCall()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 610
                self.globalMethodCall()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WaitStatementContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def waitExpression(self):
            return self.getTypedRuleContext(BSLParser.WaitExpressionContext,0)


        def getRuleIndex(self):
            return BSLParser.RULE_waitStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWaitStatement" ):
                listener.enterWaitStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWaitStatement" ):
                listener.exitWaitStatement(self)




    def waitStatement(self):

        localctx = BSLParser.WaitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_waitStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 613
            self.waitExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelNameContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(BSLParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return BSLParser.RULE_labelName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelName" ):
                listener.enterLabelName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelName" ):
                listener.exitLabelName(self)




    def labelName(self):

        localctx = BSLParser.LabelNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_labelName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 615
            self.match(BSLParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TILDA(self):
            return self.getToken(BSLParser.TILDA, 0)

        def labelName(self):
            return self.getTypedRuleContext(BSLParser.LabelNameContext,0)


        def COLON(self):
            return self.getToken(BSLParser.COLON, 0)

        def getRuleIndex(self):
            return BSLParser.RULE_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel" ):
                listener.enterLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel" ):
                listener.exitLabel(self)




    def label(self):

        localctx = BSLParser.LabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_label)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 617
            self.match(BSLParser.TILDA)
            self.state = 618
            self.labelName()
            self.state = 619
            self.match(BSLParser.COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GotoStatementContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GOTO_KEYWORD(self):
            return self.getToken(BSLParser.GOTO_KEYWORD, 0)

        def TILDA(self):
            return self.getToken(BSLParser.TILDA, 0)

        def labelName(self):
            return self.getTypedRuleContext(BSLParser.LabelNameContext,0)


        def getRuleIndex(self):
            return BSLParser.RULE_gotoStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGotoStatement" ):
                listener.enterGotoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGotoStatement" ):
                listener.exitGotoStatement(self)




    def gotoStatement(self):

        localctx = BSLParser.GotoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_gotoStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 621
            self.match(BSLParser.GOTO_KEYWORD)
            self.state = 622
            self.match(BSLParser.TILDA)
            self.state = 623
            self.labelName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryCodeBlockContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def codeBlock(self):
            return self.getTypedRuleContext(BSLParser.CodeBlockContext,0)


        def getRuleIndex(self):
            return BSLParser.RULE_tryCodeBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryCodeBlock" ):
                listener.enterTryCodeBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryCodeBlock" ):
                listener.exitTryCodeBlock(self)




    def tryCodeBlock(self):

        localctx = BSLParser.TryCodeBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_tryCodeBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 625
            self.codeBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExceptCodeBlockContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def codeBlock(self):
            return self.getTypedRuleContext(BSLParser.CodeBlockContext,0)


        def getRuleIndex(self):
            return BSLParser.RULE_exceptCodeBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptCodeBlock" ):
                listener.enterExceptCodeBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptCodeBlock" ):
                listener.exitExceptCodeBlock(self)




    def exceptCodeBlock(self):

        localctx = BSLParser.ExceptCodeBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_exceptCodeBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 627
            self.codeBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(BSLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return BSLParser.RULE_event

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent" ):
                listener.enterEvent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent" ):
                listener.exitEvent(self)




    def event(self):

        localctx = BSLParser.EventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_event)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 629
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(BSLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return BSLParser.RULE_handler

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandler" ):
                listener.enterHandler(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandler" ):
                listener.exitHandler(self)




    def handler(self):

        localctx = BSLParser.HandlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_handler)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 631
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddHandlerStatementContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADDHANDLER_KEYWORD(self):
            return self.getToken(BSLParser.ADDHANDLER_KEYWORD, 0)

        def event(self):
            return self.getTypedRuleContext(BSLParser.EventContext,0)


        def COMMA(self):
            return self.getToken(BSLParser.COMMA, 0)

        def handler(self):
            return self.getTypedRuleContext(BSLParser.HandlerContext,0)


        def getRuleIndex(self):
            return BSLParser.RULE_addHandlerStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddHandlerStatement" ):
                listener.enterAddHandlerStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddHandlerStatement" ):
                listener.exitAddHandlerStatement(self)




    def addHandlerStatement(self):

        localctx = BSLParser.AddHandlerStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_addHandlerStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 633
            self.match(BSLParser.ADDHANDLER_KEYWORD)
            self.state = 634
            self.event()
            self.state = 635
            self.match(BSLParser.COMMA)
            self.state = 636
            self.handler()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemoveHandlerStatementContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVEHANDLER_KEYWORD(self):
            return self.getToken(BSLParser.REMOVEHANDLER_KEYWORD, 0)

        def event(self):
            return self.getTypedRuleContext(BSLParser.EventContext,0)


        def COMMA(self):
            return self.getToken(BSLParser.COMMA, 0)

        def handler(self):
            return self.getTypedRuleContext(BSLParser.HandlerContext,0)


        def getRuleIndex(self):
            return BSLParser.RULE_removeHandlerStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemoveHandlerStatement" ):
                listener.enterRemoveHandlerStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemoveHandlerStatement" ):
                listener.exitRemoveHandlerStatement(self)




    def removeHandlerStatement(self):

        localctx = BSLParser.RemoveHandlerStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_removeHandlerStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 638
            self.match(BSLParser.REMOVEHANDLER_KEYWORD)
            self.state = 639
            self.event()
            self.state = 640
            self.match(BSLParser.COMMA)
            self.state = 641
            self.handler()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TernaryOperatorContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUESTION(self):
            return self.getToken(BSLParser.QUESTION, 0)

        def LPAREN(self):
            return self.getToken(BSLParser.LPAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BSLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(BSLParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BSLParser.COMMA)
            else:
                return self.getToken(BSLParser.COMMA, i)

        def RPAREN(self):
            return self.getToken(BSLParser.RPAREN, 0)

        def getRuleIndex(self):
            return BSLParser.RULE_ternaryOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTernaryOperator" ):
                listener.enterTernaryOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTernaryOperator" ):
                listener.exitTernaryOperator(self)




    def ternaryOperator(self):

        localctx = BSLParser.TernaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_ternaryOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 643
            self.match(BSLParser.QUESTION)
            self.state = 644
            self.match(BSLParser.LPAREN)
            self.state = 645
            self.expression()
            self.state = 646
            self.match(BSLParser.COMMA)
            self.state = 647
            self.expression()
            self.state = 648
            self.match(BSLParser.COMMA)
            self.state = 649
            self.expression()
            self.state = 650
            self.match(BSLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WaitExpressionContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AWAIT_KEYWORD(self):
            return self.getToken(BSLParser.AWAIT_KEYWORD, 0)

        def expression(self):
            return self.getTypedRuleContext(BSLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return BSLParser.RULE_waitExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWaitExpression" ):
                listener.enterWaitExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWaitExpression" ):
                listener.exitWaitExpression(self)




    def waitExpression(self):

        localctx = BSLParser.WaitExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_waitExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 652
            self.match(BSLParser.AWAIT_KEYWORD)
            self.state = 653
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileCodeBlockBeforeSubContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def codeBlock(self):
            return self.getTypedRuleContext(BSLParser.CodeBlockContext,0)


        def getRuleIndex(self):
            return BSLParser.RULE_fileCodeBlockBeforeSub

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileCodeBlockBeforeSub" ):
                listener.enterFileCodeBlockBeforeSub(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileCodeBlockBeforeSub" ):
                listener.exitFileCodeBlockBeforeSub(self)




    def fileCodeBlockBeforeSub(self):

        localctx = BSLParser.FileCodeBlockBeforeSubContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_fileCodeBlockBeforeSub)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 655
            self.codeBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileCodeBlockContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def codeBlock(self):
            return self.getTypedRuleContext(BSLParser.CodeBlockContext,0)


        def getRuleIndex(self):
            return BSLParser.RULE_fileCodeBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileCodeBlock" ):
                listener.enterFileCodeBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileCodeBlock" ):
                listener.exitFileCodeBlock(self)




    def fileCodeBlock(self):

        localctx = BSLParser.FileCodeBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_fileCodeBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 657
            self.codeBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CodeBlockContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BSLParser.StatementContext)
            else:
                return self.getTypedRuleContext(BSLParser.StatementContext,i)


        def preprocessor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BSLParser.PreprocessorContext)
            else:
                return self.getTypedRuleContext(BSLParser.PreprocessorContext,i)


        def getRuleIndex(self):
            return BSLParser.RULE_codeBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCodeBlock" ):
                listener.enterCodeBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCodeBlock" ):
                listener.exitCodeBlock(self)




    def codeBlock(self):

        localctx = BSLParser.CodeBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_codeBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 663
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,58,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 661
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
                    if la_ == 1:
                        self.state = 659
                        self.statement()
                        pass

                    elif la_ == 2:
                        self.state = 660
                        self.preprocessor()
                        pass

             
                self.state = 665
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,58,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumericContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT(self):
            return self.getToken(BSLParser.FLOAT, 0)

        def DECIMAL(self):
            return self.getToken(BSLParser.DECIMAL, 0)

        def getRuleIndex(self):
            return BSLParser.RULE_numeric

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeric" ):
                listener.enterNumeric(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeric" ):
                listener.exitNumeric(self)




    def numeric(self):

        localctx = BSLParser.NumericContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_numeric)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 666
            _la = self._input.LA(1)
            if not(_la==34 or _la==36):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamListContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BSLParser.ParamContext)
            else:
                return self.getTypedRuleContext(BSLParser.ParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BSLParser.COMMA)
            else:
                return self.getToken(BSLParser.COMMA, i)

        def getRuleIndex(self):
            return BSLParser.RULE_paramList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamList" ):
                listener.enterParamList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamList" ):
                listener.exitParamList(self)




    def paramList(self):

        localctx = BSLParser.ParamListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_paramList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 668
            self.param()
            self.state = 673
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==10:
                self.state = 669
                self.match(BSLParser.COMMA)
                self.state = 670
                self.param()
                self.state = 675
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(BSLParser.IDENTIFIER, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BSLParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(BSLParser.AnnotationContext,i)


        def VAL_KEYWORD(self):
            return self.getToken(BSLParser.VAL_KEYWORD, 0)

        def ASSIGN(self):
            return self.getToken(BSLParser.ASSIGN, 0)

        def defaultValue(self):
            return self.getTypedRuleContext(BSLParser.DefaultValueContext,0)


        def getRuleIndex(self):
            return BSLParser.RULE_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam" ):
                listener.enterParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam" ):
                listener.exitParam(self)




    def param(self):

        localctx = BSLParser.ParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_param)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 679
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==23:
                self.state = 676
                self.annotation()
                self.state = 681
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 683
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 682
                self.match(BSLParser.VAL_KEYWORD)


            self.state = 685
            self.match(BSLParser.IDENTIFIER)
            self.state = 688
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 686
                self.match(BSLParser.ASSIGN)
                self.state = 687
                self.defaultValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultValueContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constValue(self):
            return self.getTypedRuleContext(BSLParser.ConstValueContext,0)


        def getRuleIndex(self):
            return BSLParser.RULE_defaultValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultValue" ):
                listener.enterDefaultValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultValue" ):
                listener.exitDefaultValue(self)




    def defaultValue(self):

        localctx = BSLParser.DefaultValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_defaultValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 690
            self.constValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstValueContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric(self):
            return self.getTypedRuleContext(BSLParser.NumericContext,0)


        def MINUS(self):
            return self.getToken(BSLParser.MINUS, 0)

        def PLUS(self):
            return self.getToken(BSLParser.PLUS, 0)

        def string(self):
            return self.getTypedRuleContext(BSLParser.StringContext,0)


        def TRUE(self):
            return self.getToken(BSLParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(BSLParser.FALSE, 0)

        def UNDEFINED(self):
            return self.getToken(BSLParser.UNDEFINED, 0)

        def NULL(self):
            return self.getToken(BSLParser.NULL, 0)

        def DATETIME(self):
            return self.getToken(BSLParser.DATETIME, 0)

        def getRuleIndex(self):
            return BSLParser.RULE_constValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstValue" ):
                listener.enterConstValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstValue" ):
                listener.exitConstValue(self)




    def constValue(self):

        localctx = BSLParser.ConstValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_constValue)
        self._la = 0 # Token type
        try:
            self.state = 702
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [12, 13, 34, 36]:
                self.enterOuterAlt(localctx, 1)
                self.state = 693
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12 or _la==13:
                    self.state = 692
                    _la = self._input.LA(1)
                    if not(_la==12 or _la==13):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 695
                self.numeric()
                pass
            elif token in [37, 38]:
                self.enterOuterAlt(localctx, 2)
                self.state = 696
                self.string()
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 3)
                self.state = 697
                self.match(BSLParser.TRUE)
                pass
            elif token in [31]:
                self.enterOuterAlt(localctx, 4)
                self.state = 698
                self.match(BSLParser.FALSE)
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 5)
                self.state = 699
                self.match(BSLParser.UNDEFINED)
                pass
            elif token in [33]:
                self.enterOuterAlt(localctx, 6)
                self.state = 700
                self.match(BSLParser.NULL)
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 7)
                self.state = 701
                self.match(BSLParser.DATETIME)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultilineStringContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRINGSTART(self):
            return self.getToken(BSLParser.STRINGSTART, 0)

        def STRINGTAIL(self):
            return self.getToken(BSLParser.STRINGTAIL, 0)

        def STRINGPART(self, i:int=None):
            if i is None:
                return self.getTokens(BSLParser.STRINGPART)
            else:
                return self.getToken(BSLParser.STRINGPART, i)

        def BAR(self, i:int=None):
            if i is None:
                return self.getTokens(BSLParser.BAR)
            else:
                return self.getToken(BSLParser.BAR, i)

        def preprocessor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BSLParser.PreprocessorContext)
            else:
                return self.getTypedRuleContext(BSLParser.PreprocessorContext,i)


        def getRuleIndex(self):
            return BSLParser.RULE_multilineString

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultilineString" ):
                listener.enterMultilineString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultilineString" ):
                listener.exitMultilineString(self)




    def multilineString(self):

        localctx = BSLParser.MultilineStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_multilineString)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 704
            self.match(BSLParser.STRINGSTART)
            self.state = 710
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1099914280960) != 0):
                self.state = 708
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [40]:
                    self.state = 705
                    self.match(BSLParser.STRINGPART)
                    pass
                elif token in [28]:
                    self.state = 706
                    self.match(BSLParser.BAR)
                    pass
                elif token in [27]:
                    self.state = 707
                    self.preprocessor()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 712
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 713
            self.match(BSLParser.STRINGTAIL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(BSLParser.STRING)
            else:
                return self.getToken(BSLParser.STRING, i)

        def multilineString(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BSLParser.MultilineStringContext)
            else:
                return self.getTypedRuleContext(BSLParser.MultilineStringContext,i)


        def getRuleIndex(self):
            return BSLParser.RULE_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString" ):
                listener.enterString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString" ):
                listener.exitString(self)




    def string(self):

        localctx = BSLParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_string)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 717 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 717
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [37]:
                    self.state = 715
                    self.match(BSLParser.STRING)
                    pass
                elif token in [38]:
                    self.state = 716
                    self.multilineString()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 719 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==37 or _la==38):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(BSLParser.SEMICOLON, 0)

        def label(self):
            return self.getTypedRuleContext(BSLParser.LabelContext,0)


        def callStatement(self):
            return self.getTypedRuleContext(BSLParser.CallStatementContext,0)


        def waitStatement(self):
            return self.getTypedRuleContext(BSLParser.WaitStatementContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(BSLParser.CompoundStatementContext,0)


        def assignment(self):
            return self.getTypedRuleContext(BSLParser.AssignmentContext,0)


        def preprocessor(self):
            return self.getTypedRuleContext(BSLParser.PreprocessorContext,0)


        def getRuleIndex(self):
            return BSLParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = BSLParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_statement)
        try:
            self.state = 742
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [27, 29, 49, 53, 55, 59, 62, 63, 64, 70, 71, 72, 73, 74, 76, 126]:
                self.enterOuterAlt(localctx, 1)
                self.state = 736
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [29]:
                    self.state = 721
                    self.label()
                    self.state = 727
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
                    if la_ == 1:
                        self.state = 722
                        self.callStatement()

                    elif la_ == 2:
                        self.state = 723
                        self.waitStatement()

                    elif la_ == 3:
                        self.state = 724
                        self.compoundStatement()

                    elif la_ == 4:
                        self.state = 725
                        self.assignment()

                    elif la_ == 5:
                        self.state = 726
                        self.preprocessor()


                    pass
                elif token in [27, 49, 53, 55, 59, 62, 63, 64, 70, 71, 72, 73, 74, 76, 126]:
                    self.state = 734
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
                    if la_ == 1:
                        self.state = 729
                        self.callStatement()
                        pass

                    elif la_ == 2:
                        self.state = 730
                        self.waitStatement()
                        pass

                    elif la_ == 3:
                        self.state = 731
                        self.compoundStatement()
                        pass

                    elif la_ == 4:
                        self.state = 732
                        self.assignment()
                        pass

                    elif la_ == 5:
                        self.state = 733
                        self.preprocessor()
                        pass


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 739
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
                if la_ == 1:
                    self.state = 738
                    self.match(BSLParser.SEMICOLON)


                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 2)
                self.state = 741
                self.match(BSLParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lValue(self):
            return self.getTypedRuleContext(BSLParser.LValueContext,0)


        def ASSIGN(self):
            return self.getToken(BSLParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(BSLParser.ExpressionContext,0)


        def preprocessor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BSLParser.PreprocessorContext)
            else:
                return self.getTypedRuleContext(BSLParser.PreprocessorContext,i)


        def getRuleIndex(self):
            return BSLParser.RULE_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment" ):
                listener.enterAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment" ):
                listener.exitAssignment(self)




    def assignment(self):

        localctx = BSLParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_assignment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 744
            self.lValue()
            self.state = 748
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==27:
                self.state = 745
                self.preprocessor()
                self.state = 750
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 751
            self.match(BSLParser.ASSIGN)

            self.state = 755
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==27:
                self.state = 752
                self.preprocessor()
                self.state = 757
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 758
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallParamListContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def callParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BSLParser.CallParamContext)
            else:
                return self.getTypedRuleContext(BSLParser.CallParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(BSLParser.COMMA)
            else:
                return self.getToken(BSLParser.COMMA, i)

        def getRuleIndex(self):
            return BSLParser.RULE_callParamList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallParamList" ):
                listener.enterCallParamList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallParamList" ):
                listener.exitCallParamList(self)




    def callParamList(self):

        localctx = BSLParser.CallParamListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_callParamList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 760
            self.callParam()
            self.state = 765
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==10:
                self.state = 761
                self.match(BSLParser.COMMA)
                self.state = 762
                self.callParam()
                self.state = 767
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallParamContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(BSLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return BSLParser.RULE_callParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallParam" ):
                listener.enterCallParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallParam" ):
                listener.exitCallParam(self)




    def callParam(self):

        localctx = BSLParser.CallParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_callParam)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 769
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 768
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def member(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BSLParser.MemberContext)
            else:
                return self.getTypedRuleContext(BSLParser.MemberContext,i)


        def operation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BSLParser.OperationContext)
            else:
                return self.getTypedRuleContext(BSLParser.OperationContext,i)


        def preprocessor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BSLParser.PreprocessorContext)
            else:
                return self.getTypedRuleContext(BSLParser.PreprocessorContext,i)


        def getRuleIndex(self):
            return BSLParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = BSLParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 771
            self.member()
            self.state = 794
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,81,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 775
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==27:
                        self.state = 772
                        self.preprocessor()
                        self.state = 777
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 778
                    self.operation()
                    self.state = 782
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==27:
                        self.state = 779
                        self.preprocessor()
                        self.state = 784
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 785
                    self.member()
                    self.state = 789
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,80,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 786
                            self.preprocessor() 
                        self.state = 791
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,80,self._ctx)
             
                self.state = 796
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperationContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(BSLParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(BSLParser.MINUS, 0)

        def MUL(self):
            return self.getToken(BSLParser.MUL, 0)

        def QUOTIENT(self):
            return self.getToken(BSLParser.QUOTIENT, 0)

        def MODULO(self):
            return self.getToken(BSLParser.MODULO, 0)

        def boolOperation(self):
            return self.getTypedRuleContext(BSLParser.BoolOperationContext,0)


        def compareOperation(self):
            return self.getTypedRuleContext(BSLParser.CompareOperationContext,0)


        def getRuleIndex(self):
            return BSLParser.RULE_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperation" ):
                listener.enterOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperation" ):
                listener.exitOperation(self)




    def operation(self):

        localctx = BSLParser.OperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_operation)
        try:
            self.state = 804
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [12]:
                self.enterOuterAlt(localctx, 1)
                self.state = 797
                self.match(BSLParser.PLUS)
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 2)
                self.state = 798
                self.match(BSLParser.MINUS)
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 3)
                self.state = 799
                self.match(BSLParser.MUL)
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 4)
                self.state = 800
                self.match(BSLParser.QUOTIENT)
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 5)
                self.state = 801
                self.match(BSLParser.MODULO)
                pass
            elif token in [67, 68]:
                self.enterOuterAlt(localctx, 6)
                self.state = 802
                self.boolOperation()
                pass
            elif token in [11, 14, 15, 16, 17, 18]:
                self.enterOuterAlt(localctx, 7)
                self.state = 803
                self.compareOperation()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompareOperationContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESS(self):
            return self.getToken(BSLParser.LESS, 0)

        def LESS_OR_EQUAL(self):
            return self.getToken(BSLParser.LESS_OR_EQUAL, 0)

        def GREATER(self):
            return self.getToken(BSLParser.GREATER, 0)

        def GREATER_OR_EQUAL(self):
            return self.getToken(BSLParser.GREATER_OR_EQUAL, 0)

        def ASSIGN(self):
            return self.getToken(BSLParser.ASSIGN, 0)

        def NOT_EQUAL(self):
            return self.getToken(BSLParser.NOT_EQUAL, 0)

        def getRuleIndex(self):
            return BSLParser.RULE_compareOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompareOperation" ):
                listener.enterCompareOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompareOperation" ):
                listener.exitCompareOperation(self)




    def compareOperation(self):

        localctx = BSLParser.CompareOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_compareOperation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 806
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 509952) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoolOperationContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OR_KEYWORD(self):
            return self.getToken(BSLParser.OR_KEYWORD, 0)

        def AND_KEYWORD(self):
            return self.getToken(BSLParser.AND_KEYWORD, 0)

        def getRuleIndex(self):
            return BSLParser.RULE_boolOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolOperation" ):
                listener.enterBoolOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolOperation" ):
                listener.exitBoolOperation(self)




    def boolOperation(self):

        localctx = BSLParser.BoolOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_boolOperation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 808
            _la = self._input.LA(1)
            if not(_la==67 or _la==68):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryModifierContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT_KEYWORD(self):
            return self.getToken(BSLParser.NOT_KEYWORD, 0)

        def MINUS(self):
            return self.getToken(BSLParser.MINUS, 0)

        def PLUS(self):
            return self.getToken(BSLParser.PLUS, 0)

        def getRuleIndex(self):
            return BSLParser.RULE_unaryModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryModifier" ):
                listener.enterUnaryModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryModifier" ):
                listener.exitUnaryModifier(self)




    def unaryModifier(self):

        localctx = BSLParser.UnaryModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_unaryModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 810
            _la = self._input.LA(1)
            if not(((((_la - 12)) & ~0x3f) == 0 and ((1 << (_la - 12)) & 18014398509481987) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constValue(self):
            return self.getTypedRuleContext(BSLParser.ConstValueContext,0)


        def complexIdentifier(self):
            return self.getTypedRuleContext(BSLParser.ComplexIdentifierContext,0)


        def waitExpression(self):
            return self.getTypedRuleContext(BSLParser.WaitExpressionContext,0)


        def unaryModifier(self):
            return self.getTypedRuleContext(BSLParser.UnaryModifierContext,0)


        def IDENTIFIER(self):
            return self.getToken(BSLParser.IDENTIFIER, 0)

        def globalMethodCall(self):
            return self.getTypedRuleContext(BSLParser.GlobalMethodCallContext,0)


        def LPAREN(self):
            return self.getToken(BSLParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(BSLParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(BSLParser.RPAREN, 0)

        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BSLParser.ModifierContext)
            else:
                return self.getTypedRuleContext(BSLParser.ModifierContext,i)


        def getRuleIndex(self):
            return BSLParser.RULE_member

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember" ):
                listener.enterMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember" ):
                listener.exitMember(self)




    def member(self):

        localctx = BSLParser.MemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_member)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 813
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.state = 812
                self.unaryModifier()


            self.state = 832
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.state = 815
                self.constValue()
                pass

            elif la_ == 2:
                self.state = 816
                self.complexIdentifier()
                pass

            elif la_ == 3:
                self.state = 817
                self.match(BSLParser.LPAREN)
                self.state = 818
                self.expression()
                self.state = 819
                self.match(BSLParser.RPAREN)
                self.state = 824
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==3 or _la==4:
                    self.state = 821
                    self.modifier()
                    self.state = 826
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 4:
                self.state = 829
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
                if la_ == 1:
                    self.state = 827
                    self.match(BSLParser.IDENTIFIER)
                    pass

                elif la_ == 2:
                    self.state = 828
                    self.globalMethodCall()
                    pass


                pass

            elif la_ == 5:
                self.state = 831
                self.waitExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewExpressionContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW_KEYWORD(self):
            return self.getToken(BSLParser.NEW_KEYWORD, 0)

        def typeName(self):
            return self.getTypedRuleContext(BSLParser.TypeNameContext,0)


        def doCall(self):
            return self.getTypedRuleContext(BSLParser.DoCallContext,0)


        def getRuleIndex(self):
            return BSLParser.RULE_newExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewExpression" ):
                listener.enterNewExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewExpression" ):
                listener.exitNewExpression(self)




    def newExpression(self):

        localctx = BSLParser.NewExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_newExpression)
        self._la = 0 # Token type
        try:
            self.state = 841
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 834
                self.match(BSLParser.NEW_KEYWORD)
                self.state = 835
                self.typeName()
                self.state = 837
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==6:
                    self.state = 836
                    self.doCall()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 839
                self.match(BSLParser.NEW_KEYWORD)
                self.state = 840
                self.doCall()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(BSLParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return BSLParser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)




    def typeName(self):

        localctx = BSLParser.TypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_typeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 843
            self.match(BSLParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodCallContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def methodName(self):
            return self.getTypedRuleContext(BSLParser.MethodNameContext,0)


        def doCall(self):
            return self.getTypedRuleContext(BSLParser.DoCallContext,0)


        def getRuleIndex(self):
            return BSLParser.RULE_methodCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodCall" ):
                listener.enterMethodCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodCall" ):
                listener.exitMethodCall(self)




    def methodCall(self):

        localctx = BSLParser.MethodCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_methodCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 845
            self.methodName()
            self.state = 846
            self.doCall()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GlobalMethodCallContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def methodName(self):
            return self.getTypedRuleContext(BSLParser.MethodNameContext,0)


        def doCall(self):
            return self.getTypedRuleContext(BSLParser.DoCallContext,0)


        def getRuleIndex(self):
            return BSLParser.RULE_globalMethodCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobalMethodCall" ):
                listener.enterGlobalMethodCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobalMethodCall" ):
                listener.exitGlobalMethodCall(self)




    def globalMethodCall(self):

        localctx = BSLParser.GlobalMethodCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_globalMethodCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 848
            self.methodName()
            self.state = 849
            self.doCall()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodNameContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(BSLParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return BSLParser.RULE_methodName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodName" ):
                listener.enterMethodName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodName" ):
                listener.exitMethodName(self)




    def methodName(self):

        localctx = BSLParser.MethodNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_methodName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 851
            self.match(BSLParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexIdentifierContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(BSLParser.IDENTIFIER, 0)

        def newExpression(self):
            return self.getTypedRuleContext(BSLParser.NewExpressionContext,0)


        def ternaryOperator(self):
            return self.getTypedRuleContext(BSLParser.TernaryOperatorContext,0)


        def globalMethodCall(self):
            return self.getTypedRuleContext(BSLParser.GlobalMethodCallContext,0)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BSLParser.ModifierContext)
            else:
                return self.getTypedRuleContext(BSLParser.ModifierContext,i)


        def getRuleIndex(self):
            return BSLParser.RULE_complexIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexIdentifier" ):
                listener.enterComplexIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexIdentifier" ):
                listener.exitComplexIdentifier(self)




    def complexIdentifier(self):

        localctx = BSLParser.ComplexIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_complexIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 857
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.state = 853
                self.match(BSLParser.IDENTIFIER)
                pass

            elif la_ == 2:
                self.state = 854
                self.newExpression()
                pass

            elif la_ == 3:
                self.state = 855
                self.ternaryOperator()
                pass

            elif la_ == 4:
                self.state = 856
                self.globalMethodCall()
                pass


            self.state = 862
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==3 or _la==4:
                self.state = 859
                self.modifier()
                self.state = 864
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def accessProperty(self):
            return self.getTypedRuleContext(BSLParser.AccessPropertyContext,0)


        def accessIndex(self):
            return self.getTypedRuleContext(BSLParser.AccessIndexContext,0)


        def accessCall(self):
            return self.getTypedRuleContext(BSLParser.AccessCallContext,0)


        def getRuleIndex(self):
            return BSLParser.RULE_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifier" ):
                listener.enterModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifier" ):
                listener.exitModifier(self)




    def modifier(self):

        localctx = BSLParser.ModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_modifier)
        try:
            self.state = 868
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 865
                self.accessProperty()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 866
                self.accessIndex()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 867
                self.accessCall()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AcceptorContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def accessProperty(self):
            return self.getTypedRuleContext(BSLParser.AccessPropertyContext,0)


        def accessIndex(self):
            return self.getTypedRuleContext(BSLParser.AccessIndexContext,0)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(BSLParser.ModifierContext)
            else:
                return self.getTypedRuleContext(BSLParser.ModifierContext,i)


        def getRuleIndex(self):
            return BSLParser.RULE_acceptor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAcceptor" ):
                listener.enterAcceptor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAcceptor" ):
                listener.exitAcceptor(self)




    def acceptor(self):

        localctx = BSLParser.AcceptorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_acceptor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 873
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,92,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 870
                    self.modifier() 
                self.state = 875
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

            self.state = 878
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3]:
                self.state = 876
                self.accessProperty()
                pass
            elif token in [4]:
                self.state = 877
                self.accessIndex()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LValueContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(BSLParser.IDENTIFIER, 0)

        def globalMethodCall(self):
            return self.getTypedRuleContext(BSLParser.GlobalMethodCallContext,0)


        def acceptor(self):
            return self.getTypedRuleContext(BSLParser.AcceptorContext,0)


        def getRuleIndex(self):
            return BSLParser.RULE_lValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLValue" ):
                listener.enterLValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLValue" ):
                listener.exitLValue(self)




    def lValue(self):

        localctx = BSLParser.LValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_lValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 882
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.state = 880
                self.match(BSLParser.IDENTIFIER)
                pass

            elif la_ == 2:
                self.state = 881
                self.globalMethodCall()
                pass


            self.state = 885
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3 or _la==4:
                self.state = 884
                self.acceptor()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AccessCallContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(BSLParser.DOT, 0)

        def methodCall(self):
            return self.getTypedRuleContext(BSLParser.MethodCallContext,0)


        def getRuleIndex(self):
            return BSLParser.RULE_accessCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessCall" ):
                listener.enterAccessCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessCall" ):
                listener.exitAccessCall(self)




    def accessCall(self):

        localctx = BSLParser.AccessCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_accessCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 887
            self.match(BSLParser.DOT)
            self.state = 888
            self.methodCall()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AccessIndexContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(BSLParser.LBRACK, 0)

        def expression(self):
            return self.getTypedRuleContext(BSLParser.ExpressionContext,0)


        def RBRACK(self):
            return self.getToken(BSLParser.RBRACK, 0)

        def getRuleIndex(self):
            return BSLParser.RULE_accessIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessIndex" ):
                listener.enterAccessIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessIndex" ):
                listener.exitAccessIndex(self)




    def accessIndex(self):

        localctx = BSLParser.AccessIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_accessIndex)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 890
            self.match(BSLParser.LBRACK)
            self.state = 891
            self.expression()
            self.state = 892
            self.match(BSLParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AccessPropertyContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(BSLParser.DOT, 0)

        def IDENTIFIER(self):
            return self.getToken(BSLParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return BSLParser.RULE_accessProperty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessProperty" ):
                listener.enterAccessProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessProperty" ):
                listener.exitAccessProperty(self)




    def accessProperty(self):

        localctx = BSLParser.AccessPropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_accessProperty)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 894
            self.match(BSLParser.DOT)
            self.state = 895
            self.match(BSLParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoCallContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(BSLParser.LPAREN, 0)

        def callParamList(self):
            return self.getTypedRuleContext(BSLParser.CallParamListContext,0)


        def RPAREN(self):
            return self.getToken(BSLParser.RPAREN, 0)

        def getRuleIndex(self):
            return BSLParser.RULE_doCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoCall" ):
                listener.enterDoCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoCall" ):
                listener.exitDoCall(self)




    def doCall(self):

        localctx = BSLParser.DoCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_doCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 897
            self.match(BSLParser.LPAREN)
            self.state = 898
            self.callParamList()
            self.state = 899
            self.match(BSLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundStatementContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifStatement(self):
            return self.getTypedRuleContext(BSLParser.IfStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(BSLParser.WhileStatementContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(BSLParser.ForStatementContext,0)


        def forEachStatement(self):
            return self.getTypedRuleContext(BSLParser.ForEachStatementContext,0)


        def tryStatement(self):
            return self.getTypedRuleContext(BSLParser.TryStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(BSLParser.ReturnStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(BSLParser.ContinueStatementContext,0)


        def breakStatement(self):
            return self.getTypedRuleContext(BSLParser.BreakStatementContext,0)


        def raiseStatement(self):
            return self.getTypedRuleContext(BSLParser.RaiseStatementContext,0)


        def executeStatement(self):
            return self.getTypedRuleContext(BSLParser.ExecuteStatementContext,0)


        def gotoStatement(self):
            return self.getTypedRuleContext(BSLParser.GotoStatementContext,0)


        def addHandlerStatement(self):
            return self.getTypedRuleContext(BSLParser.AddHandlerStatementContext,0)


        def removeHandlerStatement(self):
            return self.getTypedRuleContext(BSLParser.RemoveHandlerStatementContext,0)


        def getRuleIndex(self):
            return BSLParser.RULE_compoundStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundStatement" ):
                listener.enterCompoundStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundStatement" ):
                listener.exitCompoundStatement(self)




    def compoundStatement(self):

        localctx = BSLParser.CompoundStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_compoundStatement)
        try:
            self.state = 914
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 901
                self.ifStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 902
                self.whileStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 903
                self.forStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 904
                self.forEachStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 905
                self.tryStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 906
                self.returnStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 907
                self.continueStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 908
                self.breakStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 909
                self.raiseStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 910
                self.executeStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 911
                self.gotoStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 912
                self.addHandlerStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 913
                self.removeHandlerStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





