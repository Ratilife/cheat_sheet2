# Generated from SDBLParser.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,180,1009,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,1,0,1,0,1,0,5,0,128,8,0,10,0,12,0,131,
        9,0,1,0,3,0,134,8,0,1,0,1,0,1,1,1,1,3,1,140,8,1,1,2,1,2,1,2,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,
        161,8,3,1,3,1,3,1,3,3,3,166,8,3,1,3,1,3,3,3,170,8,3,3,3,172,8,3,
        1,4,1,4,3,4,176,8,4,1,4,4,4,179,8,4,11,4,12,4,180,3,4,183,8,4,1,
        5,1,5,3,5,187,8,5,1,5,1,5,3,5,191,8,5,1,6,1,6,3,6,195,8,6,1,6,1,
        6,1,6,3,6,200,8,6,1,6,1,6,3,6,204,8,6,1,6,1,6,3,6,208,8,6,1,6,1,
        6,1,6,3,6,213,8,6,1,6,1,6,3,6,217,8,6,1,6,1,6,1,6,3,6,222,8,6,3,
        6,224,8,6,1,6,1,6,1,6,1,6,1,6,5,6,231,8,6,10,6,12,6,234,9,6,3,6,
        236,8,6,1,7,1,7,1,7,3,7,241,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,279,8,7,1,8,
        1,8,1,8,1,9,1,9,1,9,5,9,287,8,9,10,9,12,9,290,9,9,1,10,1,10,1,10,
        1,10,1,10,3,10,297,8,10,1,10,3,10,300,8,10,1,11,1,11,1,11,5,11,305,
        8,11,10,11,12,11,308,9,11,1,11,1,11,1,12,1,12,1,13,1,13,3,13,316,
        8,13,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,5,15,327,8,15,
        10,15,12,15,330,9,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,
        1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,5,18,
        353,8,18,10,18,12,18,356,9,18,1,18,1,18,1,18,1,18,1,18,5,18,363,
        8,18,10,18,12,18,366,9,18,3,18,368,8,18,1,19,1,19,3,19,372,8,19,
        1,20,1,20,1,20,1,20,1,20,3,20,379,8,20,1,21,1,21,1,21,1,21,3,21,
        385,8,21,3,21,387,8,21,1,22,1,22,3,22,391,8,22,1,22,1,22,1,22,1,
        22,5,22,397,8,22,10,22,12,22,400,9,22,1,23,1,23,1,23,3,23,405,8,
        23,1,23,1,23,3,23,409,8,23,1,23,3,23,412,8,23,3,23,414,8,23,1,24,
        1,24,1,24,1,24,1,24,3,24,421,8,24,1,24,1,24,3,24,425,8,24,1,24,1,
        24,1,25,1,25,1,25,4,25,432,8,25,11,25,12,25,433,1,25,1,25,1,25,1,
        25,4,25,440,8,25,11,25,12,25,441,3,25,444,8,25,1,26,1,26,1,26,1,
        26,1,26,1,26,1,26,3,26,453,8,26,1,26,1,26,1,26,5,26,458,8,26,10,
        26,12,26,461,9,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,
        27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,483,8,
        27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,495,8,
        27,1,27,3,27,498,8,27,1,28,1,28,1,28,4,28,503,8,28,11,28,12,28,504,
        1,28,1,28,3,28,509,8,28,1,28,1,28,1,28,1,28,4,28,515,8,28,11,28,
        12,28,516,1,28,1,28,3,28,521,8,28,1,28,1,28,1,28,1,28,1,28,3,28,
        528,8,28,1,28,1,28,3,28,532,8,28,1,29,1,29,1,29,1,29,1,29,1,30,1,
        30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,547,8,30,1,31,1,31,1,31,1,
        32,1,32,1,32,1,32,1,32,5,32,557,8,32,10,32,12,32,560,9,32,1,32,1,
        32,1,32,5,32,565,8,32,10,32,12,32,568,9,32,3,32,570,8,32,1,33,1,
        33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
        33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
        33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
        33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
        33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
        33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
        33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,661,8,33,1,
        34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,671,8,34,1,34,1,34,3,
        34,675,8,34,1,34,3,34,678,8,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
        1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
        1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,709,8,35,1,35,
        1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,723,
        8,36,1,36,3,36,726,8,36,1,36,1,36,1,36,1,36,3,36,732,8,36,1,36,1,
        36,3,36,736,8,36,1,36,1,36,1,37,1,37,1,37,5,37,743,8,37,10,37,12,
        37,746,9,37,1,38,5,38,749,8,38,10,38,12,38,752,9,38,1,38,1,38,1,
        38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,765,8,38,1,39,1,
        39,5,39,769,8,39,10,39,12,39,772,9,39,1,39,1,39,1,39,1,39,3,39,778,
        8,39,1,40,1,40,1,40,3,40,783,8,40,1,40,1,40,1,41,1,41,1,41,1,41,
        1,42,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,3,43,802,
        8,43,1,43,5,43,805,8,43,10,43,12,43,808,9,43,1,43,1,43,3,43,812,
        8,43,1,43,1,43,1,43,3,43,817,8,43,1,43,1,43,1,44,1,44,1,44,1,44,
        1,45,1,45,1,45,5,45,828,8,45,10,45,12,45,831,9,45,1,46,1,46,1,46,
        5,46,836,8,46,10,46,12,46,839,9,46,1,47,1,47,1,47,1,47,1,47,1,47,
        1,47,1,47,3,47,849,8,47,1,47,3,47,852,8,47,1,47,1,47,1,47,1,47,1,
        47,3,47,859,8,47,1,47,1,47,3,47,863,8,47,3,47,865,8,47,1,47,5,47,
        868,8,47,10,47,12,47,871,9,47,3,47,873,8,47,1,48,1,48,1,48,1,48,
        1,48,1,48,3,48,881,8,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,5,49,
        890,8,49,10,49,12,49,893,9,49,1,49,1,49,3,49,897,8,49,1,49,1,49,
        1,49,1,49,1,49,3,49,904,8,49,1,49,1,49,3,49,908,8,49,1,50,3,50,911,
        8,50,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
        1,52,1,52,1,52,1,52,1,52,1,52,3,52,931,8,52,1,53,1,53,3,53,935,8,
        53,1,53,1,53,1,53,3,53,940,8,53,1,53,1,53,1,53,3,53,945,8,53,1,53,
        1,53,1,53,1,53,3,53,951,8,53,1,53,1,53,1,53,1,53,1,54,3,54,958,8,
        54,1,54,1,54,1,55,1,55,3,55,964,8,55,1,56,4,56,967,8,56,11,56,12,
        56,968,1,57,1,57,1,58,1,58,1,59,3,59,976,8,59,1,59,4,59,979,8,59,
        11,59,12,59,980,1,59,1,59,1,59,4,59,986,8,59,11,59,12,59,987,1,59,
        5,59,991,8,59,10,59,12,59,994,9,59,4,59,996,8,59,11,59,12,59,997,
        3,59,1000,8,59,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,0,1,52,62,
        0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,
        46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,
        90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,0,
        23,2,0,27,27,50,50,2,0,24,24,30,30,8,0,71,71,77,78,85,86,88,88,97,
        97,108,108,116,116,118,118,2,0,9,10,16,17,2,0,36,36,55,55,6,0,71,
        72,78,78,85,86,88,88,97,97,116,118,2,0,63,63,75,75,7,0,71,71,77,
        78,85,86,88,88,108,108,116,116,118,118,6,0,71,71,78,78,85,86,88,
        88,97,97,118,118,4,0,92,92,94,94,115,115,142,142,7,0,59,61,65,65,
        76,76,79,81,95,95,98,99,107,107,4,0,82,82,102,102,109,111,113,113,
        2,0,100,100,119,119,3,0,62,62,83,84,106,106,5,0,122,122,124,127,
        129,129,131,134,137,137,2,0,124,127,131,131,2,0,22,22,48,48,2,0,
        8,8,11,15,1,0,164,175,2,0,47,47,50,50,1,0,9,10,9,0,32,32,34,34,42,
        42,51,51,54,54,59,141,144,154,161,161,164,175,1,0,120,137,1132,0,
        124,1,0,0,0,2,139,1,0,0,0,4,141,1,0,0,0,6,144,1,0,0,0,8,173,1,0,
        0,0,10,184,1,0,0,0,12,192,1,0,0,0,14,278,1,0,0,0,16,280,1,0,0,0,
        18,283,1,0,0,0,20,296,1,0,0,0,22,306,1,0,0,0,24,311,1,0,0,0,26,315,
        1,0,0,0,28,317,1,0,0,0,30,323,1,0,0,0,32,331,1,0,0,0,34,337,1,0,
        0,0,36,367,1,0,0,0,38,371,1,0,0,0,40,373,1,0,0,0,42,380,1,0,0,0,
        44,388,1,0,0,0,46,413,1,0,0,0,48,415,1,0,0,0,50,443,1,0,0,0,52,452,
        1,0,0,0,54,497,1,0,0,0,56,531,1,0,0,0,58,533,1,0,0,0,60,546,1,0,
        0,0,62,548,1,0,0,0,64,569,1,0,0,0,66,660,1,0,0,0,68,677,1,0,0,0,
        70,679,1,0,0,0,72,712,1,0,0,0,74,739,1,0,0,0,76,750,1,0,0,0,78,766,
        1,0,0,0,80,779,1,0,0,0,82,786,1,0,0,0,84,790,1,0,0,0,86,801,1,0,
        0,0,88,820,1,0,0,0,90,824,1,0,0,0,92,832,1,0,0,0,94,872,1,0,0,0,
        96,880,1,0,0,0,98,907,1,0,0,0,100,910,1,0,0,0,102,912,1,0,0,0,104,
        930,1,0,0,0,106,950,1,0,0,0,108,957,1,0,0,0,110,963,1,0,0,0,112,
        966,1,0,0,0,114,970,1,0,0,0,116,972,1,0,0,0,118,975,1,0,0,0,120,
        1001,1,0,0,0,122,1004,1,0,0,0,124,129,3,2,1,0,125,126,5,6,0,0,126,
        128,3,2,1,0,127,125,1,0,0,0,128,131,1,0,0,0,129,127,1,0,0,0,129,
        130,1,0,0,0,130,133,1,0,0,0,131,129,1,0,0,0,132,134,5,6,0,0,133,
        132,1,0,0,0,133,134,1,0,0,0,134,135,1,0,0,0,135,136,5,0,0,1,136,
        1,1,0,0,0,137,140,3,6,3,0,138,140,3,4,2,0,139,137,1,0,0,0,139,138,
        1,0,0,0,140,3,1,0,0,0,141,142,5,32,0,0,142,143,3,116,58,0,143,5,
        1,0,0,0,144,171,3,8,4,0,145,146,5,25,0,0,146,147,3,40,20,0,147,148,
        3,44,22,0,148,172,1,0,0,0,149,150,3,40,20,0,150,151,5,25,0,0,151,
        152,3,44,22,0,152,172,1,0,0,0,153,154,3,40,20,0,154,155,3,44,22,
        0,155,156,5,25,0,0,156,172,1,0,0,0,157,160,5,25,0,0,158,161,3,40,
        20,0,159,161,3,44,22,0,160,158,1,0,0,0,160,159,1,0,0,0,160,161,1,
        0,0,0,161,172,1,0,0,0,162,165,3,40,20,0,163,166,5,25,0,0,164,166,
        3,44,22,0,165,163,1,0,0,0,165,164,1,0,0,0,165,166,1,0,0,0,166,172,
        1,0,0,0,167,169,3,44,22,0,168,170,5,25,0,0,169,168,1,0,0,0,169,170,
        1,0,0,0,170,172,1,0,0,0,171,145,1,0,0,0,171,149,1,0,0,0,171,153,
        1,0,0,0,171,157,1,0,0,0,171,162,1,0,0,0,171,167,1,0,0,0,171,172,
        1,0,0,0,172,7,1,0,0,0,173,175,3,12,6,0,174,176,3,40,20,0,175,174,
        1,0,0,0,175,176,1,0,0,0,176,182,1,0,0,0,177,179,3,10,5,0,178,177,
        1,0,0,0,179,180,1,0,0,0,180,178,1,0,0,0,180,181,1,0,0,0,181,183,
        1,0,0,0,182,178,1,0,0,0,182,183,1,0,0,0,183,9,1,0,0,0,184,186,5,
        154,0,0,185,187,5,153,0,0,186,185,1,0,0,0,186,187,1,0,0,0,187,188,
        1,0,0,0,188,190,3,12,6,0,189,191,3,40,20,0,190,189,1,0,0,0,190,191,
        1,0,0,0,191,11,1,0,0,0,192,194,5,51,0,0,193,195,3,14,7,0,194,193,
        1,0,0,0,194,195,1,0,0,0,195,196,1,0,0,0,196,199,3,18,9,0,197,198,
        5,40,0,0,198,200,3,118,59,0,199,197,1,0,0,0,199,200,1,0,0,0,200,
        203,1,0,0,0,201,202,5,37,0,0,202,204,3,92,46,0,203,201,1,0,0,0,203,
        204,1,0,0,0,204,207,1,0,0,0,205,206,5,58,0,0,206,208,3,74,37,0,207,
        205,1,0,0,0,207,208,1,0,0,0,208,212,1,0,0,0,209,210,5,140,0,0,210,
        211,7,0,0,0,211,213,3,36,18,0,212,209,1,0,0,0,212,213,1,0,0,0,213,
        216,1,0,0,0,214,215,5,38,0,0,215,217,3,74,37,0,216,214,1,0,0,0,216,
        217,1,0,0,0,217,223,1,0,0,0,218,219,5,151,0,0,219,221,5,152,0,0,
        220,222,3,122,61,0,221,220,1,0,0,0,221,222,1,0,0,0,222,224,1,0,0,
        0,223,218,1,0,0,0,223,224,1,0,0,0,224,235,1,0,0,0,225,226,5,139,
        0,0,226,227,7,0,0,0,227,232,3,38,19,0,228,229,5,7,0,0,229,231,3,
        38,19,0,230,228,1,0,0,0,231,234,1,0,0,0,232,230,1,0,0,0,232,233,
        1,0,0,0,233,236,1,0,0,0,234,232,1,0,0,0,235,225,1,0,0,0,235,236,
        1,0,0,0,236,13,1,0,0,0,237,241,3,16,8,0,238,241,5,31,0,0,239,241,
        5,21,0,0,240,237,1,0,0,0,240,238,1,0,0,0,240,239,1,0,0,0,241,279,
        1,0,0,0,242,243,5,21,0,0,243,244,5,31,0,0,244,279,3,16,8,0,245,246,
        5,21,0,0,246,247,3,16,8,0,247,248,5,31,0,0,248,279,1,0,0,0,249,250,
        3,16,8,0,250,251,5,21,0,0,251,252,5,31,0,0,252,279,1,0,0,0,253,254,
        3,16,8,0,254,255,5,31,0,0,255,256,5,21,0,0,256,279,1,0,0,0,257,258,
        5,31,0,0,258,259,5,21,0,0,259,279,3,16,8,0,260,261,5,31,0,0,261,
        262,3,16,8,0,262,263,5,21,0,0,263,279,1,0,0,0,264,265,5,21,0,0,265,
        279,5,31,0,0,266,267,5,21,0,0,267,279,3,16,8,0,268,269,5,31,0,0,
        269,279,5,21,0,0,270,271,5,31,0,0,271,279,3,16,8,0,272,273,3,16,
        8,0,273,274,5,21,0,0,274,279,1,0,0,0,275,276,3,16,8,0,276,277,5,
        31,0,0,277,279,1,0,0,0,278,240,1,0,0,0,278,242,1,0,0,0,278,245,1,
        0,0,0,278,249,1,0,0,0,278,253,1,0,0,0,278,257,1,0,0,0,278,260,1,
        0,0,0,278,264,1,0,0,0,278,266,1,0,0,0,278,268,1,0,0,0,278,270,1,
        0,0,0,278,272,1,0,0,0,278,275,1,0,0,0,279,15,1,0,0,0,280,281,5,53,
        0,0,281,282,5,157,0,0,282,17,1,0,0,0,283,288,3,20,10,0,284,285,5,
        7,0,0,285,287,3,20,10,0,286,284,1,0,0,0,287,290,1,0,0,0,288,286,
        1,0,0,0,288,289,1,0,0,0,289,19,1,0,0,0,290,288,1,0,0,0,291,297,3,
        22,11,0,292,297,3,26,13,0,293,297,3,28,14,0,294,297,3,32,16,0,295,
        297,3,24,12,0,296,291,1,0,0,0,296,292,1,0,0,0,296,293,1,0,0,0,296,
        294,1,0,0,0,296,295,1,0,0,0,297,299,1,0,0,0,298,300,3,108,54,0,299,
        298,1,0,0,0,299,300,1,0,0,0,300,21,1,0,0,0,301,302,3,116,58,0,302,
        303,5,3,0,0,303,305,1,0,0,0,304,301,1,0,0,0,305,308,1,0,0,0,306,
        304,1,0,0,0,306,307,1,0,0,0,307,309,1,0,0,0,308,306,1,0,0,0,309,
        310,5,16,0,0,310,23,1,0,0,0,311,312,3,74,37,0,312,25,1,0,0,0,313,
        316,5,45,0,0,314,316,3,34,17,0,315,313,1,0,0,0,315,314,1,0,0,0,316,
        27,1,0,0,0,317,318,5,73,0,0,318,319,5,3,0,0,319,320,5,4,0,0,320,
        321,3,30,15,0,321,322,5,5,0,0,322,29,1,0,0,0,323,328,3,108,54,0,
        324,325,5,7,0,0,325,327,3,108,54,0,326,324,1,0,0,0,327,330,1,0,0,
        0,328,326,1,0,0,0,328,329,1,0,0,0,329,31,1,0,0,0,330,328,1,0,0,0,
        331,332,3,50,25,0,332,333,5,3,0,0,333,334,5,4,0,0,334,335,3,18,9,
        0,335,336,5,5,0,0,336,33,1,0,0,0,337,338,5,93,0,0,338,339,5,4,0,
        0,339,340,5,5,0,0,340,35,1,0,0,0,341,342,5,143,0,0,342,343,5,144,
        0,0,343,344,5,4,0,0,344,345,5,4,0,0,345,346,3,90,45,0,346,354,5,
        5,0,0,347,348,5,7,0,0,348,349,5,4,0,0,349,350,3,90,45,0,350,351,
        5,5,0,0,351,353,1,0,0,0,352,347,1,0,0,0,353,356,1,0,0,0,354,352,
        1,0,0,0,354,355,1,0,0,0,355,357,1,0,0,0,356,354,1,0,0,0,357,358,
        5,5,0,0,358,368,1,0,0,0,359,364,3,52,26,0,360,361,5,7,0,0,361,363,
        3,52,26,0,362,360,1,0,0,0,363,366,1,0,0,0,364,362,1,0,0,0,364,365,
        1,0,0,0,365,368,1,0,0,0,366,364,1,0,0,0,367,341,1,0,0,0,367,359,
        1,0,0,0,368,37,1,0,0,0,369,372,3,120,60,0,370,372,3,50,25,0,371,
        369,1,0,0,0,371,370,1,0,0,0,372,39,1,0,0,0,373,374,5,141,0,0,374,
        375,7,0,0,0,375,378,3,42,21,0,376,377,5,7,0,0,377,379,3,42,21,0,
        378,376,1,0,0,0,378,379,1,0,0,0,379,41,1,0,0,0,380,386,3,52,26,0,
        381,387,7,1,0,0,382,384,5,39,0,0,383,385,5,30,0,0,384,383,1,0,0,
        0,384,385,1,0,0,0,385,387,1,0,0,0,386,381,1,0,0,0,386,382,1,0,0,
        0,386,387,1,0,0,0,387,43,1,0,0,0,388,390,5,54,0,0,389,391,3,18,9,
        0,390,389,1,0,0,0,390,391,1,0,0,0,391,392,1,0,0,0,392,393,7,0,0,
        0,393,398,3,46,23,0,394,395,5,7,0,0,395,397,3,46,23,0,396,394,1,
        0,0,0,397,400,1,0,0,0,398,396,1,0,0,0,398,399,1,0,0,0,399,45,1,0,
        0,0,400,398,1,0,0,0,401,414,5,49,0,0,402,408,3,52,26,0,403,405,5,
        89,0,0,404,403,1,0,0,0,404,405,1,0,0,0,405,406,1,0,0,0,406,409,5,
        39,0,0,407,409,3,48,24,0,408,404,1,0,0,0,408,407,1,0,0,0,408,409,
        1,0,0,0,409,411,1,0,0,0,410,412,3,108,54,0,411,410,1,0,0,0,411,412,
        1,0,0,0,412,414,1,0,0,0,413,401,1,0,0,0,413,402,1,0,0,0,414,47,1,
        0,0,0,415,416,5,90,0,0,416,417,5,4,0,0,417,420,7,2,0,0,418,419,5,
        7,0,0,419,421,3,52,26,0,420,418,1,0,0,0,420,421,1,0,0,0,421,424,
        1,0,0,0,422,423,5,7,0,0,423,425,3,52,26,0,424,422,1,0,0,0,424,425,
        1,0,0,0,425,426,1,0,0,0,426,427,5,5,0,0,427,49,1,0,0,0,428,431,3,
        116,58,0,429,430,5,3,0,0,430,432,3,116,58,0,431,429,1,0,0,0,432,
        433,1,0,0,0,433,431,1,0,0,0,433,434,1,0,0,0,434,444,1,0,0,0,435,
        444,3,116,58,0,436,439,3,122,61,0,437,438,5,3,0,0,438,440,3,116,
        58,0,439,437,1,0,0,0,440,441,1,0,0,0,441,439,1,0,0,0,441,442,1,0,
        0,0,442,444,1,0,0,0,443,428,1,0,0,0,443,435,1,0,0,0,443,436,1,0,
        0,0,444,51,1,0,0,0,445,446,6,26,-1,0,446,453,3,54,27,0,447,453,3,
        64,32,0,448,453,3,56,28,0,449,453,3,50,25,0,450,453,3,60,30,0,451,
        453,3,62,31,0,452,445,1,0,0,0,452,447,1,0,0,0,452,448,1,0,0,0,452,
        449,1,0,0,0,452,450,1,0,0,0,452,451,1,0,0,0,453,459,1,0,0,0,454,
        455,10,1,0,0,455,456,7,3,0,0,456,458,3,52,26,2,457,454,1,0,0,0,458,
        461,1,0,0,0,459,457,1,0,0,0,459,460,1,0,0,0,460,53,1,0,0,0,461,459,
        1,0,0,0,462,498,5,45,0,0,463,498,5,56,0,0,464,498,3,112,56,0,465,
        498,5,157,0,0,466,498,5,158,0,0,467,498,7,4,0,0,468,469,5,70,0,0,
        469,470,5,4,0,0,470,471,3,110,55,0,471,472,5,7,0,0,472,473,3,110,
        55,0,473,474,5,7,0,0,474,482,3,110,55,0,475,476,5,7,0,0,476,477,
        3,110,55,0,477,478,5,7,0,0,478,479,3,110,55,0,479,480,5,7,0,0,480,
        481,3,110,55,0,481,483,1,0,0,0,482,475,1,0,0,0,482,483,1,0,0,0,483,
        484,1,0,0,0,484,485,5,5,0,0,485,498,1,0,0,0,486,498,3,120,60,0,487,
        488,5,112,0,0,488,494,5,4,0,0,489,495,3,122,61,0,490,495,5,101,0,
        0,491,495,5,64,0,0,492,495,5,67,0,0,493,495,5,87,0,0,494,489,1,0,
        0,0,494,490,1,0,0,0,494,491,1,0,0,0,494,492,1,0,0,0,494,493,1,0,
        0,0,495,496,1,0,0,0,496,498,5,5,0,0,497,462,1,0,0,0,497,463,1,0,
        0,0,497,464,1,0,0,0,497,465,1,0,0,0,497,466,1,0,0,0,497,467,1,0,
        0,0,497,468,1,0,0,0,497,486,1,0,0,0,497,487,1,0,0,0,498,55,1,0,0,
        0,499,500,5,28,0,0,500,502,3,52,26,0,501,503,3,58,29,0,502,501,1,
        0,0,0,503,504,1,0,0,0,504,502,1,0,0,0,504,505,1,0,0,0,505,508,1,
        0,0,0,506,507,5,33,0,0,507,509,3,74,37,0,508,506,1,0,0,0,508,509,
        1,0,0,0,509,510,1,0,0,0,510,511,5,34,0,0,511,532,1,0,0,0,512,514,
        5,28,0,0,513,515,3,58,29,0,514,513,1,0,0,0,515,516,1,0,0,0,516,514,
        1,0,0,0,516,517,1,0,0,0,517,520,1,0,0,0,518,519,5,33,0,0,519,521,
        3,74,37,0,520,518,1,0,0,0,520,521,1,0,0,0,521,522,1,0,0,0,522,523,
        5,34,0,0,523,532,1,0,0,0,524,527,3,58,29,0,525,526,5,33,0,0,526,
        528,3,74,37,0,527,525,1,0,0,0,527,528,1,0,0,0,528,529,1,0,0,0,529,
        530,5,34,0,0,530,532,1,0,0,0,531,499,1,0,0,0,531,512,1,0,0,0,531,
        524,1,0,0,0,532,57,1,0,0,0,533,534,5,57,0,0,534,535,3,74,37,0,535,
        536,5,52,0,0,536,537,3,74,37,0,537,59,1,0,0,0,538,539,5,4,0,0,539,
        540,3,52,26,0,540,541,5,5,0,0,541,547,1,0,0,0,542,543,5,4,0,0,543,
        544,3,8,4,0,544,545,5,5,0,0,545,547,1,0,0,0,546,538,1,0,0,0,546,
        542,1,0,0,0,547,61,1,0,0,0,548,549,3,114,57,0,549,550,3,52,26,0,
        550,63,1,0,0,0,551,570,3,68,34,0,552,570,3,66,33,0,553,558,3,70,
        35,0,554,555,5,3,0,0,555,557,3,116,58,0,556,554,1,0,0,0,557,560,
        1,0,0,0,558,556,1,0,0,0,558,559,1,0,0,0,559,570,1,0,0,0,560,558,
        1,0,0,0,561,566,3,72,36,0,562,563,5,3,0,0,563,565,3,116,58,0,564,
        562,1,0,0,0,565,568,1,0,0,0,566,564,1,0,0,0,566,567,1,0,0,0,567,
        570,1,0,0,0,568,566,1,0,0,0,569,551,1,0,0,0,569,552,1,0,0,0,569,
        553,1,0,0,0,569,561,1,0,0,0,570,65,1,0,0,0,571,572,5,105,0,0,572,
        573,5,4,0,0,573,574,3,52,26,0,574,575,5,7,0,0,575,576,3,52,26,0,
        576,577,5,7,0,0,577,578,3,52,26,0,578,579,5,5,0,0,579,661,1,0,0,
        0,580,581,7,5,0,0,581,582,5,4,0,0,582,583,3,52,26,0,583,584,5,5,
        0,0,584,661,1,0,0,0,585,586,7,6,0,0,586,587,5,4,0,0,587,588,3,52,
        26,0,588,589,5,7,0,0,589,590,7,7,0,0,590,591,5,5,0,0,591,661,1,0,
        0,0,592,593,5,68,0,0,593,594,5,4,0,0,594,595,3,52,26,0,595,596,5,
        7,0,0,596,597,7,2,0,0,597,598,5,7,0,0,598,599,3,52,26,0,599,600,
        5,5,0,0,600,661,1,0,0,0,601,602,5,69,0,0,602,603,5,4,0,0,603,604,
        3,52,26,0,604,605,5,7,0,0,605,606,3,52,26,0,606,607,5,7,0,0,607,
        608,7,8,0,0,608,609,5,5,0,0,609,661,1,0,0,0,610,611,7,9,0,0,611,
        612,5,4,0,0,612,613,3,52,26,0,613,614,5,5,0,0,614,661,1,0,0,0,615,
        616,5,42,0,0,616,617,5,4,0,0,617,618,3,74,37,0,618,619,5,7,0,0,619,
        620,3,74,37,0,620,621,5,5,0,0,621,661,1,0,0,0,622,623,7,10,0,0,623,
        624,5,4,0,0,624,625,3,52,26,0,625,626,5,5,0,0,626,661,1,0,0,0,627,
        628,7,11,0,0,628,629,5,4,0,0,629,630,3,52,26,0,630,631,5,5,0,0,631,
        661,1,0,0,0,632,633,5,96,0,0,633,634,5,4,0,0,634,635,3,52,26,0,635,
        636,5,7,0,0,636,637,3,52,26,0,637,638,5,5,0,0,638,661,1,0,0,0,639,
        640,7,12,0,0,640,641,5,4,0,0,641,642,3,52,26,0,642,643,5,5,0,0,643,
        661,1,0,0,0,644,645,5,103,0,0,645,646,5,4,0,0,646,647,3,52,26,0,
        647,648,5,7,0,0,648,649,3,52,26,0,649,650,5,5,0,0,650,661,1,0,0,
        0,651,652,5,104,0,0,652,653,5,4,0,0,653,654,3,52,26,0,654,655,5,
        7,0,0,655,656,3,52,26,0,656,657,5,7,0,0,657,658,3,52,26,0,658,659,
        5,5,0,0,659,661,1,0,0,0,660,571,1,0,0,0,660,580,1,0,0,0,660,585,
        1,0,0,0,660,592,1,0,0,0,660,601,1,0,0,0,660,610,1,0,0,0,660,615,
        1,0,0,0,660,622,1,0,0,0,660,627,1,0,0,0,660,632,1,0,0,0,660,639,
        1,0,0,0,660,644,1,0,0,0,660,651,1,0,0,0,661,67,1,0,0,0,662,663,7,
        13,0,0,663,664,5,4,0,0,664,665,3,74,37,0,665,666,5,5,0,0,666,678,
        1,0,0,0,667,668,5,66,0,0,668,674,5,4,0,0,669,671,5,31,0,0,670,669,
        1,0,0,0,670,671,1,0,0,0,671,672,1,0,0,0,672,675,3,74,37,0,673,675,
        5,16,0,0,674,670,1,0,0,0,674,673,1,0,0,0,675,676,1,0,0,0,676,678,
        5,5,0,0,677,662,1,0,0,0,677,667,1,0,0,0,678,69,1,0,0,0,679,680,5,
        114,0,0,680,708,5,4,0,0,681,682,7,14,0,0,682,683,5,3,0,0,683,684,
        3,116,58,0,684,685,5,3,0,0,685,686,5,74,0,0,686,709,1,0,0,0,687,
        688,7,15,0,0,688,689,5,3,0,0,689,690,3,116,58,0,690,691,5,3,0,0,
        691,692,3,116,58,0,692,709,1,0,0,0,693,694,5,122,0,0,694,695,5,3,
        0,0,695,696,3,116,58,0,696,697,5,3,0,0,697,698,5,138,0,0,698,699,
        5,3,0,0,699,700,3,116,58,0,700,709,1,0,0,0,701,702,3,116,58,0,702,
        703,5,3,0,0,703,704,3,116,58,0,704,709,1,0,0,0,705,706,3,122,61,
        0,706,707,5,3,0,0,707,709,1,0,0,0,708,681,1,0,0,0,708,687,1,0,0,
        0,708,693,1,0,0,0,708,701,1,0,0,0,708,705,1,0,0,0,709,710,1,0,0,
        0,710,711,5,5,0,0,711,71,1,0,0,0,712,713,5,29,0,0,713,714,5,4,0,
        0,714,715,3,52,26,0,715,735,5,23,0,0,716,736,5,64,0,0,717,725,5,
        87,0,0,718,719,5,4,0,0,719,722,5,157,0,0,720,721,5,7,0,0,721,723,
        5,157,0,0,722,720,1,0,0,0,722,723,1,0,0,0,723,724,1,0,0,0,724,726,
        5,5,0,0,725,718,1,0,0,0,725,726,1,0,0,0,726,736,1,0,0,0,727,731,
        5,101,0,0,728,729,5,4,0,0,729,730,5,157,0,0,730,732,5,5,0,0,731,
        728,1,0,0,0,731,732,1,0,0,0,732,736,1,0,0,0,733,736,5,67,0,0,734,
        736,3,122,61,0,735,716,1,0,0,0,735,717,1,0,0,0,735,727,1,0,0,0,735,
        733,1,0,0,0,735,734,1,0,0,0,736,737,1,0,0,0,737,738,5,5,0,0,738,
        73,1,0,0,0,739,744,3,76,38,0,740,741,7,16,0,0,741,743,3,76,38,0,
        742,740,1,0,0,0,743,746,1,0,0,0,744,742,1,0,0,0,744,745,1,0,0,0,
        745,75,1,0,0,0,746,744,1,0,0,0,747,749,5,44,0,0,748,747,1,0,0,0,
        749,752,1,0,0,0,750,748,1,0,0,0,750,751,1,0,0,0,751,764,1,0,0,0,
        752,750,1,0,0,0,753,765,3,52,26,0,754,765,3,78,39,0,755,765,3,80,
        40,0,756,765,3,82,41,0,757,765,3,84,42,0,758,765,3,86,43,0,759,765,
        3,88,44,0,760,761,5,4,0,0,761,762,3,74,37,0,762,763,5,5,0,0,763,
        765,1,0,0,0,764,753,1,0,0,0,764,754,1,0,0,0,764,755,1,0,0,0,764,
        756,1,0,0,0,764,757,1,0,0,0,764,758,1,0,0,0,764,759,1,0,0,0,764,
        760,1,0,0,0,765,77,1,0,0,0,766,770,3,52,26,0,767,769,5,44,0,0,768,
        767,1,0,0,0,769,772,1,0,0,0,770,768,1,0,0,0,770,771,1,0,0,0,771,
        773,1,0,0,0,772,770,1,0,0,0,773,774,5,43,0,0,774,777,3,52,26,0,775,
        776,5,35,0,0,776,778,3,112,56,0,777,775,1,0,0,0,777,778,1,0,0,0,
        778,79,1,0,0,0,779,780,3,52,26,0,780,782,5,41,0,0,781,783,5,44,0,
        0,782,781,1,0,0,0,782,783,1,0,0,0,783,784,1,0,0,0,784,785,5,45,0,
        0,785,81,1,0,0,0,786,787,3,52,26,0,787,788,7,17,0,0,788,789,3,52,
        26,0,789,83,1,0,0,0,790,791,3,52,26,0,791,792,5,26,0,0,792,793,3,
        52,26,0,793,794,5,22,0,0,794,795,3,52,26,0,795,85,1,0,0,0,796,802,
        3,52,26,0,797,798,5,4,0,0,798,799,3,90,45,0,799,800,5,5,0,0,800,
        802,1,0,0,0,801,796,1,0,0,0,801,797,1,0,0,0,802,806,1,0,0,0,803,
        805,5,44,0,0,804,803,1,0,0,0,805,808,1,0,0,0,806,804,1,0,0,0,806,
        807,1,0,0,0,807,809,1,0,0,0,808,806,1,0,0,0,809,811,5,156,0,0,810,
        812,5,155,0,0,811,810,1,0,0,0,811,812,1,0,0,0,812,813,1,0,0,0,813,
        816,5,4,0,0,814,817,3,8,4,0,815,817,3,90,45,0,816,814,1,0,0,0,816,
        815,1,0,0,0,817,818,1,0,0,0,818,819,5,5,0,0,819,87,1,0,0,0,820,821,
        3,52,26,0,821,822,5,91,0,0,822,823,3,122,61,0,823,89,1,0,0,0,824,
        829,3,74,37,0,825,826,5,7,0,0,826,828,3,74,37,0,827,825,1,0,0,0,
        828,831,1,0,0,0,829,827,1,0,0,0,829,830,1,0,0,0,830,91,1,0,0,0,831,
        829,1,0,0,0,832,837,3,94,47,0,833,834,5,7,0,0,834,836,3,94,47,0,
        835,833,1,0,0,0,836,839,1,0,0,0,837,835,1,0,0,0,837,838,1,0,0,0,
        838,93,1,0,0,0,839,837,1,0,0,0,840,841,5,4,0,0,841,842,3,94,47,0,
        842,843,5,5,0,0,843,873,1,0,0,0,844,849,3,98,49,0,845,849,3,96,48,
        0,846,849,3,102,51,0,847,849,3,104,52,0,848,844,1,0,0,0,848,845,
        1,0,0,0,848,846,1,0,0,0,848,847,1,0,0,0,849,851,1,0,0,0,850,852,
        3,108,54,0,851,850,1,0,0,0,851,852,1,0,0,0,852,865,1,0,0,0,853,858,
        5,4,0,0,854,859,3,98,49,0,855,859,3,96,48,0,856,859,3,102,51,0,857,
        859,3,8,4,0,858,854,1,0,0,0,858,855,1,0,0,0,858,856,1,0,0,0,858,
        857,1,0,0,0,859,860,1,0,0,0,860,862,5,5,0,0,861,863,3,108,54,0,862,
        861,1,0,0,0,862,863,1,0,0,0,863,865,1,0,0,0,864,848,1,0,0,0,864,
        853,1,0,0,0,865,869,1,0,0,0,866,868,3,106,53,0,867,866,1,0,0,0,868,
        871,1,0,0,0,869,867,1,0,0,0,869,870,1,0,0,0,870,873,1,0,0,0,871,
        869,1,0,0,0,872,840,1,0,0,0,872,864,1,0,0,0,873,95,1,0,0,0,874,881,
        3,122,61,0,875,876,3,122,61,0,876,877,5,3,0,0,877,878,3,116,58,0,
        878,881,1,0,0,0,879,881,3,116,58,0,880,874,1,0,0,0,880,875,1,0,0,
        0,880,879,1,0,0,0,881,97,1,0,0,0,882,883,3,122,61,0,883,884,5,3,
        0,0,884,896,7,18,0,0,885,886,5,4,0,0,886,891,3,100,50,0,887,888,
        5,7,0,0,888,890,3,100,50,0,889,887,1,0,0,0,890,893,1,0,0,0,891,889,
        1,0,0,0,891,892,1,0,0,0,892,894,1,0,0,0,893,891,1,0,0,0,894,895,
        5,5,0,0,895,897,1,0,0,0,896,885,1,0,0,0,896,897,1,0,0,0,897,908,
        1,0,0,0,898,899,5,134,0,0,899,900,5,3,0,0,900,901,3,116,58,0,901,
        903,5,4,0,0,902,904,3,120,60,0,903,902,1,0,0,0,903,904,1,0,0,0,904,
        905,1,0,0,0,905,906,5,5,0,0,906,908,1,0,0,0,907,882,1,0,0,0,907,
        898,1,0,0,0,908,99,1,0,0,0,909,911,3,74,37,0,910,909,1,0,0,0,910,
        911,1,0,0,0,911,101,1,0,0,0,912,913,3,120,60,0,913,103,1,0,0,0,914,
        915,3,122,61,0,915,916,5,3,0,0,916,917,5,178,0,0,917,918,5,3,0,0,
        918,919,3,116,58,0,919,931,1,0,0,0,920,921,3,122,61,0,921,922,5,
        3,0,0,922,923,5,179,0,0,923,924,5,3,0,0,924,925,3,116,58,0,925,926,
        5,3,0,0,926,927,5,180,0,0,927,928,5,3,0,0,928,929,3,116,58,0,929,
        931,1,0,0,0,930,914,1,0,0,0,930,920,1,0,0,0,931,105,1,0,0,0,932,
        934,5,145,0,0,933,935,5,150,0,0,934,933,1,0,0,0,934,935,1,0,0,0,
        935,936,1,0,0,0,936,951,5,149,0,0,937,939,5,146,0,0,938,940,5,150,
        0,0,939,938,1,0,0,0,939,940,1,0,0,0,940,941,1,0,0,0,941,951,5,149,
        0,0,942,944,5,148,0,0,943,945,5,150,0,0,944,943,1,0,0,0,944,945,
        1,0,0,0,945,946,1,0,0,0,946,951,5,149,0,0,947,948,5,147,0,0,948,
        951,5,149,0,0,949,951,5,149,0,0,950,932,1,0,0,0,950,937,1,0,0,0,
        950,942,1,0,0,0,950,947,1,0,0,0,950,949,1,0,0,0,951,952,1,0,0,0,
        952,953,3,94,47,0,953,954,7,19,0,0,954,955,3,74,37,0,955,107,1,0,
        0,0,956,958,5,23,0,0,957,956,1,0,0,0,957,958,1,0,0,0,958,959,1,0,
        0,0,959,960,3,116,58,0,960,109,1,0,0,0,961,964,3,120,60,0,962,964,
        5,157,0,0,963,961,1,0,0,0,963,962,1,0,0,0,964,111,1,0,0,0,965,967,
        5,159,0,0,966,965,1,0,0,0,967,968,1,0,0,0,968,966,1,0,0,0,968,969,
        1,0,0,0,969,113,1,0,0,0,970,971,7,20,0,0,971,115,1,0,0,0,972,973,
        7,21,0,0,973,117,1,0,0,0,974,976,5,3,0,0,975,974,1,0,0,0,975,976,
        1,0,0,0,976,999,1,0,0,0,977,979,5,18,0,0,978,977,1,0,0,0,979,980,
        1,0,0,0,980,978,1,0,0,0,980,981,1,0,0,0,981,1000,1,0,0,0,982,1000,
        3,116,58,0,983,986,3,116,58,0,984,986,5,18,0,0,985,983,1,0,0,0,985,
        984,1,0,0,0,986,987,1,0,0,0,987,985,1,0,0,0,987,988,1,0,0,0,988,
        992,1,0,0,0,989,991,5,157,0,0,990,989,1,0,0,0,991,994,1,0,0,0,992,
        990,1,0,0,0,992,993,1,0,0,0,993,996,1,0,0,0,994,992,1,0,0,0,995,
        985,1,0,0,0,996,997,1,0,0,0,997,995,1,0,0,0,997,998,1,0,0,0,998,
        1000,1,0,0,0,999,978,1,0,0,0,999,982,1,0,0,0,999,995,1,0,0,0,1000,
        119,1,0,0,0,1001,1002,5,19,0,0,1002,1003,5,163,0,0,1003,121,1,0,
        0,0,1004,1005,7,22,0,0,1005,1006,5,3,0,0,1006,1007,3,116,58,0,1007,
        123,1,0,0,0,112,129,133,139,160,165,169,171,175,180,182,186,190,
        194,199,203,207,212,216,221,223,232,235,240,278,288,296,299,306,
        315,328,354,364,367,371,378,384,386,390,398,404,408,411,413,420,
        424,433,441,443,452,459,482,494,497,504,508,516,520,527,531,546,
        558,566,569,660,670,674,677,708,722,725,731,735,744,750,764,770,
        777,782,801,806,811,816,829,837,848,851,858,862,864,869,872,880,
        891,896,903,907,910,930,934,939,944,950,957,963,968,975,980,985,
        987,992,997,999
    ]

class SDBLParser ( Parser ):

    grammarFileName = "SDBLParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "'.'", "'('", 
                     "')'", "';'", "','", "'='", "'+'", "'-'", "'<='", "'<>'", 
                     "'<'", "'>='", "'>'", "'*'", "'/'", "'#'", "'&'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'\"'" ]

    symbolicNames = [ "<INVALID>", "WHITE_SPACE", "LINE_COMMENT", "DOT", 
                      "LPAREN", "RPAREN", "SEMICOLON", "COMMA", "ASSIGN", 
                      "PLUS", "MINUS", "LESS_OR_EQUAL", "NOT_EQUAL", "LESS", 
                      "GREATER_OR_EQUAL", "GREATER", "MUL", "QUOTIENT", 
                      "NUMBER_SIGH", "AMPERSAND", "BRACE", "ALLOWED", "AND", 
                      "AS", "ASC", "AUTOORDER", "BETWEEN", "BY_EN", "CASE", 
                      "CAST", "DESC", "DISTINCT", "DROP", "ELSE", "END", 
                      "ESCAPE", "FALSE", "FROM", "HAVING", "HIERARCHY", 
                      "INTO", "IS", "ISNULL", "LIKE", "NOT", "NULL", "OF", 
                      "ON_EN", "OR", "OVERALL", "PO_RU", "SELECT", "THEN", 
                      "TOP", "TOTALS", "TRUE", "UNDEFINED", "WHEN", "WHERE", 
                      "ACOS", "ASIN", "ATAN", "AVG", "BEGINOFPERIOD", "BOOLEAN", 
                      "COS", "COUNT", "DATE", "DATEADD", "DATEDIFF", "DATETIME", 
                      "DAY", "DAYOFYEAR", "EMPTYTABLE", "EMPTYREF", "ENDOFPERIOD", 
                      "EXP", "HALFYEAR", "HOUR", "INT", "LOG", "LOG10", 
                      "LOWER", "MAX", "MIN", "MINUTE", "MONTH", "NUMBER", 
                      "QUARTER", "ONLY", "PERIODS", "REFS", "PRESENTATION", 
                      "RECORDAUTONUMBER", "REFPRESENTATION", "POW", "ROUND", 
                      "SECOND", "SIN", "SQRT", "STOREDDATASIZE", "STRING", 
                      "STRINGLENGTH", "STRFIND", "STRREPLACE", "SUBSTRING", 
                      "SUM", "TAN", "TENDAYS", "TRIMALL", "TRIML", "TRIMR", 
                      "TYPE", "UPPER", "VALUE", "VALUETYPE", "WEEK", "WEEKDAY", 
                      "YEAR", "UUID", "ACCOUNTING_REGISTER_TYPE", "ACCUMULATION_REGISTER_TYPE", 
                      "BUSINESS_PROCESS_TYPE", "CALCULATION_REGISTER_TYPE", 
                      "CATALOG_TYPE", "CHART_OF_ACCOUNTS_TYPE", "CHART_OF_CALCULATION_TYPES_TYPE", 
                      "CHART_OF_CHARACTERISTIC_TYPES_TYPE", "CONSTANT_TYPE", 
                      "DOCUMENT_TYPE", "DOCUMENT_JOURNAL_TYPE", "ENUM_TYPE", 
                      "EXCHANGE_PLAN_TYPE", "EXTERNAL_DATA_SOURCE_TYPE", 
                      "FILTER_CRITERION_TYPE", "INFORMATION_REGISTER_TYPE", 
                      "SEQUENCE_TYPE", "TASK_TYPE", "ROUTEPOINT_FIELD", 
                      "INDEX", "GROUP", "ORDER", "GROUPEDBY", "GROUPING", 
                      "SET", "RIGHT", "LEFT", "INNER", "FULL", "JOIN", "OUTER", 
                      "FOR", "UPDATE", "ALL", "UNION", "HIERARCHY_FOR_IN", 
                      "IN", "DECIMAL", "FLOAT", "STR", "INCORRECT_IDENTIFIER", 
                      "IDENTIFIER", "UNKNOWN", "PARAMETER_IDENTIFIER", "ACTUAL_ACTION_PERIOD_VT", 
                      "BALANCE_VT", "BALANCE_AND_TURNOVERS_VT", "BOUNDARIES_VT", 
                      "DR_CR_TURNOVERS_VT", "EXT_DIMENSIONS_VT", "RECORDS_WITH_EXT_DIMENSIONS_VT", 
                      "SCHEDULE_DATA_VT", "SLICEFIRST_VT", "SLICELAST_VT", 
                      "TASK_BY_PERFORMER_VT", "TURNOVERS_VT", "BRACE_IDENTIFIER", 
                      "BRACE_START", "EDS_TABLE", "EDS_CUBE", "EDS_CUBE_DIMTABLE" ]

    RULE_queryPackage = 0
    RULE_queries = 1
    RULE_dropTableQuery = 2
    RULE_selectQuery = 3
    RULE_subquery = 4
    RULE_union = 5
    RULE_query = 6
    RULE_limitations = 7
    RULE_top = 8
    RULE_selectedFields = 9
    RULE_selectedField = 10
    RULE_asteriskField = 11
    RULE_expressionField = 12
    RULE_columnField = 13
    RULE_emptyTableField = 14
    RULE_emptyTableColumns = 15
    RULE_inlineTableField = 16
    RULE_recordAutoNumberFunction = 17
    RULE_groupByItem = 18
    RULE_indexingItem = 19
    RULE_orderBy = 20
    RULE_ordersByExpession = 21
    RULE_totalBy = 22
    RULE_totalsGroup = 23
    RULE_periodic = 24
    RULE_column = 25
    RULE_expression = 26
    RULE_primitiveExpression = 27
    RULE_caseExpression = 28
    RULE_caseBranch = 29
    RULE_bracketExpression = 30
    RULE_unaryExpression = 31
    RULE_functionCall = 32
    RULE_builtInFunctions = 33
    RULE_aggregateFunctions = 34
    RULE_valueFunction = 35
    RULE_castFunction = 36
    RULE_logicalExpression = 37
    RULE_predicate = 38
    RULE_likePredicate = 39
    RULE_isNullPredicate = 40
    RULE_comparePredicate = 41
    RULE_betweenPredicate = 42
    RULE_inPredicate = 43
    RULE_refsPredicate = 44
    RULE_expressionList = 45
    RULE_dataSources = 46
    RULE_dataSource = 47
    RULE_table = 48
    RULE_virtualTable = 49
    RULE_virtualTableParameter = 50
    RULE_parameterTable = 51
    RULE_externalDataSourceTable = 52
    RULE_joinPart = 53
    RULE_alias = 54
    RULE_datePart = 55
    RULE_multiString = 56
    RULE_sign = 57
    RULE_identifier = 58
    RULE_temporaryTableIdentifier = 59
    RULE_parameter = 60
    RULE_mdo = 61

    ruleNames =  [ "queryPackage", "queries", "dropTableQuery", "selectQuery", 
                   "subquery", "union", "query", "limitations", "top", "selectedFields", 
                   "selectedField", "asteriskField", "expressionField", 
                   "columnField", "emptyTableField", "emptyTableColumns", 
                   "inlineTableField", "recordAutoNumberFunction", "groupByItem", 
                   "indexingItem", "orderBy", "ordersByExpession", "totalBy", 
                   "totalsGroup", "periodic", "column", "expression", "primitiveExpression", 
                   "caseExpression", "caseBranch", "bracketExpression", 
                   "unaryExpression", "functionCall", "builtInFunctions", 
                   "aggregateFunctions", "valueFunction", "castFunction", 
                   "logicalExpression", "predicate", "likePredicate", "isNullPredicate", 
                   "comparePredicate", "betweenPredicate", "inPredicate", 
                   "refsPredicate", "expressionList", "dataSources", "dataSource", 
                   "table", "virtualTable", "virtualTableParameter", "parameterTable", 
                   "externalDataSourceTable", "joinPart", "alias", "datePart", 
                   "multiString", "sign", "identifier", "temporaryTableIdentifier", 
                   "parameter", "mdo" ]

    EOF = Token.EOF
    WHITE_SPACE=1
    LINE_COMMENT=2
    DOT=3
    LPAREN=4
    RPAREN=5
    SEMICOLON=6
    COMMA=7
    ASSIGN=8
    PLUS=9
    MINUS=10
    LESS_OR_EQUAL=11
    NOT_EQUAL=12
    LESS=13
    GREATER_OR_EQUAL=14
    GREATER=15
    MUL=16
    QUOTIENT=17
    NUMBER_SIGH=18
    AMPERSAND=19
    BRACE=20
    ALLOWED=21
    AND=22
    AS=23
    ASC=24
    AUTOORDER=25
    BETWEEN=26
    BY_EN=27
    CASE=28
    CAST=29
    DESC=30
    DISTINCT=31
    DROP=32
    ELSE=33
    END=34
    ESCAPE=35
    FALSE=36
    FROM=37
    HAVING=38
    HIERARCHY=39
    INTO=40
    IS=41
    ISNULL=42
    LIKE=43
    NOT=44
    NULL=45
    OF=46
    ON_EN=47
    OR=48
    OVERALL=49
    PO_RU=50
    SELECT=51
    THEN=52
    TOP=53
    TOTALS=54
    TRUE=55
    UNDEFINED=56
    WHEN=57
    WHERE=58
    ACOS=59
    ASIN=60
    ATAN=61
    AVG=62
    BEGINOFPERIOD=63
    BOOLEAN=64
    COS=65
    COUNT=66
    DATE=67
    DATEADD=68
    DATEDIFF=69
    DATETIME=70
    DAY=71
    DAYOFYEAR=72
    EMPTYTABLE=73
    EMPTYREF=74
    ENDOFPERIOD=75
    EXP=76
    HALFYEAR=77
    HOUR=78
    INT=79
    LOG=80
    LOG10=81
    LOWER=82
    MAX=83
    MIN=84
    MINUTE=85
    MONTH=86
    NUMBER=87
    QUARTER=88
    ONLY=89
    PERIODS=90
    REFS=91
    PRESENTATION=92
    RECORDAUTONUMBER=93
    REFPRESENTATION=94
    POW=95
    ROUND=96
    SECOND=97
    SIN=98
    SQRT=99
    STOREDDATASIZE=100
    STRING=101
    STRINGLENGTH=102
    STRFIND=103
    STRREPLACE=104
    SUBSTRING=105
    SUM=106
    TAN=107
    TENDAYS=108
    TRIMALL=109
    TRIML=110
    TRIMR=111
    TYPE=112
    UPPER=113
    VALUE=114
    VALUETYPE=115
    WEEK=116
    WEEKDAY=117
    YEAR=118
    UUID=119
    ACCOUNTING_REGISTER_TYPE=120
    ACCUMULATION_REGISTER_TYPE=121
    BUSINESS_PROCESS_TYPE=122
    CALCULATION_REGISTER_TYPE=123
    CATALOG_TYPE=124
    CHART_OF_ACCOUNTS_TYPE=125
    CHART_OF_CALCULATION_TYPES_TYPE=126
    CHART_OF_CHARACTERISTIC_TYPES_TYPE=127
    CONSTANT_TYPE=128
    DOCUMENT_TYPE=129
    DOCUMENT_JOURNAL_TYPE=130
    ENUM_TYPE=131
    EXCHANGE_PLAN_TYPE=132
    EXTERNAL_DATA_SOURCE_TYPE=133
    FILTER_CRITERION_TYPE=134
    INFORMATION_REGISTER_TYPE=135
    SEQUENCE_TYPE=136
    TASK_TYPE=137
    ROUTEPOINT_FIELD=138
    INDEX=139
    GROUP=140
    ORDER=141
    GROUPEDBY=142
    GROUPING=143
    SET=144
    RIGHT=145
    LEFT=146
    INNER=147
    FULL=148
    JOIN=149
    OUTER=150
    FOR=151
    UPDATE=152
    ALL=153
    UNION=154
    HIERARCHY_FOR_IN=155
    IN=156
    DECIMAL=157
    FLOAT=158
    STR=159
    INCORRECT_IDENTIFIER=160
    IDENTIFIER=161
    UNKNOWN=162
    PARAMETER_IDENTIFIER=163
    ACTUAL_ACTION_PERIOD_VT=164
    BALANCE_VT=165
    BALANCE_AND_TURNOVERS_VT=166
    BOUNDARIES_VT=167
    DR_CR_TURNOVERS_VT=168
    EXT_DIMENSIONS_VT=169
    RECORDS_WITH_EXT_DIMENSIONS_VT=170
    SCHEDULE_DATA_VT=171
    SLICEFIRST_VT=172
    SLICELAST_VT=173
    TASK_BY_PERFORMER_VT=174
    TURNOVERS_VT=175
    BRACE_IDENTIFIER=176
    BRACE_START=177
    EDS_TABLE=178
    EDS_CUBE=179
    EDS_CUBE_DIMTABLE=180

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class QueryPackageContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queries(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SDBLParser.QueriesContext)
            else:
                return self.getTypedRuleContext(SDBLParser.QueriesContext,i)


        def EOF(self):
            return self.getToken(SDBLParser.EOF, 0)

        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(SDBLParser.SEMICOLON)
            else:
                return self.getToken(SDBLParser.SEMICOLON, i)

        def getRuleIndex(self):
            return SDBLParser.RULE_queryPackage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryPackage" ):
                listener.enterQueryPackage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryPackage" ):
                listener.exitQueryPackage(self)




    def queryPackage(self):

        localctx = SDBLParser.QueryPackageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_queryPackage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 124
            self.queries()
            self.state = 129
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 125
                    self.match(SDBLParser.SEMICOLON)
                    self.state = 126
                    self.queries() 
                self.state = 131
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            self.state = 133
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6:
                self.state = 132
                self.match(SDBLParser.SEMICOLON)


            self.state = 135
            self.match(SDBLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueriesContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectQuery(self):
            return self.getTypedRuleContext(SDBLParser.SelectQueryContext,0)


        def dropTableQuery(self):
            return self.getTypedRuleContext(SDBLParser.DropTableQueryContext,0)


        def getRuleIndex(self):
            return SDBLParser.RULE_queries

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueries" ):
                listener.enterQueries(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueries" ):
                listener.exitQueries(self)




    def queries(self):

        localctx = SDBLParser.QueriesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_queries)
        try:
            self.state = 139
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [51]:
                self.enterOuterAlt(localctx, 1)
                self.state = 137
                self.selectQuery()
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 2)
                self.state = 138
                self.dropTableQuery()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropTableQueryContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.temporaryTableName = None # IdentifierContext

        def DROP(self):
            return self.getToken(SDBLParser.DROP, 0)

        def identifier(self):
            return self.getTypedRuleContext(SDBLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SDBLParser.RULE_dropTableQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTableQuery" ):
                listener.enterDropTableQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTableQuery" ):
                listener.exitDropTableQuery(self)




    def dropTableQuery(self):

        localctx = SDBLParser.DropTableQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_dropTableQuery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 141
            self.match(SDBLParser.DROP)
            self.state = 142
            localctx.temporaryTableName = self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectQueryContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.autoorder = None # Token
            self.orders = None # OrderByContext
            self.totals = None # TotalByContext

        def subquery(self):
            return self.getTypedRuleContext(SDBLParser.SubqueryContext,0)


        def AUTOORDER(self):
            return self.getToken(SDBLParser.AUTOORDER, 0)

        def orderBy(self):
            return self.getTypedRuleContext(SDBLParser.OrderByContext,0)


        def totalBy(self):
            return self.getTypedRuleContext(SDBLParser.TotalByContext,0)


        def getRuleIndex(self):
            return SDBLParser.RULE_selectQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectQuery" ):
                listener.enterSelectQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectQuery" ):
                listener.exitSelectQuery(self)




    def selectQuery(self):

        localctx = SDBLParser.SelectQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_selectQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 144
            self.subquery()
            self.state = 171
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 145
                localctx.autoorder = self.match(SDBLParser.AUTOORDER)
                self.state = 146
                localctx.orders = self.orderBy()
                self.state = 147
                localctx.totals = self.totalBy()

            elif la_ == 2:
                self.state = 149
                localctx.orders = self.orderBy()
                self.state = 150
                localctx.autoorder = self.match(SDBLParser.AUTOORDER)
                self.state = 151
                localctx.totals = self.totalBy()

            elif la_ == 3:
                self.state = 153
                localctx.orders = self.orderBy()
                self.state = 154
                localctx.totals = self.totalBy()
                self.state = 155
                localctx.autoorder = self.match(SDBLParser.AUTOORDER)

            elif la_ == 4:
                self.state = 157
                localctx.autoorder = self.match(SDBLParser.AUTOORDER)
                self.state = 160
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [141]:
                    self.state = 158
                    localctx.orders = self.orderBy()
                    pass
                elif token in [54]:
                    self.state = 159
                    localctx.totals = self.totalBy()
                    pass
                elif token in [-1, 6]:
                    pass
                else:
                    pass

            elif la_ == 5:
                self.state = 162
                localctx.orders = self.orderBy()
                self.state = 165
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [25]:
                    self.state = 163
                    localctx.autoorder = self.match(SDBLParser.AUTOORDER)
                    pass
                elif token in [54]:
                    self.state = 164
                    localctx.totals = self.totalBy()
                    pass
                elif token in [-1, 6]:
                    pass
                else:
                    pass

            elif la_ == 6:
                self.state = 167
                localctx.totals = self.totalBy()
                self.state = 169
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==25:
                    self.state = 168
                    localctx.autoorder = self.match(SDBLParser.AUTOORDER)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubqueryContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.main = None # QueryContext
            self._union = None # UnionContext
            self.unions = list() # of UnionContexts

        def query(self):
            return self.getTypedRuleContext(SDBLParser.QueryContext,0)


        def orderBy(self):
            return self.getTypedRuleContext(SDBLParser.OrderByContext,0)


        def union(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SDBLParser.UnionContext)
            else:
                return self.getTypedRuleContext(SDBLParser.UnionContext,i)


        def getRuleIndex(self):
            return SDBLParser.RULE_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery" ):
                listener.enterSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery" ):
                listener.exitSubquery(self)




    def subquery(self):

        localctx = SDBLParser.SubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_subquery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 173
            localctx.main = self.query()
            self.state = 175
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 174
                self.orderBy()


            self.state = 182
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==154:
                self.state = 178 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 177
                    localctx._union = self.union()
                    localctx.unions.append(localctx._union)
                    self.state = 180 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==154):
                        break



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(SDBLParser.UNION, 0)

        def query(self):
            return self.getTypedRuleContext(SDBLParser.QueryContext,0)


        def ALL(self):
            return self.getToken(SDBLParser.ALL, 0)

        def orderBy(self):
            return self.getTypedRuleContext(SDBLParser.OrderByContext,0)


        def getRuleIndex(self):
            return SDBLParser.RULE_union

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnion" ):
                listener.enterUnion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnion" ):
                listener.exitUnion(self)




    def union(self):

        localctx = SDBLParser.UnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_union)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 184
            self.match(SDBLParser.UNION)
            self.state = 186
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153:
                self.state = 185
                self.match(SDBLParser.ALL)


            self.state = 188
            self.query()
            self.state = 190
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 189
                self.orderBy()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.columns = None # SelectedFieldsContext
            self.temporaryTableName = None # TemporaryTableIdentifierContext
            self.from_ = None # DataSourcesContext
            self.where = None # LogicalExpressionContext
            self.groupBy = None # GroupByItemContext
            self.having = None # LogicalExpressionContext
            self.forUpdate = None # MdoContext
            self._indexingItem = None # IndexingItemContext
            self.indexes = list() # of IndexingItemContexts

        def SELECT(self):
            return self.getToken(SDBLParser.SELECT, 0)

        def selectedFields(self):
            return self.getTypedRuleContext(SDBLParser.SelectedFieldsContext,0)


        def limitations(self):
            return self.getTypedRuleContext(SDBLParser.LimitationsContext,0)


        def INTO(self):
            return self.getToken(SDBLParser.INTO, 0)

        def FROM(self):
            return self.getToken(SDBLParser.FROM, 0)

        def WHERE(self):
            return self.getToken(SDBLParser.WHERE, 0)

        def GROUP(self):
            return self.getToken(SDBLParser.GROUP, 0)

        def HAVING(self):
            return self.getToken(SDBLParser.HAVING, 0)

        def FOR(self):
            return self.getToken(SDBLParser.FOR, 0)

        def UPDATE(self):
            return self.getToken(SDBLParser.UPDATE, 0)

        def INDEX(self):
            return self.getToken(SDBLParser.INDEX, 0)

        def temporaryTableIdentifier(self):
            return self.getTypedRuleContext(SDBLParser.TemporaryTableIdentifierContext,0)


        def dataSources(self):
            return self.getTypedRuleContext(SDBLParser.DataSourcesContext,0)


        def logicalExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SDBLParser.LogicalExpressionContext)
            else:
                return self.getTypedRuleContext(SDBLParser.LogicalExpressionContext,i)


        def BY_EN(self, i:int=None):
            if i is None:
                return self.getTokens(SDBLParser.BY_EN)
            else:
                return self.getToken(SDBLParser.BY_EN, i)

        def PO_RU(self, i:int=None):
            if i is None:
                return self.getTokens(SDBLParser.PO_RU)
            else:
                return self.getToken(SDBLParser.PO_RU, i)

        def groupByItem(self):
            return self.getTypedRuleContext(SDBLParser.GroupByItemContext,0)


        def indexingItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SDBLParser.IndexingItemContext)
            else:
                return self.getTypedRuleContext(SDBLParser.IndexingItemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SDBLParser.COMMA)
            else:
                return self.getToken(SDBLParser.COMMA, i)

        def mdo(self):
            return self.getTypedRuleContext(SDBLParser.MdoContext,0)


        def getRuleIndex(self):
            return SDBLParser.RULE_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery" ):
                listener.enterQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery" ):
                listener.exitQuery(self)




    def query(self):

        localctx = SDBLParser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_query)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 192
            self.match(SDBLParser.SELECT)
            self.state = 194
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 9007201404321792) != 0):
                self.state = 193
                self.limitations()


            self.state = 196
            localctx.columns = self.selectedFields()
            self.state = 199
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==40:
                self.state = 197
                self.match(SDBLParser.INTO)
                self.state = 198
                localctx.temporaryTableName = self.temporaryTableIdentifier()


            self.state = 203
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==37:
                self.state = 201
                self.match(SDBLParser.FROM)
                self.state = 202
                localctx.from_ = self.dataSources()


            self.state = 207
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 205
                self.match(SDBLParser.WHERE)
                self.state = 206
                localctx.where = self.logicalExpression()


            self.state = 212
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==140:
                self.state = 209
                self.match(SDBLParser.GROUP)
                self.state = 210
                _la = self._input.LA(1)
                if not(_la==27 or _la==50):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 211
                localctx.groupBy = self.groupByItem()


            self.state = 216
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==38:
                self.state = 214
                self.match(SDBLParser.HAVING)
                self.state = 215
                localctx.having = self.logicalExpression()


            self.state = 223
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==151:
                self.state = 218
                self.match(SDBLParser.FOR)
                self.state = 219
                self.match(SDBLParser.UPDATE)
                self.state = 221
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 120)) & ~0x3f) == 0 and ((1 << (_la - 120)) & 262143) != 0):
                    self.state = 220
                    localctx.forUpdate = self.mdo()




            self.state = 235
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==139:
                self.state = 225
                self.match(SDBLParser.INDEX)
                self.state = 226
                _la = self._input.LA(1)
                if not(_la==27 or _la==50):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 227
                localctx._indexingItem = self.indexingItem()
                localctx.indexes.append(localctx._indexingItem)
                self.state = 232
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==7:
                    self.state = 228
                    self.match(SDBLParser.COMMA)
                    self.state = 229
                    localctx._indexingItem = self.indexingItem()
                    localctx.indexes.append(localctx._indexingItem)
                    self.state = 234
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitationsContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def top(self):
            return self.getTypedRuleContext(SDBLParser.TopContext,0)


        def DISTINCT(self):
            return self.getToken(SDBLParser.DISTINCT, 0)

        def ALLOWED(self):
            return self.getToken(SDBLParser.ALLOWED, 0)

        def getRuleIndex(self):
            return SDBLParser.RULE_limitations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimitations" ):
                listener.enterLimitations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimitations" ):
                listener.exitLimitations(self)




    def limitations(self):

        localctx = SDBLParser.LimitationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_limitations)
        try:
            self.state = 278
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 240
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [53]:
                    self.state = 237
                    self.top()
                    pass
                elif token in [31]:
                    self.state = 238
                    self.match(SDBLParser.DISTINCT)
                    pass
                elif token in [21]:
                    self.state = 239
                    self.match(SDBLParser.ALLOWED)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 242
                self.match(SDBLParser.ALLOWED)
                self.state = 243
                self.match(SDBLParser.DISTINCT)
                self.state = 244
                self.top()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 245
                self.match(SDBLParser.ALLOWED)
                self.state = 246
                self.top()
                self.state = 247
                self.match(SDBLParser.DISTINCT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 249
                self.top()
                self.state = 250
                self.match(SDBLParser.ALLOWED)
                self.state = 251
                self.match(SDBLParser.DISTINCT)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 253
                self.top()
                self.state = 254
                self.match(SDBLParser.DISTINCT)
                self.state = 255
                self.match(SDBLParser.ALLOWED)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 257
                self.match(SDBLParser.DISTINCT)
                self.state = 258
                self.match(SDBLParser.ALLOWED)
                self.state = 259
                self.top()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 260
                self.match(SDBLParser.DISTINCT)
                self.state = 261
                self.top()
                self.state = 262
                self.match(SDBLParser.ALLOWED)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 264
                self.match(SDBLParser.ALLOWED)
                self.state = 265
                self.match(SDBLParser.DISTINCT)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 266
                self.match(SDBLParser.ALLOWED)
                self.state = 267
                self.top()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 268
                self.match(SDBLParser.DISTINCT)
                self.state = 269
                self.match(SDBLParser.ALLOWED)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 270
                self.match(SDBLParser.DISTINCT)
                self.state = 271
                self.top()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 272
                self.top()
                self.state = 273
                self.match(SDBLParser.ALLOWED)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 275
                self.top()
                self.state = 276
                self.match(SDBLParser.DISTINCT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.count = None # Token

        def TOP(self):
            return self.getToken(SDBLParser.TOP, 0)

        def DECIMAL(self):
            return self.getToken(SDBLParser.DECIMAL, 0)

        def getRuleIndex(self):
            return SDBLParser.RULE_top

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTop" ):
                listener.enterTop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTop" ):
                listener.exitTop(self)




    def top(self):

        localctx = SDBLParser.TopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_top)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 280
            self.match(SDBLParser.TOP)
            self.state = 281
            localctx.count = self.match(SDBLParser.DECIMAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectedFieldsContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._selectedField = None # SelectedFieldContext
            self.fields = list() # of SelectedFieldContexts

        def selectedField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SDBLParser.SelectedFieldContext)
            else:
                return self.getTypedRuleContext(SDBLParser.SelectedFieldContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SDBLParser.COMMA)
            else:
                return self.getToken(SDBLParser.COMMA, i)

        def getRuleIndex(self):
            return SDBLParser.RULE_selectedFields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectedFields" ):
                listener.enterSelectedFields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectedFields" ):
                listener.exitSelectedFields(self)




    def selectedFields(self):

        localctx = SDBLParser.SelectedFieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_selectedFields)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 283
            localctx._selectedField = self.selectedField()
            localctx.fields.append(localctx._selectedField)
            self.state = 288
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==7:
                self.state = 284
                self.match(SDBLParser.COMMA)
                self.state = 285
                localctx._selectedField = self.selectedField()
                localctx.fields.append(localctx._selectedField)
                self.state = 290
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectedFieldContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def asteriskField(self):
            return self.getTypedRuleContext(SDBLParser.AsteriskFieldContext,0)


        def columnField(self):
            return self.getTypedRuleContext(SDBLParser.ColumnFieldContext,0)


        def emptyTableField(self):
            return self.getTypedRuleContext(SDBLParser.EmptyTableFieldContext,0)


        def inlineTableField(self):
            return self.getTypedRuleContext(SDBLParser.InlineTableFieldContext,0)


        def expressionField(self):
            return self.getTypedRuleContext(SDBLParser.ExpressionFieldContext,0)


        def alias(self):
            return self.getTypedRuleContext(SDBLParser.AliasContext,0)


        def getRuleIndex(self):
            return SDBLParser.RULE_selectedField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectedField" ):
                listener.enterSelectedField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectedField" ):
                listener.exitSelectedField(self)




    def selectedField(self):

        localctx = SDBLParser.SelectedFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_selectedField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 296
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.state = 291
                self.asteriskField()
                pass

            elif la_ == 2:
                self.state = 292
                self.columnField()
                pass

            elif la_ == 3:
                self.state = 293
                self.emptyTableField()
                pass

            elif la_ == 4:
                self.state = 294
                self.inlineTableField()
                pass

            elif la_ == 5:
                self.state = 295
                self.expressionField()
                pass


            self.state = 299
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.state = 298
                self.alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsteriskFieldContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.tableName = None # IdentifierContext

        def MUL(self):
            return self.getToken(SDBLParser.MUL, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(SDBLParser.DOT)
            else:
                return self.getToken(SDBLParser.DOT, i)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SDBLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SDBLParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SDBLParser.RULE_asteriskField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsteriskField" ):
                listener.enterAsteriskField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsteriskField" ):
                listener.exitAsteriskField(self)




    def asteriskField(self):

        localctx = SDBLParser.AsteriskFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_asteriskField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 306
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -556190134458908672) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 281414981337087) != 0):
                self.state = 301
                localctx.tableName = self.identifier()
                self.state = 302
                self.match(SDBLParser.DOT)
                self.state = 308
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 309
            self.match(SDBLParser.MUL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionFieldContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalExpression(self):
            return self.getTypedRuleContext(SDBLParser.LogicalExpressionContext,0)


        def getRuleIndex(self):
            return SDBLParser.RULE_expressionField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionField" ):
                listener.enterExpressionField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionField" ):
                listener.exitExpressionField(self)




    def expressionField(self):

        localctx = SDBLParser.ExpressionFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_expressionField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 311
            self.logicalExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnFieldContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(SDBLParser.NULL, 0)

        def recordAutoNumberFunction(self):
            return self.getTypedRuleContext(SDBLParser.RecordAutoNumberFunctionContext,0)


        def getRuleIndex(self):
            return SDBLParser.RULE_columnField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnField" ):
                listener.enterColumnField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnField" ):
                listener.exitColumnField(self)




    def columnField(self):

        localctx = SDBLParser.ColumnFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_columnField)
        try:
            self.state = 315
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [45]:
                self.enterOuterAlt(localctx, 1)
                self.state = 313
                self.match(SDBLParser.NULL)
                pass
            elif token in [93]:
                self.enterOuterAlt(localctx, 2)
                self.state = 314
                self.recordAutoNumberFunction()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyTableFieldContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.emptyTable = None # Token

        def DOT(self):
            return self.getToken(SDBLParser.DOT, 0)

        def LPAREN(self):
            return self.getToken(SDBLParser.LPAREN, 0)

        def emptyTableColumns(self):
            return self.getTypedRuleContext(SDBLParser.EmptyTableColumnsContext,0)


        def RPAREN(self):
            return self.getToken(SDBLParser.RPAREN, 0)

        def EMPTYTABLE(self):
            return self.getToken(SDBLParser.EMPTYTABLE, 0)

        def getRuleIndex(self):
            return SDBLParser.RULE_emptyTableField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyTableField" ):
                listener.enterEmptyTableField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyTableField" ):
                listener.exitEmptyTableField(self)




    def emptyTableField(self):

        localctx = SDBLParser.EmptyTableFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_emptyTableField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 317
            localctx.emptyTable = self.match(SDBLParser.EMPTYTABLE)
            self.state = 318
            self.match(SDBLParser.DOT)
            self.state = 319
            self.match(SDBLParser.LPAREN)
            self.state = 320
            self.emptyTableColumns()
            self.state = 321
            self.match(SDBLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyTableColumnsContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._alias = None # AliasContext
            self.columns = list() # of AliasContexts

        def alias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SDBLParser.AliasContext)
            else:
                return self.getTypedRuleContext(SDBLParser.AliasContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SDBLParser.COMMA)
            else:
                return self.getToken(SDBLParser.COMMA, i)

        def getRuleIndex(self):
            return SDBLParser.RULE_emptyTableColumns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyTableColumns" ):
                listener.enterEmptyTableColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyTableColumns" ):
                listener.exitEmptyTableColumns(self)




    def emptyTableColumns(self):

        localctx = SDBLParser.EmptyTableColumnsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_emptyTableColumns)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 323
            localctx._alias = self.alias()
            localctx.columns.append(localctx._alias)
            self.state = 328
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==7:
                self.state = 324
                self.match(SDBLParser.COMMA)
                self.state = 325
                localctx._alias = self.alias()
                localctx.columns.append(localctx._alias)
                self.state = 330
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InlineTableFieldContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.inlineTable = None # ColumnContext
            self.inlineTableFields = None # SelectedFieldsContext

        def DOT(self):
            return self.getToken(SDBLParser.DOT, 0)

        def LPAREN(self):
            return self.getToken(SDBLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(SDBLParser.RPAREN, 0)

        def column(self):
            return self.getTypedRuleContext(SDBLParser.ColumnContext,0)


        def selectedFields(self):
            return self.getTypedRuleContext(SDBLParser.SelectedFieldsContext,0)


        def getRuleIndex(self):
            return SDBLParser.RULE_inlineTableField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineTableField" ):
                listener.enterInlineTableField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineTableField" ):
                listener.exitInlineTableField(self)




    def inlineTableField(self):

        localctx = SDBLParser.InlineTableFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_inlineTableField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 331
            localctx.inlineTable = self.column()
            self.state = 332
            self.match(SDBLParser.DOT)
            self.state = 333
            self.match(SDBLParser.LPAREN)
            self.state = 334
            localctx.inlineTableFields = self.selectedFields()
            self.state = 335
            self.match(SDBLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordAutoNumberFunctionContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.doCall = None # Token

        def LPAREN(self):
            return self.getToken(SDBLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(SDBLParser.RPAREN, 0)

        def RECORDAUTONUMBER(self):
            return self.getToken(SDBLParser.RECORDAUTONUMBER, 0)

        def getRuleIndex(self):
            return SDBLParser.RULE_recordAutoNumberFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordAutoNumberFunction" ):
                listener.enterRecordAutoNumberFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordAutoNumberFunction" ):
                listener.exitRecordAutoNumberFunction(self)




    def recordAutoNumberFunction(self):

        localctx = SDBLParser.RecordAutoNumberFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_recordAutoNumberFunction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 337
            localctx.doCall = self.match(SDBLParser.RECORDAUTONUMBER)
            self.state = 338
            self.match(SDBLParser.LPAREN)
            self.state = 339
            self.match(SDBLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByItemContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._expressionList = None # ExpressionListContext
            self.groupingSet = list() # of ExpressionListContexts
            self._expression = None # ExpressionContext
            self.groupBy = list() # of ExpressionContexts

        def GROUPING(self):
            return self.getToken(SDBLParser.GROUPING, 0)

        def SET(self):
            return self.getToken(SDBLParser.SET, 0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SDBLParser.LPAREN)
            else:
                return self.getToken(SDBLParser.LPAREN, i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SDBLParser.RPAREN)
            else:
                return self.getToken(SDBLParser.RPAREN, i)

        def expressionList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SDBLParser.ExpressionListContext)
            else:
                return self.getTypedRuleContext(SDBLParser.ExpressionListContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SDBLParser.COMMA)
            else:
                return self.getToken(SDBLParser.COMMA, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SDBLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SDBLParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SDBLParser.RULE_groupByItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupByItem" ):
                listener.enterGroupByItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupByItem" ):
                listener.exitGroupByItem(self)




    def groupByItem(self):

        localctx = SDBLParser.GroupByItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_groupByItem)
        self._la = 0 # Token type
        try:
            self.state = 367
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [143]:
                self.enterOuterAlt(localctx, 1)
                self.state = 341
                self.match(SDBLParser.GROUPING)
                self.state = 342
                self.match(SDBLParser.SET)
                self.state = 343
                self.match(SDBLParser.LPAREN)

                self.state = 344
                self.match(SDBLParser.LPAREN)
                self.state = 345
                localctx._expressionList = self.expressionList()
                localctx.groupingSet.append(localctx._expressionList)
                self.state = 346
                self.match(SDBLParser.RPAREN)
                self.state = 354
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==7:
                    self.state = 347
                    self.match(SDBLParser.COMMA)
                    self.state = 348
                    self.match(SDBLParser.LPAREN)
                    self.state = 349
                    localctx._expressionList = self.expressionList()
                    localctx.groupingSet.append(localctx._expressionList)
                    self.state = 350
                    self.match(SDBLParser.RPAREN)
                    self.state = 356
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 357
                self.match(SDBLParser.RPAREN)
                pass
            elif token in [4, 9, 10, 19, 28, 29, 32, 34, 36, 42, 45, 51, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 161, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175]:
                self.enterOuterAlt(localctx, 2)
                self.state = 359
                localctx._expression = self.expression(0)
                localctx.groupBy.append(localctx._expression)
                self.state = 364
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==7:
                    self.state = 360
                    self.match(SDBLParser.COMMA)
                    self.state = 361
                    localctx._expression = self.expression(0)
                    localctx.groupBy.append(localctx._expression)
                    self.state = 366
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexingItemContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter(self):
            return self.getTypedRuleContext(SDBLParser.ParameterContext,0)


        def column(self):
            return self.getTypedRuleContext(SDBLParser.ColumnContext,0)


        def getRuleIndex(self):
            return SDBLParser.RULE_indexingItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexingItem" ):
                listener.enterIndexingItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexingItem" ):
                listener.exitIndexingItem(self)




    def indexingItem(self):

        localctx = SDBLParser.IndexingItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_indexingItem)
        try:
            self.state = 371
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [19]:
                self.enterOuterAlt(localctx, 1)
                self.state = 369
                self.parameter()
                pass
            elif token in [32, 34, 42, 51, 54, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 161, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175]:
                self.enterOuterAlt(localctx, 2)
                self.state = 370
                self.column()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderByContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._ordersByExpession = None # OrdersByExpessionContext
            self.orders = list() # of OrdersByExpessionContexts

        def ORDER(self):
            return self.getToken(SDBLParser.ORDER, 0)

        def BY_EN(self):
            return self.getToken(SDBLParser.BY_EN, 0)

        def PO_RU(self):
            return self.getToken(SDBLParser.PO_RU, 0)

        def ordersByExpession(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SDBLParser.OrdersByExpessionContext)
            else:
                return self.getTypedRuleContext(SDBLParser.OrdersByExpessionContext,i)


        def COMMA(self):
            return self.getToken(SDBLParser.COMMA, 0)

        def getRuleIndex(self):
            return SDBLParser.RULE_orderBy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderBy" ):
                listener.enterOrderBy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderBy" ):
                listener.exitOrderBy(self)




    def orderBy(self):

        localctx = SDBLParser.OrderByContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_orderBy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 373
            self.match(SDBLParser.ORDER)
            self.state = 374
            _la = self._input.LA(1)
            if not(_la==27 or _la==50):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 375
            localctx._ordersByExpession = self.ordersByExpession()
            localctx.orders.append(localctx._ordersByExpession)
            self.state = 378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 376
                self.match(SDBLParser.COMMA)
                self.state = 377
                localctx._ordersByExpession = self.ordersByExpession()
                localctx.orders.append(localctx._ordersByExpession)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrdersByExpessionContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.direction = None # Token
            self.hierarchy = None # Token

        def expression(self):
            return self.getTypedRuleContext(SDBLParser.ExpressionContext,0)


        def ASC(self):
            return self.getToken(SDBLParser.ASC, 0)

        def DESC(self):
            return self.getToken(SDBLParser.DESC, 0)

        def HIERARCHY(self):
            return self.getToken(SDBLParser.HIERARCHY, 0)

        def getRuleIndex(self):
            return SDBLParser.RULE_ordersByExpession

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdersByExpession" ):
                listener.enterOrdersByExpession(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdersByExpession" ):
                listener.exitOrdersByExpession(self)




    def ordersByExpession(self):

        localctx = SDBLParser.OrdersByExpessionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_ordersByExpession)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 380
            self.expression(0)
            self.state = 386
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [24, 30]:
                self.state = 381
                localctx.direction = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==24 or _la==30):
                    localctx.direction = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [39]:
                self.state = 382
                localctx.hierarchy = self.match(SDBLParser.HIERARCHY)
                self.state = 384
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==30:
                    self.state = 383
                    localctx.direction = self.match(SDBLParser.DESC)


                pass
            elif token in [-1, 5, 6, 7, 25, 54, 141, 154]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TotalByContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._totalsGroup = None # TotalsGroupContext
            self.totalsGroups = list() # of TotalsGroupContexts

        def TOTALS(self):
            return self.getToken(SDBLParser.TOTALS, 0)

        def BY_EN(self):
            return self.getToken(SDBLParser.BY_EN, 0)

        def PO_RU(self):
            return self.getToken(SDBLParser.PO_RU, 0)

        def totalsGroup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SDBLParser.TotalsGroupContext)
            else:
                return self.getTypedRuleContext(SDBLParser.TotalsGroupContext,i)


        def selectedFields(self):
            return self.getTypedRuleContext(SDBLParser.SelectedFieldsContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SDBLParser.COMMA)
            else:
                return self.getToken(SDBLParser.COMMA, i)

        def getRuleIndex(self):
            return SDBLParser.RULE_totalBy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTotalBy" ):
                listener.enterTotalBy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTotalBy" ):
                listener.exitTotalBy(self)




    def totalBy(self):

        localctx = SDBLParser.TotalByContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_totalBy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 388
            self.match(SDBLParser.TOTALS)
            self.state = 390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -303935709242653168) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 281418739449855) != 0):
                self.state = 389
                self.selectedFields()


            self.state = 392
            _la = self._input.LA(1)
            if not(_la==27 or _la==50):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 393
            localctx._totalsGroup = self.totalsGroup()
            localctx.totalsGroups.append(localctx._totalsGroup)
            self.state = 398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==7:
                self.state = 394
                self.match(SDBLParser.COMMA)
                self.state = 395
                localctx._totalsGroup = self.totalsGroup()
                localctx.totalsGroups.append(localctx._totalsGroup)
                self.state = 400
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TotalsGroupContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVERALL(self):
            return self.getToken(SDBLParser.OVERALL, 0)

        def expression(self):
            return self.getTypedRuleContext(SDBLParser.ExpressionContext,0)


        def periodic(self):
            return self.getTypedRuleContext(SDBLParser.PeriodicContext,0)


        def alias(self):
            return self.getTypedRuleContext(SDBLParser.AliasContext,0)


        def HIERARCHY(self):
            return self.getToken(SDBLParser.HIERARCHY, 0)

        def ONLY(self):
            return self.getToken(SDBLParser.ONLY, 0)

        def getRuleIndex(self):
            return SDBLParser.RULE_totalsGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTotalsGroup" ):
                listener.enterTotalsGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTotalsGroup" ):
                listener.exitTotalsGroup(self)




    def totalsGroup(self):

        localctx = SDBLParser.TotalsGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_totalsGroup)
        self._la = 0 # Token type
        try:
            self.state = 413
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [49]:
                self.enterOuterAlt(localctx, 1)
                self.state = 401
                self.match(SDBLParser.OVERALL)
                pass
            elif token in [4, 9, 10, 19, 28, 29, 32, 34, 36, 42, 45, 51, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 161, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175]:
                self.enterOuterAlt(localctx, 2)
                self.state = 402
                self.expression(0)
                self.state = 408
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
                if la_ == 1:
                    self.state = 404
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==89:
                        self.state = 403
                        self.match(SDBLParser.ONLY)


                    self.state = 406
                    self.match(SDBLParser.HIERARCHY)

                elif la_ == 2:
                    self.state = 407
                    self.periodic()


                self.state = 411
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -556190134450520064) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 281414981337087) != 0):
                    self.state = 410
                    self.alias()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PeriodicContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.periodType = None # Token
            self.first = None # ExpressionContext
            self.second = None # ExpressionContext

        def PERIODS(self):
            return self.getToken(SDBLParser.PERIODS, 0)

        def LPAREN(self):
            return self.getToken(SDBLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(SDBLParser.RPAREN, 0)

        def SECOND(self):
            return self.getToken(SDBLParser.SECOND, 0)

        def MINUTE(self):
            return self.getToken(SDBLParser.MINUTE, 0)

        def HOUR(self):
            return self.getToken(SDBLParser.HOUR, 0)

        def DAY(self):
            return self.getToken(SDBLParser.DAY, 0)

        def WEEK(self):
            return self.getToken(SDBLParser.WEEK, 0)

        def MONTH(self):
            return self.getToken(SDBLParser.MONTH, 0)

        def QUARTER(self):
            return self.getToken(SDBLParser.QUARTER, 0)

        def YEAR(self):
            return self.getToken(SDBLParser.YEAR, 0)

        def TENDAYS(self):
            return self.getToken(SDBLParser.TENDAYS, 0)

        def HALFYEAR(self):
            return self.getToken(SDBLParser.HALFYEAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SDBLParser.COMMA)
            else:
                return self.getToken(SDBLParser.COMMA, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SDBLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SDBLParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SDBLParser.RULE_periodic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodic" ):
                listener.enterPeriodic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodic" ):
                listener.exitPeriodic(self)




    def periodic(self):

        localctx = SDBLParser.PeriodicContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_periodic)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 415
            self.match(SDBLParser.PERIODS)
            self.state = 416
            self.match(SDBLParser.LPAREN)
            self.state = 417
            localctx.periodType = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 176059366686913) != 0)):
                localctx.periodType = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 420
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 418
                self.match(SDBLParser.COMMA)
                self.state = 419
                localctx.first = self.expression(0)


            self.state = 424
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 422
                self.match(SDBLParser.COMMA)
                self.state = 423
                localctx.second = self.expression(0)


            self.state = 426
            self.match(SDBLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.mdoName = None # IdentifierContext
            self._identifier = None # IdentifierContext
            self.columnNames = list() # of IdentifierContexts

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SDBLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SDBLParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(SDBLParser.DOT)
            else:
                return self.getToken(SDBLParser.DOT, i)

        def mdo(self):
            return self.getTypedRuleContext(SDBLParser.MdoContext,0)


        def getRuleIndex(self):
            return SDBLParser.RULE_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn" ):
                listener.enterColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn" ):
                listener.exitColumn(self)




    def column(self):

        localctx = SDBLParser.ColumnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_column)
        try:
            self.state = 443
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 428
                localctx.mdoName = self.identifier()
                self.state = 431 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 429
                        self.match(SDBLParser.DOT)
                        self.state = 430
                        localctx._identifier = self.identifier()
                        localctx.columnNames.append(localctx._identifier)

                    else:
                        raise NoViableAltException(self)
                    self.state = 433 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 435
                localctx._identifier = self.identifier()
                localctx.columnNames.append(localctx._identifier)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 436
                self.mdo()
                self.state = 439 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 437
                        self.match(SDBLParser.DOT)
                        self.state = 438
                        localctx._identifier = self.identifier()
                        localctx.columnNames.append(localctx._identifier)

                    else:
                        raise NoViableAltException(self)
                    self.state = 441 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,46,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.binaryOperation = None # Token

        def primitiveExpression(self):
            return self.getTypedRuleContext(SDBLParser.PrimitiveExpressionContext,0)


        def functionCall(self):
            return self.getTypedRuleContext(SDBLParser.FunctionCallContext,0)


        def caseExpression(self):
            return self.getTypedRuleContext(SDBLParser.CaseExpressionContext,0)


        def column(self):
            return self.getTypedRuleContext(SDBLParser.ColumnContext,0)


        def bracketExpression(self):
            return self.getTypedRuleContext(SDBLParser.BracketExpressionContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(SDBLParser.UnaryExpressionContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SDBLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SDBLParser.ExpressionContext,i)


        def MUL(self):
            return self.getToken(SDBLParser.MUL, 0)

        def QUOTIENT(self):
            return self.getToken(SDBLParser.QUOTIENT, 0)

        def PLUS(self):
            return self.getToken(SDBLParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SDBLParser.MINUS, 0)

        def getRuleIndex(self):
            return SDBLParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SDBLParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 52
        self.enterRecursionRule(localctx, 52, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 452
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 446
                self.primitiveExpression()
                pass

            elif la_ == 2:
                self.state = 447
                self.functionCall()
                pass

            elif la_ == 3:
                self.state = 448
                self.caseExpression()
                pass

            elif la_ == 4:
                self.state = 449
                self.column()
                pass

            elif la_ == 5:
                self.state = 450
                self.bracketExpression()
                pass

            elif la_ == 6:
                self.state = 451
                self.unaryExpression()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 459
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SDBLParser.ExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                    self.state = 454
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 455
                    localctx.binaryOperation = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 198144) != 0)):
                        localctx.binaryOperation = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 456
                    self.expression(2) 
                self.state = 461
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PrimitiveExpressionContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.booleanValue = None # Token
            self.year = None # DatePartContext
            self.month = None # DatePartContext
            self.day = None # DatePartContext
            self.hour = None # DatePartContext
            self.minute = None # DatePartContext
            self.second = None # DatePartContext

        def NULL(self):
            return self.getToken(SDBLParser.NULL, 0)

        def UNDEFINED(self):
            return self.getToken(SDBLParser.UNDEFINED, 0)

        def multiString(self):
            return self.getTypedRuleContext(SDBLParser.MultiStringContext,0)


        def DECIMAL(self):
            return self.getToken(SDBLParser.DECIMAL, 0)

        def FLOAT(self):
            return self.getToken(SDBLParser.FLOAT, 0)

        def TRUE(self):
            return self.getToken(SDBLParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(SDBLParser.FALSE, 0)

        def DATETIME(self):
            return self.getToken(SDBLParser.DATETIME, 0)

        def LPAREN(self):
            return self.getToken(SDBLParser.LPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SDBLParser.COMMA)
            else:
                return self.getToken(SDBLParser.COMMA, i)

        def RPAREN(self):
            return self.getToken(SDBLParser.RPAREN, 0)

        def datePart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SDBLParser.DatePartContext)
            else:
                return self.getTypedRuleContext(SDBLParser.DatePartContext,i)


        def parameter(self):
            return self.getTypedRuleContext(SDBLParser.ParameterContext,0)


        def TYPE(self):
            return self.getToken(SDBLParser.TYPE, 0)

        def mdo(self):
            return self.getTypedRuleContext(SDBLParser.MdoContext,0)


        def STRING(self):
            return self.getToken(SDBLParser.STRING, 0)

        def BOOLEAN(self):
            return self.getToken(SDBLParser.BOOLEAN, 0)

        def DATE(self):
            return self.getToken(SDBLParser.DATE, 0)

        def NUMBER(self):
            return self.getToken(SDBLParser.NUMBER, 0)

        def getRuleIndex(self):
            return SDBLParser.RULE_primitiveExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitiveExpression" ):
                listener.enterPrimitiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitiveExpression" ):
                listener.exitPrimitiveExpression(self)




    def primitiveExpression(self):

        localctx = SDBLParser.PrimitiveExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_primitiveExpression)
        self._la = 0 # Token type
        try:
            self.state = 497
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [45]:
                self.enterOuterAlt(localctx, 1)
                self.state = 462
                self.match(SDBLParser.NULL)
                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 2)
                self.state = 463
                self.match(SDBLParser.UNDEFINED)
                pass
            elif token in [159]:
                self.enterOuterAlt(localctx, 3)
                self.state = 464
                self.multiString()
                pass
            elif token in [157]:
                self.enterOuterAlt(localctx, 4)
                self.state = 465
                self.match(SDBLParser.DECIMAL)
                pass
            elif token in [158]:
                self.enterOuterAlt(localctx, 5)
                self.state = 466
                self.match(SDBLParser.FLOAT)
                pass
            elif token in [36, 55]:
                self.enterOuterAlt(localctx, 6)
                self.state = 467
                localctx.booleanValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==36 or _la==55):
                    localctx.booleanValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [70]:
                self.enterOuterAlt(localctx, 7)
                self.state = 468
                self.match(SDBLParser.DATETIME)
                self.state = 469
                self.match(SDBLParser.LPAREN)
                self.state = 470
                localctx.year = self.datePart()
                self.state = 471
                self.match(SDBLParser.COMMA)
                self.state = 472
                localctx.month = self.datePart()
                self.state = 473
                self.match(SDBLParser.COMMA)
                self.state = 474
                localctx.day = self.datePart()
                self.state = 482
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==7:
                    self.state = 475
                    self.match(SDBLParser.COMMA)
                    self.state = 476
                    localctx.hour = self.datePart()
                    self.state = 477
                    self.match(SDBLParser.COMMA)
                    self.state = 478
                    localctx.minute = self.datePart()
                    self.state = 479
                    self.match(SDBLParser.COMMA)
                    self.state = 480
                    localctx.second = self.datePart()


                self.state = 484
                self.match(SDBLParser.RPAREN)
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 8)
                self.state = 486
                self.parameter()
                pass
            elif token in [112]:
                self.enterOuterAlt(localctx, 9)
                self.state = 487
                self.match(SDBLParser.TYPE)
                self.state = 488
                self.match(SDBLParser.LPAREN)
                self.state = 494
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137]:
                    self.state = 489
                    self.mdo()
                    pass
                elif token in [101]:
                    self.state = 490
                    self.match(SDBLParser.STRING)
                    pass
                elif token in [64]:
                    self.state = 491
                    self.match(SDBLParser.BOOLEAN)
                    pass
                elif token in [67]:
                    self.state = 492
                    self.match(SDBLParser.DATE)
                    pass
                elif token in [87]:
                    self.state = 493
                    self.match(SDBLParser.NUMBER)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 496
                self.match(SDBLParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseExpressionContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.caseExp = None # ExpressionContext
            self.elseExp = None # LogicalExpressionContext

        def CASE(self):
            return self.getToken(SDBLParser.CASE, 0)

        def END(self):
            return self.getToken(SDBLParser.END, 0)

        def expression(self):
            return self.getTypedRuleContext(SDBLParser.ExpressionContext,0)


        def caseBranch(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SDBLParser.CaseBranchContext)
            else:
                return self.getTypedRuleContext(SDBLParser.CaseBranchContext,i)


        def ELSE(self):
            return self.getToken(SDBLParser.ELSE, 0)

        def logicalExpression(self):
            return self.getTypedRuleContext(SDBLParser.LogicalExpressionContext,0)


        def getRuleIndex(self):
            return SDBLParser.RULE_caseExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseExpression" ):
                listener.enterCaseExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseExpression" ):
                listener.exitCaseExpression(self)




    def caseExpression(self):

        localctx = SDBLParser.CaseExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_caseExpression)
        self._la = 0 # Token type
        try:
            self.state = 531
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 499
                self.match(SDBLParser.CASE)
                self.state = 500
                localctx.caseExp = self.expression(0)
                self.state = 502 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 501
                    self.caseBranch()
                    self.state = 504 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==57):
                        break

                self.state = 508
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==33:
                    self.state = 506
                    self.match(SDBLParser.ELSE)
                    self.state = 507
                    localctx.elseExp = self.logicalExpression()


                self.state = 510
                self.match(SDBLParser.END)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 512
                self.match(SDBLParser.CASE)
                self.state = 514 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 513
                    self.caseBranch()
                    self.state = 516 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==57):
                        break

                self.state = 520
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==33:
                    self.state = 518
                    self.match(SDBLParser.ELSE)
                    self.state = 519
                    localctx.elseExp = self.logicalExpression()


                self.state = 522
                self.match(SDBLParser.END)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 524
                self.caseBranch()
                self.state = 527
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==33:
                    self.state = 525
                    self.match(SDBLParser.ELSE)
                    self.state = 526
                    localctx.elseExp = self.logicalExpression()


                self.state = 529
                self.match(SDBLParser.END)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseBranchContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(SDBLParser.WHEN, 0)

        def logicalExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SDBLParser.LogicalExpressionContext)
            else:
                return self.getTypedRuleContext(SDBLParser.LogicalExpressionContext,i)


        def THEN(self):
            return self.getToken(SDBLParser.THEN, 0)

        def getRuleIndex(self):
            return SDBLParser.RULE_caseBranch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseBranch" ):
                listener.enterCaseBranch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseBranch" ):
                listener.exitCaseBranch(self)




    def caseBranch(self):

        localctx = SDBLParser.CaseBranchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_caseBranch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 533
            self.match(SDBLParser.WHEN)
            self.state = 534
            self.logicalExpression()
            self.state = 535
            self.match(SDBLParser.THEN)
            self.state = 536
            self.logicalExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BracketExpressionContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(SDBLParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(SDBLParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(SDBLParser.RPAREN, 0)

        def subquery(self):
            return self.getTypedRuleContext(SDBLParser.SubqueryContext,0)


        def getRuleIndex(self):
            return SDBLParser.RULE_bracketExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBracketExpression" ):
                listener.enterBracketExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBracketExpression" ):
                listener.exitBracketExpression(self)




    def bracketExpression(self):

        localctx = SDBLParser.BracketExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_bracketExpression)
        try:
            self.state = 546
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 538
                self.match(SDBLParser.LPAREN)
                self.state = 539
                self.expression(0)
                self.state = 540
                self.match(SDBLParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 542
                self.match(SDBLParser.LPAREN)
                self.state = 543
                self.subquery()
                self.state = 544
                self.match(SDBLParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryExpressionContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sign(self):
            return self.getTypedRuleContext(SDBLParser.SignContext,0)


        def expression(self):
            return self.getTypedRuleContext(SDBLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SDBLParser.RULE_unaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpression" ):
                listener.enterUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpression" ):
                listener.exitUnaryExpression(self)




    def unaryExpression(self):

        localctx = SDBLParser.UnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_unaryExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 548
            self.sign()
            self.state = 549
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._identifier = None # IdentifierContext
            self.columnNames = list() # of IdentifierContexts

        def aggregateFunctions(self):
            return self.getTypedRuleContext(SDBLParser.AggregateFunctionsContext,0)


        def builtInFunctions(self):
            return self.getTypedRuleContext(SDBLParser.BuiltInFunctionsContext,0)


        def valueFunction(self):
            return self.getTypedRuleContext(SDBLParser.ValueFunctionContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(SDBLParser.DOT)
            else:
                return self.getToken(SDBLParser.DOT, i)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SDBLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SDBLParser.IdentifierContext,i)


        def castFunction(self):
            return self.getTypedRuleContext(SDBLParser.CastFunctionContext,0)


        def getRuleIndex(self):
            return SDBLParser.RULE_functionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)




    def functionCall(self):

        localctx = SDBLParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_functionCall)
        try:
            self.state = 569
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [62, 66, 83, 84, 106]:
                self.enterOuterAlt(localctx, 1)
                self.state = 551
                self.aggregateFunctions()
                pass
            elif token in [42, 59, 60, 61, 63, 65, 68, 69, 71, 72, 75, 76, 78, 79, 80, 81, 82, 85, 86, 88, 92, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 109, 110, 111, 113, 115, 116, 117, 118, 119, 142]:
                self.enterOuterAlt(localctx, 2)
                self.state = 552
                self.builtInFunctions()
                pass
            elif token in [114]:
                self.enterOuterAlt(localctx, 3)
                self.state = 553
                self.valueFunction()
                self.state = 558
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 554
                        self.match(SDBLParser.DOT)
                        self.state = 555
                        localctx._identifier = self.identifier()
                        localctx.columnNames.append(localctx._identifier) 
                    self.state = 560
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

                pass
            elif token in [29]:
                self.enterOuterAlt(localctx, 4)
                self.state = 561
                self.castFunction()
                self.state = 566
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,61,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 562
                        self.match(SDBLParser.DOT)
                        self.state = 563
                        localctx._identifier = self.identifier()
                        localctx.columnNames.append(localctx._identifier) 
                    self.state = 568
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,61,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BuiltInFunctionsContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.doCall = None # Token
            self.string = None # ExpressionContext
            self.charNo = None # ExpressionContext
            self.count = None # ExpressionContext
            self.date = None # ExpressionContext
            self.periodType = None # Token
            self.firstdate = None # ExpressionContext
            self.seconddate = None # ExpressionContext
            self.value = None # ExpressionContext
            self.first = None # LogicalExpressionContext
            self.second = None # LogicalExpressionContext
            self.decimal = None # ExpressionContext
            self.precise = None # ExpressionContext
            self.substring1 = None # ExpressionContext

        def LPAREN(self):
            return self.getToken(SDBLParser.LPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SDBLParser.COMMA)
            else:
                return self.getToken(SDBLParser.COMMA, i)

        def RPAREN(self):
            return self.getToken(SDBLParser.RPAREN, 0)

        def SUBSTRING(self):
            return self.getToken(SDBLParser.SUBSTRING, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SDBLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SDBLParser.ExpressionContext,i)


        def YEAR(self):
            return self.getToken(SDBLParser.YEAR, 0)

        def QUARTER(self):
            return self.getToken(SDBLParser.QUARTER, 0)

        def MONTH(self):
            return self.getToken(SDBLParser.MONTH, 0)

        def DAYOFYEAR(self):
            return self.getToken(SDBLParser.DAYOFYEAR, 0)

        def DAY(self):
            return self.getToken(SDBLParser.DAY, 0)

        def WEEK(self):
            return self.getToken(SDBLParser.WEEK, 0)

        def WEEKDAY(self):
            return self.getToken(SDBLParser.WEEKDAY, 0)

        def HOUR(self):
            return self.getToken(SDBLParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(SDBLParser.MINUTE, 0)

        def SECOND(self):
            return self.getToken(SDBLParser.SECOND, 0)

        def BEGINOFPERIOD(self):
            return self.getToken(SDBLParser.BEGINOFPERIOD, 0)

        def ENDOFPERIOD(self):
            return self.getToken(SDBLParser.ENDOFPERIOD, 0)

        def TENDAYS(self):
            return self.getToken(SDBLParser.TENDAYS, 0)

        def HALFYEAR(self):
            return self.getToken(SDBLParser.HALFYEAR, 0)

        def DATEADD(self):
            return self.getToken(SDBLParser.DATEADD, 0)

        def DATEDIFF(self):
            return self.getToken(SDBLParser.DATEDIFF, 0)

        def VALUETYPE(self):
            return self.getToken(SDBLParser.VALUETYPE, 0)

        def PRESENTATION(self):
            return self.getToken(SDBLParser.PRESENTATION, 0)

        def REFPRESENTATION(self):
            return self.getToken(SDBLParser.REFPRESENTATION, 0)

        def GROUPEDBY(self):
            return self.getToken(SDBLParser.GROUPEDBY, 0)

        def ISNULL(self):
            return self.getToken(SDBLParser.ISNULL, 0)

        def logicalExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SDBLParser.LogicalExpressionContext)
            else:
                return self.getTypedRuleContext(SDBLParser.LogicalExpressionContext,i)


        def ACOS(self):
            return self.getToken(SDBLParser.ACOS, 0)

        def ASIN(self):
            return self.getToken(SDBLParser.ASIN, 0)

        def ATAN(self):
            return self.getToken(SDBLParser.ATAN, 0)

        def COS(self):
            return self.getToken(SDBLParser.COS, 0)

        def SIN(self):
            return self.getToken(SDBLParser.SIN, 0)

        def TAN(self):
            return self.getToken(SDBLParser.TAN, 0)

        def LOG(self):
            return self.getToken(SDBLParser.LOG, 0)

        def LOG10(self):
            return self.getToken(SDBLParser.LOG10, 0)

        def EXP(self):
            return self.getToken(SDBLParser.EXP, 0)

        def POW(self):
            return self.getToken(SDBLParser.POW, 0)

        def SQRT(self):
            return self.getToken(SDBLParser.SQRT, 0)

        def INT(self):
            return self.getToken(SDBLParser.INT, 0)

        def LOWER(self):
            return self.getToken(SDBLParser.LOWER, 0)

        def STRINGLENGTH(self):
            return self.getToken(SDBLParser.STRINGLENGTH, 0)

        def TRIMALL(self):
            return self.getToken(SDBLParser.TRIMALL, 0)

        def TRIML(self):
            return self.getToken(SDBLParser.TRIML, 0)

        def TRIMR(self):
            return self.getToken(SDBLParser.TRIMR, 0)

        def UPPER(self):
            return self.getToken(SDBLParser.UPPER, 0)

        def ROUND(self):
            return self.getToken(SDBLParser.ROUND, 0)

        def STOREDDATASIZE(self):
            return self.getToken(SDBLParser.STOREDDATASIZE, 0)

        def UUID(self):
            return self.getToken(SDBLParser.UUID, 0)

        def STRFIND(self):
            return self.getToken(SDBLParser.STRFIND, 0)

        def STRREPLACE(self):
            return self.getToken(SDBLParser.STRREPLACE, 0)

        def getRuleIndex(self):
            return SDBLParser.RULE_builtInFunctions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuiltInFunctions" ):
                listener.enterBuiltInFunctions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuiltInFunctions" ):
                listener.exitBuiltInFunctions(self)




    def builtInFunctions(self):

        localctx = SDBLParser.BuiltInFunctionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_builtInFunctions)
        self._la = 0 # Token type
        try:
            self.state = 660
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [105]:
                self.enterOuterAlt(localctx, 1)
                self.state = 571
                localctx.doCall = self.match(SDBLParser.SUBSTRING)
                self.state = 572
                self.match(SDBLParser.LPAREN)
                self.state = 573
                localctx.string = self.expression(0)
                self.state = 574
                self.match(SDBLParser.COMMA)
                self.state = 575
                localctx.charNo = self.expression(0)
                self.state = 576
                self.match(SDBLParser.COMMA)
                self.state = 577
                localctx.count = self.expression(0)
                self.state = 578
                self.match(SDBLParser.RPAREN)
                pass
            elif token in [71, 72, 78, 85, 86, 88, 97, 116, 117, 118]:
                self.enterOuterAlt(localctx, 2)
                self.state = 580
                localctx.doCall = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 246290671911043) != 0)):
                    localctx.doCall = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 581
                self.match(SDBLParser.LPAREN)
                self.state = 582
                localctx.date = self.expression(0)
                self.state = 583
                self.match(SDBLParser.RPAREN)
                pass
            elif token in [63, 75]:
                self.enterOuterAlt(localctx, 3)
                self.state = 585
                localctx.doCall = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==63 or _la==75):
                    localctx.doCall = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 586
                self.match(SDBLParser.LPAREN)
                self.state = 587
                localctx.date = self.expression(0)
                self.state = 588
                self.match(SDBLParser.COMMA)
                self.state = 589
                localctx.periodType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 176059299578049) != 0)):
                    localctx.periodType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 590
                self.match(SDBLParser.RPAREN)
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 4)
                self.state = 592
                localctx.doCall = self.match(SDBLParser.DATEADD)
                self.state = 593
                self.match(SDBLParser.LPAREN)
                self.state = 594
                localctx.date = self.expression(0)
                self.state = 595
                self.match(SDBLParser.COMMA)
                self.state = 596
                localctx.periodType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 176059366686913) != 0)):
                    localctx.periodType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 597
                self.match(SDBLParser.COMMA)
                self.state = 598
                localctx.count = self.expression(0)
                self.state = 599
                self.match(SDBLParser.RPAREN)
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 5)
                self.state = 601
                localctx.doCall = self.match(SDBLParser.DATEDIFF)
                self.state = 602
                self.match(SDBLParser.LPAREN)
                self.state = 603
                localctx.firstdate = self.expression(0)
                self.state = 604
                self.match(SDBLParser.COMMA)
                self.state = 605
                localctx.seconddate = self.expression(0)
                self.state = 606
                self.match(SDBLParser.COMMA)
                self.state = 607
                localctx.periodType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 140737555644545) != 0)):
                    localctx.periodType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 608
                self.match(SDBLParser.RPAREN)
                pass
            elif token in [92, 94, 115, 142]:
                self.enterOuterAlt(localctx, 6)
                self.state = 610
                localctx.doCall = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 92)) & ~0x3f) == 0 and ((1 << (_la - 92)) & 1125899915231237) != 0)):
                    localctx.doCall = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 611
                self.match(SDBLParser.LPAREN)
                self.state = 612
                localctx.value = self.expression(0)
                self.state = 613
                self.match(SDBLParser.RPAREN)
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 7)
                self.state = 615
                localctx.doCall = self.match(SDBLParser.ISNULL)
                self.state = 616
                self.match(SDBLParser.LPAREN)
                self.state = 617
                localctx.first = self.logicalExpression()
                self.state = 618
                self.match(SDBLParser.COMMA)
                self.state = 619
                localctx.second = self.logicalExpression()
                self.state = 620
                self.match(SDBLParser.RPAREN)
                pass
            elif token in [59, 60, 61, 65, 76, 79, 80, 81, 95, 98, 99, 107]:
                self.enterOuterAlt(localctx, 8)
                self.state = 622
                localctx.doCall = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 59)) & ~0x3f) == 0 and ((1 << (_la - 59)) & 283192971100231) != 0)):
                    localctx.doCall = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 623
                self.match(SDBLParser.LPAREN)
                self.state = 624
                localctx.decimal = self.expression(0)
                self.state = 625
                self.match(SDBLParser.RPAREN)
                pass
            elif token in [82, 102, 109, 110, 111, 113]:
                self.enterOuterAlt(localctx, 9)
                self.state = 627
                localctx.doCall = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & 3088056321) != 0)):
                    localctx.doCall = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 628
                self.match(SDBLParser.LPAREN)
                self.state = 629
                localctx.string = self.expression(0)
                self.state = 630
                self.match(SDBLParser.RPAREN)
                pass
            elif token in [96]:
                self.enterOuterAlt(localctx, 10)
                self.state = 632
                localctx.doCall = self.match(SDBLParser.ROUND)
                self.state = 633
                self.match(SDBLParser.LPAREN)
                self.state = 634
                localctx.decimal = self.expression(0)
                self.state = 635
                self.match(SDBLParser.COMMA)
                self.state = 636
                localctx.precise = self.expression(0)
                self.state = 637
                self.match(SDBLParser.RPAREN)
                pass
            elif token in [100, 119]:
                self.enterOuterAlt(localctx, 11)
                self.state = 639
                localctx.doCall = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==100 or _la==119):
                    localctx.doCall = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 640
                self.match(SDBLParser.LPAREN)
                self.state = 641
                localctx.value = self.expression(0)
                self.state = 642
                self.match(SDBLParser.RPAREN)
                pass
            elif token in [103]:
                self.enterOuterAlt(localctx, 12)
                self.state = 644
                localctx.doCall = self.match(SDBLParser.STRFIND)
                self.state = 645
                self.match(SDBLParser.LPAREN)
                self.state = 646
                localctx.string = self.expression(0)
                self.state = 647
                self.match(SDBLParser.COMMA)
                self.state = 648
                localctx.substring1 = self.expression(0)
                self.state = 649
                self.match(SDBLParser.RPAREN)
                pass
            elif token in [104]:
                self.enterOuterAlt(localctx, 13)
                self.state = 651
                localctx.doCall = self.match(SDBLParser.STRREPLACE)
                self.state = 652
                self.match(SDBLParser.LPAREN)
                self.state = 653
                localctx.string = self.expression(0)
                self.state = 654
                self.match(SDBLParser.COMMA)
                self.state = 655
                localctx.substring1 = self.expression(0)
                self.state = 656
                self.match(SDBLParser.COMMA)
                self.state = 657
                localctx.substring1 = self.expression(0)
                self.state = 658
                self.match(SDBLParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AggregateFunctionsContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.doCall = None # Token

        def LPAREN(self):
            return self.getToken(SDBLParser.LPAREN, 0)

        def logicalExpression(self):
            return self.getTypedRuleContext(SDBLParser.LogicalExpressionContext,0)


        def RPAREN(self):
            return self.getToken(SDBLParser.RPAREN, 0)

        def SUM(self):
            return self.getToken(SDBLParser.SUM, 0)

        def AVG(self):
            return self.getToken(SDBLParser.AVG, 0)

        def MIN(self):
            return self.getToken(SDBLParser.MIN, 0)

        def MAX(self):
            return self.getToken(SDBLParser.MAX, 0)

        def COUNT(self):
            return self.getToken(SDBLParser.COUNT, 0)

        def MUL(self):
            return self.getToken(SDBLParser.MUL, 0)

        def DISTINCT(self):
            return self.getToken(SDBLParser.DISTINCT, 0)

        def getRuleIndex(self):
            return SDBLParser.RULE_aggregateFunctions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregateFunctions" ):
                listener.enterAggregateFunctions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregateFunctions" ):
                listener.exitAggregateFunctions(self)




    def aggregateFunctions(self):

        localctx = SDBLParser.AggregateFunctionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_aggregateFunctions)
        self._la = 0 # Token type
        try:
            self.state = 677
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [62, 83, 84, 106]:
                self.enterOuterAlt(localctx, 1)
                self.state = 662
                localctx.doCall = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 62)) & ~0x3f) == 0 and ((1 << (_la - 62)) & 17592192335873) != 0)):
                    localctx.doCall = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 663
                self.match(SDBLParser.LPAREN)
                self.state = 664
                self.logicalExpression()
                self.state = 665
                self.match(SDBLParser.RPAREN)
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 2)
                self.state = 667
                localctx.doCall = self.match(SDBLParser.COUNT)
                self.state = 668
                self.match(SDBLParser.LPAREN)
                self.state = 674
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [4, 9, 10, 19, 28, 29, 31, 32, 34, 36, 42, 44, 45, 51, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 161, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175]:
                    self.state = 670
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==31:
                        self.state = 669
                        self.match(SDBLParser.DISTINCT)


                    self.state = 672
                    self.logicalExpression()
                    pass
                elif token in [16]:
                    self.state = 673
                    self.match(SDBLParser.MUL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 676
                self.match(SDBLParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueFunctionContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.doCall = None # Token
            self.type_ = None # Token
            self.mdoName = None # IdentifierContext
            self.emptyFer = None # Token
            self.predefinedName = None # IdentifierContext
            self.routePointName = None # IdentifierContext
            self.systemName = None # IdentifierContext

        def LPAREN(self):
            return self.getToken(SDBLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(SDBLParser.RPAREN, 0)

        def VALUE(self):
            return self.getToken(SDBLParser.VALUE, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(SDBLParser.DOT)
            else:
                return self.getToken(SDBLParser.DOT, i)

        def ROUTEPOINT_FIELD(self):
            return self.getToken(SDBLParser.ROUTEPOINT_FIELD, 0)

        def mdo(self):
            return self.getTypedRuleContext(SDBLParser.MdoContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SDBLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SDBLParser.IdentifierContext,i)


        def EMPTYREF(self):
            return self.getToken(SDBLParser.EMPTYREF, 0)

        def BUSINESS_PROCESS_TYPE(self):
            return self.getToken(SDBLParser.BUSINESS_PROCESS_TYPE, 0)

        def CATALOG_TYPE(self):
            return self.getToken(SDBLParser.CATALOG_TYPE, 0)

        def DOCUMENT_TYPE(self):
            return self.getToken(SDBLParser.DOCUMENT_TYPE, 0)

        def FILTER_CRITERION_TYPE(self):
            return self.getToken(SDBLParser.FILTER_CRITERION_TYPE, 0)

        def EXCHANGE_PLAN_TYPE(self):
            return self.getToken(SDBLParser.EXCHANGE_PLAN_TYPE, 0)

        def ENUM_TYPE(self):
            return self.getToken(SDBLParser.ENUM_TYPE, 0)

        def CHART_OF_CHARACTERISTIC_TYPES_TYPE(self):
            return self.getToken(SDBLParser.CHART_OF_CHARACTERISTIC_TYPES_TYPE, 0)

        def CHART_OF_ACCOUNTS_TYPE(self):
            return self.getToken(SDBLParser.CHART_OF_ACCOUNTS_TYPE, 0)

        def CHART_OF_CALCULATION_TYPES_TYPE(self):
            return self.getToken(SDBLParser.CHART_OF_CALCULATION_TYPES_TYPE, 0)

        def TASK_TYPE(self):
            return self.getToken(SDBLParser.TASK_TYPE, 0)

        def EXTERNAL_DATA_SOURCE_TYPE(self):
            return self.getToken(SDBLParser.EXTERNAL_DATA_SOURCE_TYPE, 0)

        def getRuleIndex(self):
            return SDBLParser.RULE_valueFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueFunction" ):
                listener.enterValueFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueFunction" ):
                listener.exitValueFunction(self)




    def valueFunction(self):

        localctx = SDBLParser.ValueFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_valueFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 679
            localctx.doCall = self.match(SDBLParser.VALUE)
            self.state = 680
            self.match(SDBLParser.LPAREN)
            self.state = 708
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.state = 681
                localctx.type_ = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & 40637) != 0)):
                    localctx.type_ = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 682
                self.match(SDBLParser.DOT)
                self.state = 683
                localctx.mdoName = self.identifier()
                self.state = 684
                self.match(SDBLParser.DOT)
                self.state = 685
                localctx.emptyFer = self.match(SDBLParser.EMPTYREF)
                pass

            elif la_ == 2:
                self.state = 687
                localctx.type_ = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & 143) != 0)):
                    localctx.type_ = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 688
                self.match(SDBLParser.DOT)
                self.state = 689
                localctx.mdoName = self.identifier()
                self.state = 690
                self.match(SDBLParser.DOT)
                self.state = 691
                localctx.predefinedName = self.identifier()
                pass

            elif la_ == 3:
                self.state = 693
                localctx.type_ = self.match(SDBLParser.BUSINESS_PROCESS_TYPE)
                self.state = 694
                self.match(SDBLParser.DOT)
                self.state = 695
                localctx.mdoName = self.identifier()
                self.state = 696
                self.match(SDBLParser.DOT)
                self.state = 697
                self.match(SDBLParser.ROUTEPOINT_FIELD)
                self.state = 698
                self.match(SDBLParser.DOT)
                self.state = 699
                localctx.routePointName = self.identifier()
                pass

            elif la_ == 4:
                self.state = 701
                localctx.systemName = self.identifier()
                self.state = 702
                self.match(SDBLParser.DOT)
                self.state = 703
                localctx.predefinedName = self.identifier()
                pass

            elif la_ == 5:
                self.state = 705
                self.mdo()
                self.state = 706
                self.match(SDBLParser.DOT)
                pass


            self.state = 710
            self.match(SDBLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastFunctionContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.doCall = None # Token
            self.value = None # ExpressionContext
            self.type_ = None # Token
            self.len_ = None # Token
            self.prec = None # Token

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SDBLParser.LPAREN)
            else:
                return self.getToken(SDBLParser.LPAREN, i)

        def AS(self):
            return self.getToken(SDBLParser.AS, 0)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SDBLParser.RPAREN)
            else:
                return self.getToken(SDBLParser.RPAREN, i)

        def CAST(self):
            return self.getToken(SDBLParser.CAST, 0)

        def expression(self):
            return self.getTypedRuleContext(SDBLParser.ExpressionContext,0)


        def mdo(self):
            return self.getTypedRuleContext(SDBLParser.MdoContext,0)


        def BOOLEAN(self):
            return self.getToken(SDBLParser.BOOLEAN, 0)

        def DATE(self):
            return self.getToken(SDBLParser.DATE, 0)

        def NUMBER(self):
            return self.getToken(SDBLParser.NUMBER, 0)

        def STRING(self):
            return self.getToken(SDBLParser.STRING, 0)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(SDBLParser.DECIMAL)
            else:
                return self.getToken(SDBLParser.DECIMAL, i)

        def COMMA(self):
            return self.getToken(SDBLParser.COMMA, 0)

        def getRuleIndex(self):
            return SDBLParser.RULE_castFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastFunction" ):
                listener.enterCastFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastFunction" ):
                listener.exitCastFunction(self)




    def castFunction(self):

        localctx = SDBLParser.CastFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_castFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 712
            localctx.doCall = self.match(SDBLParser.CAST)
            self.state = 713
            self.match(SDBLParser.LPAREN)
            self.state = 714
            localctx.value = self.expression(0)
            self.state = 715
            self.match(SDBLParser.AS)
            self.state = 735
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [64]:
                self.state = 716
                localctx.type_ = self.match(SDBLParser.BOOLEAN)
                pass
            elif token in [87]:
                self.state = 717
                localctx.type_ = self.match(SDBLParser.NUMBER)
                self.state = 725
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==4:
                    self.state = 718
                    self.match(SDBLParser.LPAREN)
                    self.state = 719
                    localctx.len_ = self.match(SDBLParser.DECIMAL)
                    self.state = 722
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==7:
                        self.state = 720
                        self.match(SDBLParser.COMMA)
                        self.state = 721
                        localctx.prec = self.match(SDBLParser.DECIMAL)


                    self.state = 724
                    self.match(SDBLParser.RPAREN)


                pass
            elif token in [101]:
                self.state = 727
                localctx.type_ = self.match(SDBLParser.STRING)
                self.state = 731
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==4:
                    self.state = 728
                    self.match(SDBLParser.LPAREN)
                    self.state = 729
                    localctx.len_ = self.match(SDBLParser.DECIMAL)
                    self.state = 730
                    self.match(SDBLParser.RPAREN)


                pass
            elif token in [67]:
                self.state = 733
                localctx.type_ = self.match(SDBLParser.DATE)
                pass
            elif token in [120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137]:
                self.state = 734
                self.mdo()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 737
            self.match(SDBLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalExpressionContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._predicate = None # PredicateContext
            self.condidions = list() # of PredicateContexts

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SDBLParser.PredicateContext)
            else:
                return self.getTypedRuleContext(SDBLParser.PredicateContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(SDBLParser.AND)
            else:
                return self.getToken(SDBLParser.AND, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(SDBLParser.OR)
            else:
                return self.getToken(SDBLParser.OR, i)

        def getRuleIndex(self):
            return SDBLParser.RULE_logicalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalExpression" ):
                listener.enterLogicalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalExpression" ):
                listener.exitLogicalExpression(self)




    def logicalExpression(self):

        localctx = SDBLParser.LogicalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_logicalExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 739
            localctx._predicate = self.predicate()
            localctx.condidions.append(localctx._predicate)
            self.state = 744
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==22 or _la==48:
                self.state = 740
                _la = self._input.LA(1)
                if not(_la==22 or _la==48):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 741
                localctx._predicate = self.predicate()
                localctx.condidions.append(localctx._predicate)
                self.state = 746
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredicateContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.booleanPredicate = None # ExpressionContext

        def likePredicate(self):
            return self.getTypedRuleContext(SDBLParser.LikePredicateContext,0)


        def isNullPredicate(self):
            return self.getTypedRuleContext(SDBLParser.IsNullPredicateContext,0)


        def comparePredicate(self):
            return self.getTypedRuleContext(SDBLParser.ComparePredicateContext,0)


        def betweenPredicate(self):
            return self.getTypedRuleContext(SDBLParser.BetweenPredicateContext,0)


        def inPredicate(self):
            return self.getTypedRuleContext(SDBLParser.InPredicateContext,0)


        def refsPredicate(self):
            return self.getTypedRuleContext(SDBLParser.RefsPredicateContext,0)


        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(SDBLParser.NOT)
            else:
                return self.getToken(SDBLParser.NOT, i)

        def expression(self):
            return self.getTypedRuleContext(SDBLParser.ExpressionContext,0)


        def LPAREN(self):
            return self.getToken(SDBLParser.LPAREN, 0)

        def logicalExpression(self):
            return self.getTypedRuleContext(SDBLParser.LogicalExpressionContext,0)


        def RPAREN(self):
            return self.getToken(SDBLParser.RPAREN, 0)

        def getRuleIndex(self):
            return SDBLParser.RULE_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicate" ):
                listener.enterPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicate" ):
                listener.exitPredicate(self)




    def predicate(self):

        localctx = SDBLParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_predicate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 750
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==44:
                self.state = 747
                self.match(SDBLParser.NOT)
                self.state = 752
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 764
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.state = 753
                localctx.booleanPredicate = self.expression(0)
                pass

            elif la_ == 2:
                self.state = 754
                self.likePredicate()
                pass

            elif la_ == 3:
                self.state = 755
                self.isNullPredicate()
                pass

            elif la_ == 4:
                self.state = 756
                self.comparePredicate()
                pass

            elif la_ == 5:
                self.state = 757
                self.betweenPredicate()
                pass

            elif la_ == 6:
                self.state = 758
                self.inPredicate()
                pass

            elif la_ == 7:
                self.state = 759
                self.refsPredicate()
                pass

            elif la_ == 8:
                self.state = 760
                self.match(SDBLParser.LPAREN)
                self.state = 761
                self.logicalExpression()
                self.state = 762
                self.match(SDBLParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LikePredicateContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.escape = None # MultiStringContext

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SDBLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SDBLParser.ExpressionContext,i)


        def LIKE(self):
            return self.getToken(SDBLParser.LIKE, 0)

        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(SDBLParser.NOT)
            else:
                return self.getToken(SDBLParser.NOT, i)

        def ESCAPE(self):
            return self.getToken(SDBLParser.ESCAPE, 0)

        def multiString(self):
            return self.getTypedRuleContext(SDBLParser.MultiStringContext,0)


        def getRuleIndex(self):
            return SDBLParser.RULE_likePredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLikePredicate" ):
                listener.enterLikePredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLikePredicate" ):
                listener.exitLikePredicate(self)




    def likePredicate(self):

        localctx = SDBLParser.LikePredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_likePredicate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 766
            self.expression(0)
            self.state = 770
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==44:
                self.state = 767
                self.match(SDBLParser.NOT)
                self.state = 772
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 773
            self.match(SDBLParser.LIKE)
            self.state = 774
            self.expression(0)
            self.state = 777
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 775
                self.match(SDBLParser.ESCAPE)
                self.state = 776
                localctx.escape = self.multiString()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsNullPredicateContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SDBLParser.ExpressionContext,0)


        def IS(self):
            return self.getToken(SDBLParser.IS, 0)

        def NULL(self):
            return self.getToken(SDBLParser.NULL, 0)

        def NOT(self):
            return self.getToken(SDBLParser.NOT, 0)

        def getRuleIndex(self):
            return SDBLParser.RULE_isNullPredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsNullPredicate" ):
                listener.enterIsNullPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsNullPredicate" ):
                listener.exitIsNullPredicate(self)




    def isNullPredicate(self):

        localctx = SDBLParser.IsNullPredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_isNullPredicate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            self.expression(0)
            self.state = 780
            self.match(SDBLParser.IS)
            self.state = 782
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==44:
                self.state = 781
                self.match(SDBLParser.NOT)


            self.state = 784
            self.match(SDBLParser.NULL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparePredicateContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.compareOperation = None # Token

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SDBLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SDBLParser.ExpressionContext,i)


        def LESS(self):
            return self.getToken(SDBLParser.LESS, 0)

        def LESS_OR_EQUAL(self):
            return self.getToken(SDBLParser.LESS_OR_EQUAL, 0)

        def GREATER(self):
            return self.getToken(SDBLParser.GREATER, 0)

        def GREATER_OR_EQUAL(self):
            return self.getToken(SDBLParser.GREATER_OR_EQUAL, 0)

        def ASSIGN(self):
            return self.getToken(SDBLParser.ASSIGN, 0)

        def NOT_EQUAL(self):
            return self.getToken(SDBLParser.NOT_EQUAL, 0)

        def getRuleIndex(self):
            return SDBLParser.RULE_comparePredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparePredicate" ):
                listener.enterComparePredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparePredicate" ):
                listener.exitComparePredicate(self)




    def comparePredicate(self):

        localctx = SDBLParser.ComparePredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_comparePredicate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 786
            self.expression(0)
            self.state = 787
            localctx.compareOperation = self._input.LT(1)
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 63744) != 0)):
                localctx.compareOperation = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 788
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BetweenPredicateContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SDBLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SDBLParser.ExpressionContext,i)


        def BETWEEN(self):
            return self.getToken(SDBLParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(SDBLParser.AND, 0)

        def getRuleIndex(self):
            return SDBLParser.RULE_betweenPredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetweenPredicate" ):
                listener.enterBetweenPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetweenPredicate" ):
                listener.exitBetweenPredicate(self)




    def betweenPredicate(self):

        localctx = SDBLParser.BetweenPredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_betweenPredicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 790
            self.expression(0)
            self.state = 791
            self.match(SDBLParser.BETWEEN)
            self.state = 792
            self.expression(0)
            self.state = 793
            self.match(SDBLParser.AND)
            self.state = 794
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InPredicateContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(SDBLParser.IN, 0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SDBLParser.LPAREN)
            else:
                return self.getToken(SDBLParser.LPAREN, i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(SDBLParser.RPAREN)
            else:
                return self.getToken(SDBLParser.RPAREN, i)

        def expression(self):
            return self.getTypedRuleContext(SDBLParser.ExpressionContext,0)


        def subquery(self):
            return self.getTypedRuleContext(SDBLParser.SubqueryContext,0)


        def expressionList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SDBLParser.ExpressionListContext)
            else:
                return self.getTypedRuleContext(SDBLParser.ExpressionListContext,i)


        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(SDBLParser.NOT)
            else:
                return self.getToken(SDBLParser.NOT, i)

        def HIERARCHY_FOR_IN(self):
            return self.getToken(SDBLParser.HIERARCHY_FOR_IN, 0)

        def getRuleIndex(self):
            return SDBLParser.RULE_inPredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInPredicate" ):
                listener.enterInPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInPredicate" ):
                listener.exitInPredicate(self)




    def inPredicate(self):

        localctx = SDBLParser.InPredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_inPredicate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 801
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.state = 796
                self.expression(0)
                pass

            elif la_ == 2:
                self.state = 797
                self.match(SDBLParser.LPAREN)
                self.state = 798
                self.expressionList()
                self.state = 799
                self.match(SDBLParser.RPAREN)
                pass


            self.state = 806
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==44:
                self.state = 803
                self.match(SDBLParser.NOT)
                self.state = 808
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 809
            self.match(SDBLParser.IN)
            self.state = 811
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==155:
                self.state = 810
                self.match(SDBLParser.HIERARCHY_FOR_IN)


            self.state = 813
            self.match(SDBLParser.LPAREN)
            self.state = 816
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.state = 814
                self.subquery()
                pass

            elif la_ == 2:
                self.state = 815
                self.expressionList()
                pass


            self.state = 818
            self.match(SDBLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RefsPredicateContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SDBLParser.ExpressionContext,0)


        def REFS(self):
            return self.getToken(SDBLParser.REFS, 0)

        def mdo(self):
            return self.getTypedRuleContext(SDBLParser.MdoContext,0)


        def getRuleIndex(self):
            return SDBLParser.RULE_refsPredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefsPredicate" ):
                listener.enterRefsPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefsPredicate" ):
                listener.exitRefsPredicate(self)




    def refsPredicate(self):

        localctx = SDBLParser.RefsPredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_refsPredicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 820
            self.expression(0)
            self.state = 821
            self.match(SDBLParser.REFS)
            self.state = 822
            self.mdo()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionListContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._logicalExpression = None # LogicalExpressionContext
            self.exp = list() # of LogicalExpressionContexts

        def logicalExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SDBLParser.LogicalExpressionContext)
            else:
                return self.getTypedRuleContext(SDBLParser.LogicalExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SDBLParser.COMMA)
            else:
                return self.getToken(SDBLParser.COMMA, i)

        def getRuleIndex(self):
            return SDBLParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)




    def expressionList(self):

        localctx = SDBLParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 824
            localctx._logicalExpression = self.logicalExpression()
            localctx.exp.append(localctx._logicalExpression)
            self.state = 829
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==7:
                self.state = 825
                self.match(SDBLParser.COMMA)
                self.state = 826
                localctx._logicalExpression = self.logicalExpression()
                localctx.exp.append(localctx._logicalExpression)
                self.state = 831
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataSourcesContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._dataSource = None # DataSourceContext
            self.tables = list() # of DataSourceContexts

        def dataSource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SDBLParser.DataSourceContext)
            else:
                return self.getTypedRuleContext(SDBLParser.DataSourceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SDBLParser.COMMA)
            else:
                return self.getToken(SDBLParser.COMMA, i)

        def getRuleIndex(self):
            return SDBLParser.RULE_dataSources

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataSources" ):
                listener.enterDataSources(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataSources" ):
                listener.exitDataSources(self)




    def dataSources(self):

        localctx = SDBLParser.DataSourcesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_dataSources)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 832
            localctx._dataSource = self.dataSource()
            localctx.tables.append(localctx._dataSource)
            self.state = 837
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==7:
                self.state = 833
                self.match(SDBLParser.COMMA)
                self.state = 834
                localctx._dataSource = self.dataSource()
                localctx.tables.append(localctx._dataSource)
                self.state = 839
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataSourceContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._joinPart = None # JoinPartContext
            self.joins = list() # of JoinPartContexts

        def LPAREN(self):
            return self.getToken(SDBLParser.LPAREN, 0)

        def dataSource(self):
            return self.getTypedRuleContext(SDBLParser.DataSourceContext,0)


        def RPAREN(self):
            return self.getToken(SDBLParser.RPAREN, 0)

        def joinPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SDBLParser.JoinPartContext)
            else:
                return self.getTypedRuleContext(SDBLParser.JoinPartContext,i)


        def virtualTable(self):
            return self.getTypedRuleContext(SDBLParser.VirtualTableContext,0)


        def table(self):
            return self.getTypedRuleContext(SDBLParser.TableContext,0)


        def parameterTable(self):
            return self.getTypedRuleContext(SDBLParser.ParameterTableContext,0)


        def externalDataSourceTable(self):
            return self.getTypedRuleContext(SDBLParser.ExternalDataSourceTableContext,0)


        def subquery(self):
            return self.getTypedRuleContext(SDBLParser.SubqueryContext,0)


        def alias(self):
            return self.getTypedRuleContext(SDBLParser.AliasContext,0)


        def getRuleIndex(self):
            return SDBLParser.RULE_dataSource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataSource" ):
                listener.enterDataSource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataSource" ):
                listener.exitDataSource(self)




    def dataSource(self):

        localctx = SDBLParser.DataSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_dataSource)
        self._la = 0 # Token type
        try:
            self.state = 872
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 840
                self.match(SDBLParser.LPAREN)
                self.state = 841
                self.dataSource()
                self.state = 842
                self.match(SDBLParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 864
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [19, 32, 34, 42, 51, 54, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 161, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175]:
                    self.state = 848
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
                    if la_ == 1:
                        self.state = 844
                        self.virtualTable()
                        pass

                    elif la_ == 2:
                        self.state = 845
                        self.table()
                        pass

                    elif la_ == 3:
                        self.state = 846
                        self.parameterTable()
                        pass

                    elif la_ == 4:
                        self.state = 847
                        self.externalDataSourceTable()
                        pass


                    self.state = 851
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
                    if la_ == 1:
                        self.state = 850
                        self.alias()


                    pass
                elif token in [4]:
                    self.state = 853
                    self.match(SDBLParser.LPAREN)
                    self.state = 858
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                    if la_ == 1:
                        self.state = 854
                        self.virtualTable()
                        pass

                    elif la_ == 2:
                        self.state = 855
                        self.table()
                        pass

                    elif la_ == 3:
                        self.state = 856
                        self.parameterTable()
                        pass

                    elif la_ == 4:
                        self.state = 857
                        self.subquery()
                        pass


                    self.state = 860
                    self.match(SDBLParser.RPAREN)
                    self.state = 862
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
                    if la_ == 1:
                        self.state = 861
                        self.alias()


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 869
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 145)) & ~0x3f) == 0 and ((1 << (_la - 145)) & 31) != 0):
                    self.state = 866
                    localctx._joinPart = self.joinPart()
                    localctx.joins.append(localctx._joinPart)
                    self.state = 871
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.objectTableName = None # IdentifierContext
            self.tableName = None # IdentifierContext

        def mdo(self):
            return self.getTypedRuleContext(SDBLParser.MdoContext,0)


        def DOT(self):
            return self.getToken(SDBLParser.DOT, 0)

        def identifier(self):
            return self.getTypedRuleContext(SDBLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SDBLParser.RULE_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable" ):
                listener.enterTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable" ):
                listener.exitTable(self)




    def table(self):

        localctx = SDBLParser.TableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_table)
        try:
            self.state = 880
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 874
                self.mdo()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 875
                self.mdo()
                self.state = 876
                self.match(SDBLParser.DOT)
                self.state = 877
                localctx.objectTableName = self.identifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 879
                localctx.tableName = self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VirtualTableContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.virtualTableName = None # Token
            self._virtualTableParameter = None # VirtualTableParameterContext
            self.virtualTableParameters = list() # of VirtualTableParameterContexts
            self.type_ = None # Token
            self.tableName = None # IdentifierContext

        def mdo(self):
            return self.getTypedRuleContext(SDBLParser.MdoContext,0)


        def DOT(self):
            return self.getToken(SDBLParser.DOT, 0)

        def SLICELAST_VT(self):
            return self.getToken(SDBLParser.SLICELAST_VT, 0)

        def SLICEFIRST_VT(self):
            return self.getToken(SDBLParser.SLICEFIRST_VT, 0)

        def BOUNDARIES_VT(self):
            return self.getToken(SDBLParser.BOUNDARIES_VT, 0)

        def TURNOVERS_VT(self):
            return self.getToken(SDBLParser.TURNOVERS_VT, 0)

        def BALANCE_VT(self):
            return self.getToken(SDBLParser.BALANCE_VT, 0)

        def BALANCE_AND_TURNOVERS_VT(self):
            return self.getToken(SDBLParser.BALANCE_AND_TURNOVERS_VT, 0)

        def EXT_DIMENSIONS_VT(self):
            return self.getToken(SDBLParser.EXT_DIMENSIONS_VT, 0)

        def RECORDS_WITH_EXT_DIMENSIONS_VT(self):
            return self.getToken(SDBLParser.RECORDS_WITH_EXT_DIMENSIONS_VT, 0)

        def DR_CR_TURNOVERS_VT(self):
            return self.getToken(SDBLParser.DR_CR_TURNOVERS_VT, 0)

        def ACTUAL_ACTION_PERIOD_VT(self):
            return self.getToken(SDBLParser.ACTUAL_ACTION_PERIOD_VT, 0)

        def SCHEDULE_DATA_VT(self):
            return self.getToken(SDBLParser.SCHEDULE_DATA_VT, 0)

        def TASK_BY_PERFORMER_VT(self):
            return self.getToken(SDBLParser.TASK_BY_PERFORMER_VT, 0)

        def LPAREN(self):
            return self.getToken(SDBLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(SDBLParser.RPAREN, 0)

        def virtualTableParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SDBLParser.VirtualTableParameterContext)
            else:
                return self.getTypedRuleContext(SDBLParser.VirtualTableParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SDBLParser.COMMA)
            else:
                return self.getToken(SDBLParser.COMMA, i)

        def FILTER_CRITERION_TYPE(self):
            return self.getToken(SDBLParser.FILTER_CRITERION_TYPE, 0)

        def identifier(self):
            return self.getTypedRuleContext(SDBLParser.IdentifierContext,0)


        def parameter(self):
            return self.getTypedRuleContext(SDBLParser.ParameterContext,0)


        def getRuleIndex(self):
            return SDBLParser.RULE_virtualTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVirtualTable" ):
                listener.enterVirtualTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVirtualTable" ):
                listener.exitVirtualTable(self)




    def virtualTable(self):

        localctx = SDBLParser.VirtualTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_virtualTable)
        self._la = 0 # Token type
        try:
            self.state = 907
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 882
                self.mdo()
                self.state = 883
                self.match(SDBLParser.DOT)
                self.state = 884
                localctx.virtualTableName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 164)) & ~0x3f) == 0 and ((1 << (_la - 164)) & 4095) != 0)):
                    localctx.virtualTableName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 896
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==4:
                    self.state = 885
                    self.match(SDBLParser.LPAREN)
                    self.state = 886
                    localctx._virtualTableParameter = self.virtualTableParameter()
                    localctx.virtualTableParameters.append(localctx._virtualTableParameter)
                    self.state = 891
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==7:
                        self.state = 887
                        self.match(SDBLParser.COMMA)
                        self.state = 888
                        localctx._virtualTableParameter = self.virtualTableParameter()
                        localctx.virtualTableParameters.append(localctx._virtualTableParameter)
                        self.state = 893
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 894
                    self.match(SDBLParser.RPAREN)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 898
                localctx.type_ = self.match(SDBLParser.FILTER_CRITERION_TYPE)
                self.state = 899
                self.match(SDBLParser.DOT)
                self.state = 900
                localctx.tableName = self.identifier()
                self.state = 901
                self.match(SDBLParser.LPAREN)
                self.state = 903
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==19:
                    self.state = 902
                    self.parameter()


                self.state = 905
                self.match(SDBLParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VirtualTableParameterContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalExpression(self):
            return self.getTypedRuleContext(SDBLParser.LogicalExpressionContext,0)


        def getRuleIndex(self):
            return SDBLParser.RULE_virtualTableParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVirtualTableParameter" ):
                listener.enterVirtualTableParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVirtualTableParameter" ):
                listener.exitVirtualTableParameter(self)




    def virtualTableParameter(self):

        localctx = SDBLParser.VirtualTableParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_virtualTableParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 910
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -303935709242718704) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 281418739449855) != 0):
                self.state = 909
                self.logicalExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterTableContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter(self):
            return self.getTypedRuleContext(SDBLParser.ParameterContext,0)


        def getRuleIndex(self):
            return SDBLParser.RULE_parameterTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterTable" ):
                listener.enterParameterTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterTable" ):
                listener.exitParameterTable(self)




    def parameterTable(self):

        localctx = SDBLParser.ParameterTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_parameterTable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 912
            self.parameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternalDataSourceTableContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.tableName = None # IdentifierContext
            self.cubeName = None # IdentifierContext

        def mdo(self):
            return self.getTypedRuleContext(SDBLParser.MdoContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(SDBLParser.DOT)
            else:
                return self.getToken(SDBLParser.DOT, i)

        def EDS_TABLE(self):
            return self.getToken(SDBLParser.EDS_TABLE, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SDBLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SDBLParser.IdentifierContext,i)


        def EDS_CUBE(self):
            return self.getToken(SDBLParser.EDS_CUBE, 0)

        def EDS_CUBE_DIMTABLE(self):
            return self.getToken(SDBLParser.EDS_CUBE_DIMTABLE, 0)

        def getRuleIndex(self):
            return SDBLParser.RULE_externalDataSourceTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalDataSourceTable" ):
                listener.enterExternalDataSourceTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalDataSourceTable" ):
                listener.exitExternalDataSourceTable(self)




    def externalDataSourceTable(self):

        localctx = SDBLParser.ExternalDataSourceTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_externalDataSourceTable)
        try:
            self.state = 930
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 914
                self.mdo()
                self.state = 915
                self.match(SDBLParser.DOT)
                self.state = 916
                self.match(SDBLParser.EDS_TABLE)
                self.state = 917
                self.match(SDBLParser.DOT)
                self.state = 918
                localctx.tableName = self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 920
                self.mdo()
                self.state = 921
                self.match(SDBLParser.DOT)
                self.state = 922
                self.match(SDBLParser.EDS_CUBE)
                self.state = 923
                self.match(SDBLParser.DOT)
                self.state = 924
                localctx.cubeName = self.identifier()
                self.state = 925
                self.match(SDBLParser.DOT)
                self.state = 926
                self.match(SDBLParser.EDS_CUBE_DIMTABLE)
                self.state = 927
                self.match(SDBLParser.DOT)
                self.state = 928
                localctx.tableName = self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinPartContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.joinType = None # Token
            self.outerJoin = None # Token
            self.source = None # DataSourceContext
            self.condition = None # LogicalExpressionContext

        def dataSource(self):
            return self.getTypedRuleContext(SDBLParser.DataSourceContext,0)


        def ON_EN(self):
            return self.getToken(SDBLParser.ON_EN, 0)

        def PO_RU(self):
            return self.getToken(SDBLParser.PO_RU, 0)

        def logicalExpression(self):
            return self.getTypedRuleContext(SDBLParser.LogicalExpressionContext,0)


        def JOIN(self):
            return self.getToken(SDBLParser.JOIN, 0)

        def RIGHT(self):
            return self.getToken(SDBLParser.RIGHT, 0)

        def LEFT(self):
            return self.getToken(SDBLParser.LEFT, 0)

        def FULL(self):
            return self.getToken(SDBLParser.FULL, 0)

        def INNER(self):
            return self.getToken(SDBLParser.INNER, 0)

        def OUTER(self):
            return self.getToken(SDBLParser.OUTER, 0)

        def getRuleIndex(self):
            return SDBLParser.RULE_joinPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinPart" ):
                listener.enterJoinPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinPart" ):
                listener.exitJoinPart(self)




    def joinPart(self):

        localctx = SDBLParser.JoinPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_joinPart)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 950
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [145]:
                self.state = 932
                localctx.joinType = self.match(SDBLParser.RIGHT)
                self.state = 934
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==150:
                    self.state = 933
                    localctx.outerJoin = self.match(SDBLParser.OUTER)


                self.state = 936
                self.match(SDBLParser.JOIN)
                pass
            elif token in [146]:
                self.state = 937
                localctx.joinType = self.match(SDBLParser.LEFT)
                self.state = 939
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==150:
                    self.state = 938
                    localctx.outerJoin = self.match(SDBLParser.OUTER)


                self.state = 941
                self.match(SDBLParser.JOIN)
                pass
            elif token in [148]:
                self.state = 942
                localctx.joinType = self.match(SDBLParser.FULL)
                self.state = 944
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==150:
                    self.state = 943
                    localctx.outerJoin = self.match(SDBLParser.OUTER)


                self.state = 946
                self.match(SDBLParser.JOIN)
                pass
            elif token in [147]:
                self.state = 947
                localctx.joinType = self.match(SDBLParser.INNER)
                self.state = 948
                self.match(SDBLParser.JOIN)
                pass
            elif token in [149]:
                self.state = 949
                localctx.joinType = self.match(SDBLParser.JOIN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 952
            localctx.source = self.dataSource()
            self.state = 953
            _la = self._input.LA(1)
            if not(_la==47 or _la==50):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 954
            localctx.condition = self.logicalExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentifierContext

        def identifier(self):
            return self.getTypedRuleContext(SDBLParser.IdentifierContext,0)


        def AS(self):
            return self.getToken(SDBLParser.AS, 0)

        def getRuleIndex(self):
            return SDBLParser.RULE_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlias" ):
                listener.enterAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlias" ):
                listener.exitAlias(self)




    def alias(self):

        localctx = SDBLParser.AliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 957
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23:
                self.state = 956
                self.match(SDBLParser.AS)


            self.state = 959
            localctx.name = self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DatePartContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter(self):
            return self.getTypedRuleContext(SDBLParser.ParameterContext,0)


        def DECIMAL(self):
            return self.getToken(SDBLParser.DECIMAL, 0)

        def getRuleIndex(self):
            return SDBLParser.RULE_datePart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatePart" ):
                listener.enterDatePart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatePart" ):
                listener.exitDatePart(self)




    def datePart(self):

        localctx = SDBLParser.DatePartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_datePart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 963
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [19]:
                self.state = 961
                self.parameter()
                pass
            elif token in [157]:
                self.state = 962
                self.match(SDBLParser.DECIMAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiStringContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STR(self, i:int=None):
            if i is None:
                return self.getTokens(SDBLParser.STR)
            else:
                return self.getToken(SDBLParser.STR, i)

        def getRuleIndex(self):
            return SDBLParser.RULE_multiString

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiString" ):
                listener.enterMultiString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiString" ):
                listener.exitMultiString(self)




    def multiString(self):

        localctx = SDBLParser.MultiStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_multiString)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 966 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 965
                    self.match(SDBLParser.STR)

                else:
                    raise NoViableAltException(self)
                self.state = 968 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,104,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(SDBLParser.MINUS, 0)

        def PLUS(self):
            return self.getToken(SDBLParser.PLUS, 0)

        def getRuleIndex(self):
            return SDBLParser.RULE_sign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSign" ):
                listener.enterSign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSign" ):
                listener.exitSign(self)




    def sign(self):

        localctx = SDBLParser.SignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_sign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 970
            _la = self._input.LA(1)
            if not(_la==9 or _la==10):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SDBLParser.IDENTIFIER, 0)

        def ACTUAL_ACTION_PERIOD_VT(self):
            return self.getToken(SDBLParser.ACTUAL_ACTION_PERIOD_VT, 0)

        def BALANCE_VT(self):
            return self.getToken(SDBLParser.BALANCE_VT, 0)

        def BALANCE_AND_TURNOVERS_VT(self):
            return self.getToken(SDBLParser.BALANCE_AND_TURNOVERS_VT, 0)

        def BOUNDARIES_VT(self):
            return self.getToken(SDBLParser.BOUNDARIES_VT, 0)

        def DR_CR_TURNOVERS_VT(self):
            return self.getToken(SDBLParser.DR_CR_TURNOVERS_VT, 0)

        def EXT_DIMENSIONS_VT(self):
            return self.getToken(SDBLParser.EXT_DIMENSIONS_VT, 0)

        def RECORDS_WITH_EXT_DIMENSIONS_VT(self):
            return self.getToken(SDBLParser.RECORDS_WITH_EXT_DIMENSIONS_VT, 0)

        def SCHEDULE_DATA_VT(self):
            return self.getToken(SDBLParser.SCHEDULE_DATA_VT, 0)

        def SLICEFIRST_VT(self):
            return self.getToken(SDBLParser.SLICEFIRST_VT, 0)

        def SLICELAST_VT(self):
            return self.getToken(SDBLParser.SLICELAST_VT, 0)

        def TASK_BY_PERFORMER_VT(self):
            return self.getToken(SDBLParser.TASK_BY_PERFORMER_VT, 0)

        def TURNOVERS_VT(self):
            return self.getToken(SDBLParser.TURNOVERS_VT, 0)

        def ROUTEPOINT_FIELD(self):
            return self.getToken(SDBLParser.ROUTEPOINT_FIELD, 0)

        def BUSINESS_PROCESS_TYPE(self):
            return self.getToken(SDBLParser.BUSINESS_PROCESS_TYPE, 0)

        def CATALOG_TYPE(self):
            return self.getToken(SDBLParser.CATALOG_TYPE, 0)

        def DOCUMENT_TYPE(self):
            return self.getToken(SDBLParser.DOCUMENT_TYPE, 0)

        def INFORMATION_REGISTER_TYPE(self):
            return self.getToken(SDBLParser.INFORMATION_REGISTER_TYPE, 0)

        def CONSTANT_TYPE(self):
            return self.getToken(SDBLParser.CONSTANT_TYPE, 0)

        def FILTER_CRITERION_TYPE(self):
            return self.getToken(SDBLParser.FILTER_CRITERION_TYPE, 0)

        def EXCHANGE_PLAN_TYPE(self):
            return self.getToken(SDBLParser.EXCHANGE_PLAN_TYPE, 0)

        def SEQUENCE_TYPE(self):
            return self.getToken(SDBLParser.SEQUENCE_TYPE, 0)

        def DOCUMENT_JOURNAL_TYPE(self):
            return self.getToken(SDBLParser.DOCUMENT_JOURNAL_TYPE, 0)

        def ENUM_TYPE(self):
            return self.getToken(SDBLParser.ENUM_TYPE, 0)

        def CHART_OF_CHARACTERISTIC_TYPES_TYPE(self):
            return self.getToken(SDBLParser.CHART_OF_CHARACTERISTIC_TYPES_TYPE, 0)

        def CHART_OF_ACCOUNTS_TYPE(self):
            return self.getToken(SDBLParser.CHART_OF_ACCOUNTS_TYPE, 0)

        def CHART_OF_CALCULATION_TYPES_TYPE(self):
            return self.getToken(SDBLParser.CHART_OF_CALCULATION_TYPES_TYPE, 0)

        def ACCUMULATION_REGISTER_TYPE(self):
            return self.getToken(SDBLParser.ACCUMULATION_REGISTER_TYPE, 0)

        def ACCOUNTING_REGISTER_TYPE(self):
            return self.getToken(SDBLParser.ACCOUNTING_REGISTER_TYPE, 0)

        def CALCULATION_REGISTER_TYPE(self):
            return self.getToken(SDBLParser.CALCULATION_REGISTER_TYPE, 0)

        def TASK_TYPE(self):
            return self.getToken(SDBLParser.TASK_TYPE, 0)

        def EXTERNAL_DATA_SOURCE_TYPE(self):
            return self.getToken(SDBLParser.EXTERNAL_DATA_SOURCE_TYPE, 0)

        def DROP(self):
            return self.getToken(SDBLParser.DROP, 0)

        def END(self):
            return self.getToken(SDBLParser.END, 0)

        def ISNULL(self):
            return self.getToken(SDBLParser.ISNULL, 0)

        def JOIN(self):
            return self.getToken(SDBLParser.JOIN, 0)

        def SELECT(self):
            return self.getToken(SDBLParser.SELECT, 0)

        def TOTALS(self):
            return self.getToken(SDBLParser.TOTALS, 0)

        def UNION(self):
            return self.getToken(SDBLParser.UNION, 0)

        def UPDATE(self):
            return self.getToken(SDBLParser.UPDATE, 0)

        def AVG(self):
            return self.getToken(SDBLParser.AVG, 0)

        def BEGINOFPERIOD(self):
            return self.getToken(SDBLParser.BEGINOFPERIOD, 0)

        def BOOLEAN(self):
            return self.getToken(SDBLParser.BOOLEAN, 0)

        def COUNT(self):
            return self.getToken(SDBLParser.COUNT, 0)

        def DATE(self):
            return self.getToken(SDBLParser.DATE, 0)

        def DATEADD(self):
            return self.getToken(SDBLParser.DATEADD, 0)

        def DATEDIFF(self):
            return self.getToken(SDBLParser.DATEDIFF, 0)

        def DATETIME(self):
            return self.getToken(SDBLParser.DATETIME, 0)

        def DAY(self):
            return self.getToken(SDBLParser.DAY, 0)

        def DAYOFYEAR(self):
            return self.getToken(SDBLParser.DAYOFYEAR, 0)

        def EMPTYTABLE(self):
            return self.getToken(SDBLParser.EMPTYTABLE, 0)

        def EMPTYREF(self):
            return self.getToken(SDBLParser.EMPTYREF, 0)

        def ENDOFPERIOD(self):
            return self.getToken(SDBLParser.ENDOFPERIOD, 0)

        def HALFYEAR(self):
            return self.getToken(SDBLParser.HALFYEAR, 0)

        def HOUR(self):
            return self.getToken(SDBLParser.HOUR, 0)

        def MAX(self):
            return self.getToken(SDBLParser.MAX, 0)

        def MIN(self):
            return self.getToken(SDBLParser.MIN, 0)

        def MINUTE(self):
            return self.getToken(SDBLParser.MINUTE, 0)

        def MONTH(self):
            return self.getToken(SDBLParser.MONTH, 0)

        def NUMBER(self):
            return self.getToken(SDBLParser.NUMBER, 0)

        def QUARTER(self):
            return self.getToken(SDBLParser.QUARTER, 0)

        def ONLY(self):
            return self.getToken(SDBLParser.ONLY, 0)

        def PERIODS(self):
            return self.getToken(SDBLParser.PERIODS, 0)

        def REFS(self):
            return self.getToken(SDBLParser.REFS, 0)

        def PRESENTATION(self):
            return self.getToken(SDBLParser.PRESENTATION, 0)

        def RECORDAUTONUMBER(self):
            return self.getToken(SDBLParser.RECORDAUTONUMBER, 0)

        def REFPRESENTATION(self):
            return self.getToken(SDBLParser.REFPRESENTATION, 0)

        def SECOND(self):
            return self.getToken(SDBLParser.SECOND, 0)

        def STRING(self):
            return self.getToken(SDBLParser.STRING, 0)

        def SUBSTRING(self):
            return self.getToken(SDBLParser.SUBSTRING, 0)

        def SUM(self):
            return self.getToken(SDBLParser.SUM, 0)

        def TENDAYS(self):
            return self.getToken(SDBLParser.TENDAYS, 0)

        def TYPE(self):
            return self.getToken(SDBLParser.TYPE, 0)

        def VALUE(self):
            return self.getToken(SDBLParser.VALUE, 0)

        def VALUETYPE(self):
            return self.getToken(SDBLParser.VALUETYPE, 0)

        def WEEK(self):
            return self.getToken(SDBLParser.WEEK, 0)

        def WEEKDAY(self):
            return self.getToken(SDBLParser.WEEKDAY, 0)

        def YEAR(self):
            return self.getToken(SDBLParser.YEAR, 0)

        def ORDER(self):
            return self.getToken(SDBLParser.ORDER, 0)

        def GROUP(self):
            return self.getToken(SDBLParser.GROUP, 0)

        def INDEX(self):
            return self.getToken(SDBLParser.INDEX, 0)

        def SET(self):
            return self.getToken(SDBLParser.SET, 0)

        def RIGHT(self):
            return self.getToken(SDBLParser.RIGHT, 0)

        def LEFT(self):
            return self.getToken(SDBLParser.LEFT, 0)

        def INNER(self):
            return self.getToken(SDBLParser.INNER, 0)

        def FULL(self):
            return self.getToken(SDBLParser.FULL, 0)

        def OUTER(self):
            return self.getToken(SDBLParser.OUTER, 0)

        def FOR(self):
            return self.getToken(SDBLParser.FOR, 0)

        def ALL(self):
            return self.getToken(SDBLParser.ALL, 0)

        def ACOS(self):
            return self.getToken(SDBLParser.ACOS, 0)

        def ASIN(self):
            return self.getToken(SDBLParser.ASIN, 0)

        def ATAN(self):
            return self.getToken(SDBLParser.ATAN, 0)

        def COS(self):
            return self.getToken(SDBLParser.COS, 0)

        def SIN(self):
            return self.getToken(SDBLParser.SIN, 0)

        def TAN(self):
            return self.getToken(SDBLParser.TAN, 0)

        def LOG(self):
            return self.getToken(SDBLParser.LOG, 0)

        def LOG10(self):
            return self.getToken(SDBLParser.LOG10, 0)

        def EXP(self):
            return self.getToken(SDBLParser.EXP, 0)

        def POW(self):
            return self.getToken(SDBLParser.POW, 0)

        def SQRT(self):
            return self.getToken(SDBLParser.SQRT, 0)

        def INT(self):
            return self.getToken(SDBLParser.INT, 0)

        def LOWER(self):
            return self.getToken(SDBLParser.LOWER, 0)

        def STRINGLENGTH(self):
            return self.getToken(SDBLParser.STRINGLENGTH, 0)

        def TRIMALL(self):
            return self.getToken(SDBLParser.TRIMALL, 0)

        def TRIML(self):
            return self.getToken(SDBLParser.TRIML, 0)

        def TRIMR(self):
            return self.getToken(SDBLParser.TRIMR, 0)

        def UPPER(self):
            return self.getToken(SDBLParser.UPPER, 0)

        def ROUND(self):
            return self.getToken(SDBLParser.ROUND, 0)

        def STOREDDATASIZE(self):
            return self.getToken(SDBLParser.STOREDDATASIZE, 0)

        def UUID(self):
            return self.getToken(SDBLParser.UUID, 0)

        def STRFIND(self):
            return self.getToken(SDBLParser.STRFIND, 0)

        def STRREPLACE(self):
            return self.getToken(SDBLParser.STRREPLACE, 0)

        def getRuleIndex(self):
            return SDBLParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = SDBLParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 972
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -556190134458908672) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 281414981337087) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemporaryTableIdentifierContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SDBLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SDBLParser.IdentifierContext,i)


        def DOT(self):
            return self.getToken(SDBLParser.DOT, 0)

        def NUMBER_SIGH(self, i:int=None):
            if i is None:
                return self.getTokens(SDBLParser.NUMBER_SIGH)
            else:
                return self.getToken(SDBLParser.NUMBER_SIGH, i)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(SDBLParser.DECIMAL)
            else:
                return self.getToken(SDBLParser.DECIMAL, i)

        def getRuleIndex(self):
            return SDBLParser.RULE_temporaryTableIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemporaryTableIdentifier" ):
                listener.enterTemporaryTableIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemporaryTableIdentifier" ):
                listener.exitTemporaryTableIdentifier(self)




    def temporaryTableIdentifier(self):

        localctx = SDBLParser.TemporaryTableIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_temporaryTableIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 975
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 974
                self.match(SDBLParser.DOT)


            self.state = 999
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.state = 978 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 977
                    self.match(SDBLParser.NUMBER_SIGH)
                    self.state = 980 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==18):
                        break

                pass

            elif la_ == 2:
                self.state = 982
                self.identifier()
                pass

            elif la_ == 3:
                self.state = 995 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 985 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 985
                                self._errHandler.sync(self)
                                token = self._input.LA(1)
                                if token in [32, 34, 42, 51, 54, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 161, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175]:
                                    self.state = 983
                                    self.identifier()
                                    pass
                                elif token in [18]:
                                    self.state = 984
                                    self.match(SDBLParser.NUMBER_SIGH)
                                    pass
                                else:
                                    raise NoViableAltException(self)


                            else:
                                raise NoViableAltException(self)
                            self.state = 987 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,108,self._ctx)

                        self.state = 992
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==157:
                            self.state = 989
                            self.match(SDBLParser.DECIMAL)
                            self.state = 994
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)


                    else:
                        raise NoViableAltException(self)
                    self.state = 997 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,110,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token

        def AMPERSAND(self):
            return self.getToken(SDBLParser.AMPERSAND, 0)

        def PARAMETER_IDENTIFIER(self):
            return self.getToken(SDBLParser.PARAMETER_IDENTIFIER, 0)

        def getRuleIndex(self):
            return SDBLParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)




    def parameter(self):

        localctx = SDBLParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1001
            self.match(SDBLParser.AMPERSAND)
            self.state = 1002
            localctx.name = self.match(SDBLParser.PARAMETER_IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MdoContext(BSLParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type_ = None # Token
            self.tableName = None # IdentifierContext

        def DOT(self):
            return self.getToken(SDBLParser.DOT, 0)

        def identifier(self):
            return self.getTypedRuleContext(SDBLParser.IdentifierContext,0)


        def BUSINESS_PROCESS_TYPE(self):
            return self.getToken(SDBLParser.BUSINESS_PROCESS_TYPE, 0)

        def CATALOG_TYPE(self):
            return self.getToken(SDBLParser.CATALOG_TYPE, 0)

        def DOCUMENT_TYPE(self):
            return self.getToken(SDBLParser.DOCUMENT_TYPE, 0)

        def INFORMATION_REGISTER_TYPE(self):
            return self.getToken(SDBLParser.INFORMATION_REGISTER_TYPE, 0)

        def CONSTANT_TYPE(self):
            return self.getToken(SDBLParser.CONSTANT_TYPE, 0)

        def FILTER_CRITERION_TYPE(self):
            return self.getToken(SDBLParser.FILTER_CRITERION_TYPE, 0)

        def EXCHANGE_PLAN_TYPE(self):
            return self.getToken(SDBLParser.EXCHANGE_PLAN_TYPE, 0)

        def SEQUENCE_TYPE(self):
            return self.getToken(SDBLParser.SEQUENCE_TYPE, 0)

        def DOCUMENT_JOURNAL_TYPE(self):
            return self.getToken(SDBLParser.DOCUMENT_JOURNAL_TYPE, 0)

        def ENUM_TYPE(self):
            return self.getToken(SDBLParser.ENUM_TYPE, 0)

        def CHART_OF_CHARACTERISTIC_TYPES_TYPE(self):
            return self.getToken(SDBLParser.CHART_OF_CHARACTERISTIC_TYPES_TYPE, 0)

        def CHART_OF_ACCOUNTS_TYPE(self):
            return self.getToken(SDBLParser.CHART_OF_ACCOUNTS_TYPE, 0)

        def CHART_OF_CALCULATION_TYPES_TYPE(self):
            return self.getToken(SDBLParser.CHART_OF_CALCULATION_TYPES_TYPE, 0)

        def ACCUMULATION_REGISTER_TYPE(self):
            return self.getToken(SDBLParser.ACCUMULATION_REGISTER_TYPE, 0)

        def ACCOUNTING_REGISTER_TYPE(self):
            return self.getToken(SDBLParser.ACCOUNTING_REGISTER_TYPE, 0)

        def CALCULATION_REGISTER_TYPE(self):
            return self.getToken(SDBLParser.CALCULATION_REGISTER_TYPE, 0)

        def TASK_TYPE(self):
            return self.getToken(SDBLParser.TASK_TYPE, 0)

        def EXTERNAL_DATA_SOURCE_TYPE(self):
            return self.getToken(SDBLParser.EXTERNAL_DATA_SOURCE_TYPE, 0)

        def getRuleIndex(self):
            return SDBLParser.RULE_mdo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMdo" ):
                listener.enterMdo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMdo" ):
                listener.exitMdo(self)




    def mdo(self):

        localctx = SDBLParser.MdoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_mdo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1004
            localctx.type_ = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 120)) & ~0x3f) == 0 and ((1 << (_la - 120)) & 262143) != 0)):
                localctx.type_ = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1005
            self.match(SDBLParser.DOT)
            self.state = 1006
            localctx.tableName = self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[26] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         




