# -*- coding: utf-8 -*-
"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å ST-—Ñ–∞–π–ª–∞–º–∏
"""

# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π
import sys
import os
from PySide6.QtWidgets import (
    QSplitter, QTreeView, QTextEdit, QWidget, QVBoxLayout, 
    QApplication, QMenu, QHBoxLayout, QPushButton, 
    QSpacerItem, QSizePolicy, QFileDialog, QAbstractItemModel
)
from PySide6.QtCore import Qt, QFileSystemWatcher, Signal, QObject, QDir, QRect, QModelIndex
from PySide6.QtGui import QAction, QScreen

# –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ ANTLR
from antlr4 import FileStream, CommonTokenStream, ParseTreeWalker
from ANTLR4.STFileLexer import STFileLexer
from ANTLR4.STFileParser import STFileParser, STFileListener

# ===================================================================
# –ö–õ–ê–°–°–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –î–ê–ù–ù–´–ú–ò
# ===================================================================

class STFileTreeItem:
    """–≠–ª–µ–º–µ–Ω—Ç –¥–µ—Ä–µ–≤–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ST-—Ñ–∞–π–ª–∞"""
    def __init__(self, data, parent=None):
        self.parent_item = parent  # –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç
        self.item_data = data      # –î–∞–Ω–Ω—ã–µ: [–ò–º—è, –¢–∏–ø, –ö–æ–Ω—Ç–µ–Ω—Ç]
        self.child_items = []      # –°–ø–∏—Å–æ–∫ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤

class STFileTreeModel(QAbstractItemModel):
    """–ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã ST-—Ñ–∞–π–ª–æ–≤ –≤ –¥–µ—Ä–µ–≤–µ"""
    def __init__(self, parent=None):
        super().__init__(parent)
        self.root_item = STFileTreeItem(["Root", "root", ""])  # –ö–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç
        self.parser = STFileParserWrapper()  # –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞

    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –º–æ–¥–µ–ª–∏
    def index(self, row, column, parent=QModelIndex()):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞"""
        if not self.hasIndex(row, column, parent):
            return QModelIndex()
        
        parent_item = parent.internalPointer() if parent.isValid() else self.root_item
        child_item = parent_item.child_items[row]
        return self.createIndex(row, column, child_item)

    def parent(self, index):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞"""
        if not index.isValid():
            return QModelIndex()
        
        child_item = index.internalPointer()
        parent_item = child_item.parent_item
        
        if parent_item == self.root_item:
            return QModelIndex()
            
        return self.createIndex(parent_item.child_items.index(child_item), 0, parent_item)

    def rowCount(self, parent=QModelIndex()):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ (–¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤)"""
        parent_item = parent.internalPointer() if parent.isValid() else self.root_item
        return len(parent_item.child_items)

    def columnCount(self, parent=QModelIndex()):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫ (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ: –ò–º—è –∏ –¢–∏–ø)"""
        return 2

    def data(self, index, role=Qt.DisplayRole):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not index.isValid() or role != Qt.DisplayRole:
            return None
            
        item = index.internalPointer()
        return item.item_data[index.column()]

    def headerData(self, section, orientation, role=Qt.DisplayRole):
        """–ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫"""
        if orientation == Qt.Horizontal and role == Qt.DisplayRole:
            return ["–ò–º—è", "–¢–∏–ø"][section]
        return None

    def add_file(self, file_path):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π ST-—Ñ–∞–π–ª –≤ –º–æ–¥–µ–ª—å"""
        structure = self.parser.parse_st_file(file_path)  # –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª
        file_name = os.path.basename(file_path)
        
        # –ù–∞—á–∏–Ω–∞–µ–º –≤—Å—Ç–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö
        self.beginInsertRows(QModelIndex(), self.rowCount(), self.rowCount())
        file_item = STFileTreeItem([file_name, "file", file_path], self.root_item)
        self._build_tree(structure, file_item)  # –°—Ç—Ä–æ–∏–º –ø–æ–¥–¥–µ—Ä–µ–≤–æ
        self.root_item.child_items.append(file_item)
        self.endInsertRows()

    def _build_tree(self, nodes, parent):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å—Ç—Ä–æ–∏—Ç –¥–µ—Ä–µ–≤–æ –∏–∑ –¥–∞–Ω–Ω—ã—Ö"""
        for node in nodes:
            item = STFileTreeItem([node['name'], node['type'], node.get('content','')], parent)
            parent.child_items.append(item)
            if 'children' in node:
                self._build_tree(node['children'], item)

# ===================================================================
# –ö–õ–ê–°–°–´ –î–õ–Ø –ü–ê–†–°–ò–ù–ì–ê ST-–§–ê–ô–õ–û–í
# ===================================================================

class STFileParserWrapper:
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞ ANTLR"""
    def parse_st_file(self, file_path):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞"""
        input_stream = FileStream(file_path, encoding="utf-8")
        lexer = STFileLexer(input_stream)        # –õ–µ–∫—Å–µ—Ä
        token_stream = CommonTokenStream(lexer)  # –ü–æ—Ç–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤
        parser = STFileParser(token_stream)      # –ü–∞—Ä—Å–µ—Ä
        tree = parser.fileStructure()            # –î–µ—Ä–µ–≤–æ —Ä–∞–∑–±–æ—Ä–∞
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        listener = StructureListener()
        ParseTreeWalker().walk(listener, tree)
        return listener.get_structure()

class StructureListener(STFileListener):
    """–°–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥–µ—Ä–µ–≤–∞ —Ä–∞–∑–±–æ—Ä–∞"""
    def __init__(self):
        self.stack = [{'children': []}]  # –°—Ç–µ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
        self.result = self.stack[0]      # –ö–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç

    def get_structure(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É"""
        return self.result['children']

    def enterEntry(self, ctx):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ —ç–ª–µ–º–µ–Ω—Ç (–ø–∞–ø–∫—É)"""
        if ctx.getChildCount() > 3:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–∞–ø–∫–∞
            name = ctx.STRING(0).getText()[1:-1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è
            new_item = {
                'name': name,
                'type': 'folder',
                'children': []
            }
            self.stack[-1]['children'].append(new_item)
            self.stack.append(new_item)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏

    def exitEntry(self, ctx):
        """–í—ã—Ö–æ–¥ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞ (–ø–∞–ø–∫–∏)"""
        if ctx.getChildCount() > 3:
            self.stack.pop()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å

    def enterTemplateHeader(self, ctx):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–±–ª–æ–Ω–∞"""
        name = ctx.STRING(0).getText()[1:-1]  # –ò–º—è —à–∞–±–ª–æ–Ω–∞
        # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑ 5-–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (–∏–Ω–¥–µ–∫—Å 4)
        content = ctx.STRING(4).getText()[1:-1] if len(ctx.STRING) > 4 else ""
        self.stack[-1]['children'].append({
            'name': name,
            'type': 'template',
            'content': content
        })

# ===================================================================
# –ì–†–ê–§–ò–ß–ï–°–ö–ò–ô –ò–ù–¢–ï–†–§–ï–ô–°
# ===================================================================

class SidePanelSignals(QObject):
    """–°–∏–≥–Ω–∞–ª—ã –ø–∞–Ω–µ–ª–∏ (–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    file_selected = Signal(str)
    file_changed = Signal(str)

class SidePanel(QWidget):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    def __init__(self, parent=None):
        super().__init__(parent, Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint)
        self.signals = SidePanelSignals()
        self.file_watcher = QFileSystemWatcher()
        self.current_file = None
        self._init_ui()
        self._init_position_menu()
        self._setup_screen_edge_docking()

    def _init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.setMinimumWidth(300)
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(0, 0, 0, 0)

        # –ü–∞–Ω–µ–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–∞
        self.title_bar = QWidget()
        title_layout = QHBoxLayout(self.title_bar)
        title_layout.setContentsMargins(5, 2, 5, 2)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.minimize_btn = QPushButton("‚Äî")
        self.minimize_btn.setFixedSize(20, 20)
        self.minimize_btn.clicked.connect(self.showMinimized)

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
        self.load_btn = QPushButton("üìÇ")
        self.load_btn.setFixedSize(20, 20)
        self.load_btn.clicked.connect(self._load_st_files)

        self.close_btn = QPushButton("√ó")
        self.close_btn.setFixedSize(20, 20)
        self.close_btn.clicked.connect(self.close)

        title_layout.addWidget(self.minimize_btn)
        title_layout.addWidget(self.load_btn)  # –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        title_layout.addSpacerItem(QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum))
        title_layout.addWidget(self.close_btn)

        main_layout.addWidget(self.title_bar)

        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
        self.splitter = QSplitter(Qt.Vertical)
        self.tree_view = QTreeView()
        self.tree_view.setHeaderHidden(False)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        self.tree_view.clicked.connect(self._on_tree_item_clicked)

        self.content_view = QTextEdit()
        self.content_view.setReadOnly(True)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
        self.tree_model = STFileTreeModel()
        self.tree_view.setModel(self.tree_model)

        self.splitter.addWidget(self.tree_view)
        self.splitter.addWidget(self.content_view)
        main_layout.addWidget(self.splitter)

    def _load_st_files(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ ST-—Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥"""
        files, _ = QFileDialog.getOpenFileNames(
            self, 
            "–û—Ç–∫—Ä—ã—Ç—å ST-—Ñ–∞–π–ª—ã", 
            "", 
            "ST Files (*.st)"
        )
        for file in files:
            self.tree_model.add_file(file)  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ –º–æ–¥–µ–ª—å

    def _on_tree_item_clicked(self, index):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É –¥–µ—Ä–µ–≤–∞"""
        item = index.internalPointer()
        if item.item_data[1] == 'template':
            self.content_view.setPlainText(item.item_data[2])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    def mousePressEvent(self, event): ...
    def mouseMoveEvent(self, event): ...
    def mouseReleaseEvent(self, event): ...
    def _init_position_menu(self): ...
    def _setup_screen_edge_docking(self): ...
    def update_dock_position(self): ...
    def contextMenuEvent(self, event): ...

# ===================================================================
# –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# ===================================================================

if __name__ == "__main__":
    app = QApplication(sys.argv)
    panel = SidePanel()
    panel.setWindowTitle("ST File Viewer")
    panel.show()
    sys.exit(app.exec())