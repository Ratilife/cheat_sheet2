{1,
{28,
{"МоиШаблоны",1,0,"",""},
{5,
{"СКД",1,0,"",""},
{0,
{"Набор данных - Объект",0,1,"НаборДанныхОбъектСКД","	СтандартнаяОбработка = Ложь;
	//1. получение схемы компоновки данных
    СхемаКомпоновкиДанных = ПолучитьМакет(""ОсновнаяСхемаКомпоновкиДанных"");
	
	//2. получение настроек компановки данных
	НастройкиКомпановки = КомпоновщикНастроек.ПолучитьНастройки();
	
	//3. получение макета компановки данных
	КомпановщикМакета  = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпановки = КомпановщикМакета.Выполнить(СхемаКомпоновкиДанных,НастройкиКомпановки);
	
	//4. получение результата отчета (выполнение компановки)
	ВнешниеНаборыДанных = Новый Структура(""ТаблицаДанных"",РезультатЗапроса);  //""""ТаблицаДанных"""" - на уровне схемы; РезультатЗапроса - на уровне кода 
	
	ПроцессорКомпановки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпановки.Инициализировать(МакетКомпановки,ВнешниеНаборыДанных);
	
	//5. вывод результата компановки
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпановки);
"}
},
{0,
{"Набор данных",0,0,"","	СтандартнаяОбработка = Ложь;

	//1. получение схемы компоновки данных
	СхемаКомпоновкиДанных = ПолучитьМакет(""ОсновнаяСхемаКомпанновкиДанных"");
	
	//2. получение настроек компановки данных
	НастройкиКомпановки = КомпоновщикНастроек.ПолучитьНастройки();
	
	//3. получение макета компановки данных
	КомпановщикМакета  = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпановки = КомпановщикМакета.Выполнить(СхемаКомпоновкиДанных,НастройкиКомпановки);
	
	//4. компановка данных
	ПроцессорКомпановки = Новый ПроцессорКомпановкиДанных;
	ПроцессорКомпановки.Инициализировать(МакетКомпановки)
	
	//5. вывод результата компановки
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпановки);
"}
},
{0,
{"ОтчетЖурналРегистрации",0,0,"","      СтандартнаяОбработка = Ложь;
		
		//1. получение схемы компоновки данных
	    СхемаКомпоновкиДанных = ПолучитьМакет(""ОсновнаяСхемаКомпоновкиДанных"");
		
		//2. получение настроек компановки данных
		НастройкиКомпановки = КомпоновщикНастроек.ПолучитьНастройки();
		
		КоллекцияПараметров = НастройкиКомпановки.ПараметрыДанных;
		Параметр_Период = КоллекцияПараметров.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(""Период""));
		Если Параметр_Период<> Неопределено Тогда 
			 ЗначениеПараметраПериод = Параметр_Период.Значение;
			 ДатаНачало = ЗначениеПараметраПериод.ДатаНачало;
			 ДатаОкончания = ЗначениеПараметраПериод.ДатаОкончания;

		Иначе
			ДатаНачало = '00010101';
			ДатаОкончания = '00010101';
		КонецЕсли;	
		ТаблицаЖурнала = Новый ТаблицаЗначений;
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить(""ДатаНачала"", ДатаНачало);
		СтруктураОтбора.Вставить(""ДатаОкончания"", ДатаОкончания);
		СтруктураОтбора.Вставить(""Добавление"",""_$Data$_.New""); 
		СтруктураОтбора.Вставить(""Удаление"",""_$Data$_.Delete"");
		СтруктураОтбора.Вставить(""УдалениеПредопределенныхДанных"",""_$Data$_.DeletePredefinedData"");
		СтруктураОтбора.Вставить(""ДобавлениеПредопределенныхДанных"",""_$Data$_.NewPredefinedData"");
		СтруктураОтбора.Вставить(""Проведение"",""_$Data$_.Post"");
		СтруктураОтбора.Вставить(""ОтменаПроведения"",""_$Data$_.Unpost"");
		СтруктураОтбора.Вставить(""Метаданные"",Метаданные.Документы.ПоступлениеТоваров);	
		Колонки = ""Дата,ИмяПользователя,Данные"";
		ВыгрузитьЖурналРегистрации(ТаблицаЖурнала,СтруктураОтбора,Колонки);

		//3. получение макета компановки данных
		КомпановщикМакета  = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпановки = КомпановщикМакета.Выполнить(СхемаКомпоновкиДанных,НастройкиКомпановки);
		
		//4. получение результата отчета (выполнение компановки)
		ВнешниеНаборыДанных = Новый Структура(""ЖурналРегистрации"",ТаблицаЖурнала);  
		
		ПроцессорКомпановки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпановки.Инициализировать(МакетКомпановки,ВнешниеНаборыДанных);
		
		//5. вывод результата компановки
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
		ПроцессорВывода.Вывести(ПроцессорКомпановки);
"}
},
{0,
{"ОтчетОткрытиеОтчетаИзФормыОбъекта(Пример список номенклатуры)",0,0,"","// Сформировали отчет с использованием СКД по нужным условиям
//далее в форме нужного объекта (пример спр номенклатура форма списка) формируем кнопку для вывода отчета

&НаКлиенте
Процедура СписокНоммменклатуры(Команда)
	Результат = ВывестиСписокНоменклатуры();  
	Результат.ОтображатьСетку = Ложь;
	Результат.ОтображатьЗаголовки = Ложь;
	Результат.Показать();
КонецПроцедуры

// Функция ВывестиСписокНоменклатуры() описывает логику обращения на выполнение к сосданному отчету 

&НаСервереБезКонтекста
Функция  ВывестиСписокНоменклатуры()
	//В качестве схемы компоновки данных используем макет отчета ""СписокНоменклатуры""
	СхемаКомпановкиДанных = Отчеты.Пример4СписокНоменклатуры.ПолучитьМакет(""ОсновнаяСхемаКомпоновкиДанных"");
	// получим настройки по умолчанию
	Настройки = СхемаКомпановкиДанных.НастройкиПоУмолчанию;
	
	//Сформируем макет компановки данных
	КомпановщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпанови = КомпановщикМакета.Выполнить(СхемаКомпановкиДанных,Настройки);
	
	//Выводим компановку данных
	ПроцессорКомпановкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпановкиДанных.Инициализировать(МакетКомпанови);
	
	//Выведем результат компановки в табличный документ
	ДокументРезультат = Новый ТабличныйДокумент;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);  
	ПроцессорВывода.Вывести(ПроцессорКомпановкиДанных);
	
	Возврат ДокументРезультат;
КонецФункции	
"}
},
{0,
{"Автомотическое формирование отчета",0,0,""," //Создаем форму отчета 
 //Последовательность событий на форме до компановки результата отчета
 //Модуль_ФОРМЫ_ОТЧЕТА
 // ПриСозданииНаСервере()
 // ПередЗагрузкойВариантаНаСервере()
 // ПриЗагрузкеВариантаНаСервере()
 // ПередЗагрузкойПользовательскихНастроекНаСервере()
 // ПриЗагрузкеПользовательскихНастроекНаСервере()
 //Модуль_ОБЪЕКТА
 // ПриКомпоновкеРезультата()
 &НаСервере
 Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка) 
	//формирование отчета сразу при открытии формы отчета 
	Параметры.СформироватьПриОткрытии=Истина;  	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеВариантаНаСервере(Настройки)        
	//Задаем параметры настроек перед их загрузкой в компоновщик
	Настройки.ПараметрыВывода.УстановитьЗначениеПараметра(""Заголовок"",""Приход/Расход номенклатуры"");
	Настройки.параметрыДанных.УстановитьЗначениеПараметра(""НачалоПериода"",'20190101');
	Настройки.параметрыДанных.УстановитьЗначениеПараметра(""КонецПериода"",'20231231');	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойПользовательскихНастроекНаСервере(Настройки, ИспользуютсяСтандартныеНастройки)
	//перехватываем пользовательские настройки параметров
	Настройки.Элементы[0].Значение = '20190101';
	Настройки.Элементы[0].Использование = Истина;
	Настройки.Элементы[1].Значение = '20231231';
	Настройки.Элементы[1].Использование = Истина;	
КонецПроцедуры
"}
}
},
{4,
{"Работа с внешними файлами",1,0,"",""},
{21,
{"Работа с Excel",1,0,"",""},
{0,
{"Чтение_данных_из_таблицы",0,0,"","//создаем объект для работы с Excel
Excel = Новый COMОбъект(""Excel.Application"");

//открываем таблицу C:\tmp\1.xlsx
WorkBook = Excel.WorkBooks.Open(""C:\tmp\1.xlsx"");

//получаем доступ к первому листу таблицы
Sheet = WorkBook.WorkSheets(1);

ВсегоСтолбцов = 2;

Таб = Новый ТаблицаЗначений;
Таб.Колонки.Добавить(""ИмяКолонки1"");
Таб.Колонки.Добавить(""ИмяКолонки2"");

//считываем все данные в таблицу значений
НомСтроки = 1;
Пока Истина Цикл
Код = Sheet.Cells(НомСтроки, 1).Value;
//прерываемся если значение первого
//столбца пустое
Если Код = Неопределено Тогда
Прервать;
КонецЕсли;
Значение = Sheet.Cells(НомСтроки, 1).Value;

Строка = Таб.Добавить();
Строка.Код = ИмяКолонки1;
Строка.Значение = ИмяКолонки2;

НомСтроки = НомСтроки + 1;
КонецЦикла;
//Закрываем Excel
Excel.ActiveWorkbook.Close();
//закрываем таблицу"}
},
{0,
{"Форматирования_текста",0,0,"","//создаем объект для работы с Excel
Excel = Новый COMОбъект(""Excel.Application"");

//создаем новую таблицу
WorkBook = Excel.WorkBooks.Add();

//получаем доступ к первому листу таблицы
Sheet = WorkBook.WorkSheets(1);

Sheet.Cells(2, 2).Value = ""Текст"";
//название шрифта
Sheet.Cells(2, 2).Font.Name = ""Verdana"";
//размер шрифта
Sheet.Cells(2, 2).Font.Size = 16;
//жирный шрифт - 1, обычный - 0
Sheet.Cells(2, 2).Font.Bold = 1;
//курсив - 1, обычный - 0
Sheet.Cells(2, 2).Font.Italic = 1;
//подчеркнутый - 2, обычный - 1
Sheet.Cells(2, 2).Font.Underline = 2;

//показываем документ на экране
Excel.Visible = Истина;"}
},
{0,
{"Рамки_вокруг_ячеек",0,0,"","//создаем объект для работы с Excel
Excel = Новый COMОбъект(""Excel.Application"");

//создаем новую таблицу
WorkBook = Excel.WorkBooks.Add();

//создаем объект для работы с Excel
Excel = Новый COMОбъект(""Excel.Application"");

//создаем новую таблицу
WorkBook = Excel.WorkBooks.Add();

//получаем доступ к первому листу таблицы
Sheet = WorkBook.WorkSheets(1);

//все рамки толкой, сплошной линией
Range = Sheet.Range(
Sheet.Cells(2, 2),
Sheet.Cells(3, 3));
Range.Borders.Linestyle = 1;

//внешние рамки толстой, сплошной
Range = Sheet.Range(
Sheet.Cells(2, 5),
Sheet.Cells(3, 6));
Для Н = 1 По 4 Цикл
Range.Borders(Н).Linestyle = 1;
Range.Borders(Н).Weight = 4;
КонецЦикла;
//внутренние рамки средней прерывистой
Для Н = 11 По 12 Цикл
Range.Borders(Н).Linestyle = -4115;
Range.Borders(Н).Weight = -4138;
КонецЦикла;

//показываем документ на экране
Excel.Visible = Истина;"}
},
{0,
{"Перенос_текста_по_словам",0,0,"","//создаем объект для работы с Excel
Excel = Новый COMОбъект(""Excel.Application"");

//создаем новую таблицу
WorkBook = Excel.WorkBooks.Add();

//получаем доступ к первому листу таблицы
Sheet = WorkBook.WorkSheets(1);

Sheet.Cells(1, 1).Value =
""Очень днинный текст"";
Sheet.Cells(1, 1).RowHeight = 45;
Sheet.Cells(1, 1).WrapText = Истина;

//показываем документ на экране
Excel.Visible = Истина;"}
},
{0,
{"Открытие_таблицы",0,0,"","//создаем объект для работы с Excel
Excel = Новый COMОбъект(""Excel.Application"");

//открываем таблицу C:\tmp\1.xlsx
WorkBook = Excel.WorkBooks.Open(""C:\tmp\1.xlsx"");

//показываем документ на экране
Excel.Visible = Истина;"}
},
{0,
{"Определение_формата_ячейки",0,0,"","//создаем объект для работы с Excel
Excel = Новый COMОбъект(""Excel.Application"");

//создаем новую таблицу
WorkBook = Excel.WorkBooks.Add();

//получаем доступ к первому листу таблицы
Sheet = WorkBook.WorkSheets(1);

//задаем значение и числовой формат ячейки
Sheet.Cells(1, 1).Value = 1000000;
Sheet.Cells(1, 1).NumberFormat = ""# ##0.00"";

//задаем значение и строковый формат ячейки
Sheet.Cells(1, 3).NumberFormat = ""@"";
Sheet.Cells(1, 3).Value = ""112233445566778899"";

//показываем документ на экране
Excel.Visible = Истина;"}
},
{0,
{"Объеденение_ячеек",0,0,"","//создаем объект для работы с Excel
Excel = Новый COMОбъект(""Excel.Application"");

//создаем новую таблицу
WorkBook = Excel.WorkBooks.Add();

//получаем доступ к первому листу таблицы
Sheet = WorkBook.WorkSheets(1);

Sheet.Cells(1, 1).Value =
    ""Очень длинный заголовок"";

//объединяем с 1-й по 3-ю ячейки
//первой строки
Sheet.Range(
    Sheet.Cells(1, 1),
    Sheet.Cells(1, 3)).Merge();

//показываем документ на экране
Excel.Visible = Истина;"}
},
{0,
{"Изминение_ширины_столбцов",0,0,"","//создаем объект для работы с Excel
Excel = Новый COMОбъект(""Excel.Application"");

//создаем новую таблицу
WorkBook = Excel.WorkBooks.Add();

//получаем доступ к первому листу таблицы
Sheet = WorkBook.WorkSheets(1);

//задаем ширину первых 5-ти столбцов
Для Н = 1 По 5 Цикл
    Sheet.Columns(Н).ColumnWidth = Н * 10;
КонецЦикла;

//показываем документ на экране
Excel.Visible = Истина;"}
},
{0,
{"Изменение цвета ячеек",0,0,"","//создаем объект для работы с Excel
Excel = Новый COMОбъект(""Excel.Application"");

//создаем новую таблицу
WorkBook = Excel.WorkBooks.Add();

//получаем доступ к первому листу таблицы
Sheet = WorkBook.WorkSheets(1);

Sheet.Cells(2, 2).Value = ""Текст"";
//желтый цвет текста
Sheet.Cells(2, 2).Font.Color = -16711681;
//черный цвет фона
Sheet.Cells(2, 2).Interior.Color = 526344;

//показываем документ на экране
Excel.Visible = Истина;"}
},
{0,
{"Изменение_ориентации_листа",0,0,"","//создаем объект для работы с Excel
Excel = Новый COMОбъект(""Excel.Application"");

//создаем новую таблицу
WorkBook = Excel.WorkBooks.Add();

//получаем доступ к первому листу таблицы
Sheet = WorkBook.WorkSheets(1);

//1 - книжная, 2- альбомная
Sheet.PageSetup.Orientation = 2;

//показываем документ на экране
Excel.Visible = Истина;"}
},
{0,
{"Изменение_имени_листа",0,0,"","//создаем объект для работы с Excel
Excel = Новый COMОбъект(""Excel.Application"");

//создаем новую таблицу
WorkBook = Excel.WorkBooks.Add();

//получаем доступ к первому листу таблицы
Sheet = WorkBook.WorkSheets(1);

//задаем имя листа Excel
Sheet.Name = ""НовоеИмя"";

//показываем документ на экране
Excel.Visible = Истина;"}
},
{0,
{"Изменение_высоты_строк",0,0,"","//создаем объект для работы с Excel
Excel = Новый COMОбъект(""Excel.Application"");

//создаем новую таблицу
WorkBook = Excel.WorkBooks.Add();

//получаем доступ к первому листу таблицы
Sheet = WorkBook.WorkSheets(1);

//меняем высоту первой строки
Sheet.Rows(1).RowHeight = 30;

//меняем высоту со 2-й по 5-ю
Range = Sheet.Range(
    Sheet.Cells(2, 1),
    Sheet.Cells(5, 1));
Range.RowHeight = 10;

//показываем документ на экране
Excel.Visible = Истина;"}
},
{0,
{"Задание_отступов_для_печати",0,0,"","//создаем объект для работы с Excel
Excel = Новый COMОбъект(""Excel.Application"");

//создаем новую таблицу
WorkBook = Excel.WorkBooks.Add();

//получаем доступ к первому листу таблицы
Sheet = WorkBook.WorkSheets(1);

//задаем левый отспут 3 см
Sheet.PageSetup.LeftMargin =
    Excel.CentimetersToPoints(3);
//RightMargin - правый отступ
//TopMargin - верхний отступ
//BottomMargin - нижний отступ

//показываем документ на экране
Excel.Visible = Истина;"}
},
{0,
{"Выравнивание_текста_в_ячейке",0,0,"","//создаем объект для работы с Excel
Excel = Новый COMОбъект(""Excel.Application"");

//создаем новую таблицу
WorkBook = Excel.WorkBooks.Add();

//получаем доступ к первому листу таблицы
Sheet = WorkBook.WorkSheets(1);

Sheet.Cells(2, 2).Value = ""Текст"";
Sheet.Columns(2).ColumnWidth = 100;
Sheet.Rows(2).RowHeight = 100;

//по центру по вертикли
//левое - 1, правое - 3
Sheet.Cells(2, 2).VerticalAlignment = 2;
//по центру по горизонтали
//верхнее - 2, нижнее - 4 
Sheet.Cells(2, 2).HorizontalAlignment = 3;

//показываем документ на экране
Excel.Visible = Истина;"}
},
{0,
{"Выгрузка_данных_в_таблицу",0,0,"","//создаем объект для работы с Excel
Excel = Новый COMОбъект(""Excel.Application"");

//создаем новую таблицу
WorkBook = Excel.WorkBooks.Add();

//получаем доступ к первому листу таблицы
Sheet = WorkBook.WorkSheets(1);

//таблица значений, выгружаемая в Excel
Таб = ПолучитьТабЗначений();

//переносим заголовки столбцов
НомСтолбца = 1;
НомСтроки = 1;
Для Каждого Колонка Из Таб.Колонки Цикл
    Sheet.Cells(НомСтроки, НомСтолбца).Value = Колонка.Имя;
    НомСтолбца = НомСтолбца + 1;
КонецЦикла;

//переносим данные
Количество = Таб.Колонки.Количество();
Для Каждого Строка из Таб Цикл
    НомСтроки = НомСтроки + 1;
    Для Н = 0 По Количество - 1 Цикл
        Sheet.Cells(НомСтроки, Н + 1).Value = Строка[Н];
    КонецЦикла;
КонецЦикла;

//сохраняем таблицу
WorkBook.SaveAs(""C:\tmp\2.xlsx"");

//закрываем таблицу
Excel.Application.Quit();


&НаСервере
Функция ПолучитьТабЗначений()
    Таб = Новый ТаблицаЗначений;
    Таб.Колонки.Добавить(""Код"");
    Таб.Колонки.Добавить(""Значение"");

    Строка = Таб.Добавить();
    Строка.Код = 1;
    Строка.Значение = ""Один"";

    Строка = Таб.Добавить();
    Строка.Код = 2;
    Строка.Значение = ""Два"";

    Возврат Таб;
КонецФункции"}
},
{0,
{"Вставка_формул",0,0,"","//создаем объект для работы с Excel
Excel = Новый COMОбъект(""Excel.Application"");

//создаем новую таблицу
WorkBook = Excel.WorkBooks.Add();

//получаем доступ к первому листу таблицы
Sheet = WorkBook.WorkSheets(1);

Для Н = 1 По 5 Цикл
    Sheet.Cells(Н, 1).Value = Н * 2;
    Sheet.Cells(Н, 2).Value = Н * 3;
КонецЦикла;

//формула с прямыми ссылками на ячейки
Sheet.Cells(6, 1).Formula = ""=sum(A1:A5)"";

//формула с относительними ссылками на ячейки
Sheet.Cells(6, 2).Formula = ""=sum(R[-1]C:R[-5]C)"";

//показываем документ на экране
Excel.Visible = Истина;"}
},
{0,
{"Вставка_массива_данных",0,0,"","//создаем объект для работы с Excel
Excel = Новый COMОбъект(""Excel.Application"");

//создаем новую таблицу
WorkBook = Excel.WorkBooks.Add();

//получаем доступ к первому листу таблицы
Sheet = WorkBook.WorkSheets(1);

//заполняем массив таблицей умножения   
data = Новый COMSafeArray(""VT_VARIANT"", 9, 9);
Для Н1 = 1 По 9 Цикл
    Для Н2 = 1 По 9 Цикл
        data.SetValue(Н1 - 1, Н2 - 1, Н1 * Н2);
    КонецЦикла;
КонецЦикла;

//выгружаем массив в Excel
//вставка массива происходит значительно
//быстрее, чем заполнение отдельных ячеек
Range = Sheet.Range(
    Sheet.Cells(1, 1),
    Sheet.Cells(9, 9));
Range.Value = data;

//показываем документ на экране
Excel.Visible = Истина;"}
},
{0,
{"Автоопределение_ширины_столбцов",0,0,"","//создаем объект для работы с Excel
Excel = Новый COMОбъект(""Excel.Application"");

//создаем новую таблицу
WorkBook = Excel.WorkBooks.Add();

//получаем доступ к первому листу таблицы
Sheet = WorkBook.WorkSheets(1);

//заносим информацию в ячейки
строка = """";
Для н = 1 По 9 Цикл
    строка = строка + н;
    Sheet.Cells(1, н).Value = строка;
КонецЦикла;

//автоопределение ширины первого столбца
Sheet.Columns(1).AutoFit();

//автоопределение ширины со 2-го по 9-й
Range = Sheet.Range(
    Sheet.Cells(1, 2),
    Sheet.Cells(1, 9));
Range.EntireColumn.AutoFit();

//показываем документ на экране
Excel.Visible = Истина;"}
},
{0,
{"Получение списка имён листов",0,0,"","Эксель = новый COMОбъект(""Excel.Application"");
Книга = Эксель.WorkBooks.Open(""C:\file.xls"");
КоличествоЛистов = Книга.Sheets.Count;
МассивИмёнЛистов = новый Массив;
для сс = 1 По КоличествоЛистов Цикл
    МассивИмёнЛистов.Добавить(Книга.Sheets(сс).Name);
КонецЦикла;
Эксель.Application.Quit();
//
//использование
ЛистЕксель = МассивИмёнЛистов[0];
Лист = Книга.WorkSheets(ЛистЕксель);"}
},
{0,
{"Определяем количество заполненных строк и колонок",0,0,"","//Получим количество строк и колонок.
//В разных версиях Excel получаются по-разному, поэтому сначала определим версию Excel
Версия = Лев(Excel.Version,Найти(Excel.Version,""."")-1);
Если Версия = ""8"" тогда
ФайлСтрок = Excel.Cells.CurrentRegion.Rows.Count;
ФайлКолонок = Макс(Excel.Cells.CurrentRegion.Columns.Count, 13);
Иначе
ФайлСтрок = Excel.Cells(1,1).SpecialCells(11).Row;
ФайлКолонок = Excel.Cells(1,1).SpecialCells(11).Column;
Конецесли;"}
},
{0,
{"Закрыть Excel в 1С после считывания данных",0,0,"","  Excel.DisplayAlerts = 0; 
  Excel.Quit();
  Excel.DisplayAlerts = 1;"}
}
},
{11,
{"Работа с Word",1,0,"",""},
{0,
{"Вставка_текста",0,0,"",""}
},
{0,
{"Выделение_текста",0,0,"",""}
},
{0,
{"Выравнивание_текста",0,0,"",""}
},
{0,
{"Замена_текста",0,0,"",""}
},
{0,
{"Открытие_документа",0,0,"",""}
},
{0,
{"Преобразование_в_Таблицу",0,0,"",""}
},
{0,
{"Создание_документа",0,0,"",""}
},
{0,
{"Сохранение_документа",0,0,"",""}
},
{0,
{"Удаление_текста",0,0,"","//создаем объект для работы с Word
Word = Новый COMОбъект(""Word.Application"");

//создаем новый документ
Doc = Word.Documents.Add();

//добавляем параграф
Par = Doc.Paragraphs.Add();
Par.Range.InsertBefore(""Некоторый текст"");

//удаляем слово некоторый и пробел
Range = Doc.Range(0, 10);
Range.Text = """";

//показываем документ на экране
Word.Visible = Истина;"}
},
{0,
{"Форматирование_текста",0,0,"","//создаем объект для работы с Word
Word = Новый COMОбъект(""Word.Application"");

//создаем новый документ
Doc = Word.Documents.Add();

//добавляем параграф
Par = Doc.Paragraphs.Add();
Par.Range.InsertBefore(""Форматируем этот текст"");
//меняем размер шрифта
Par.Range.Font.Size = 15;
//меняем название шрифта
Par.Range.Font.Name = ""Verdana"";

//выбираем слово ""этот""
Range = Doc.Range(12, 16);
//меняем шрифт на ширный
Range.Font.Bold = Истина;
//курсив
Range.Font.Italic = Истина;
//подчеркнутый
Range.Font.Underline = Истина;
//красный
Range.Font.Color = 13311;

//показываем документ на экране
Word.Visible = Истина;"}
},
{0,
{"Чтение_текста_документа",0,0,"","//создаем объект для работы с Word
Word = Новый COMОбъект(""Word.Application"");

//открываем документ C:\tmp\1.docx
Doc = Word.Documents.Open(""C:\tmp\1.docx"");

//читаем весь текст документа
Text = doc.Content.Text;
Сообщить(Text);

//читаем с 6-го по 10-й символ
From = 6;
To = 10;
Range = Doc.Range(From, To);
Text = Range.Text;
Сообщить(Text);

//закрыть документ
Doc.Close();
Word.Quit();"}
}
},
{2,
{"ДиалогВыбораФайла",1,0,"",""},
{0,
{"ДиалогВыбораФайла",0,0,"","//Открываем стандартный диалог Windows выбора каталога/файла в режиме выбора каталога
Диалог = Новый 
ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
//Если пользователь не нажал кнопку ОТМЕНА в диалоге
Если Диалог.Выбрать() Тогда
      ИмяКаталога = Диалог.Каталог;
КонецЕсли;
Сообщить(ИмяКаталога);
"}
},
{0,
{"ДиалогВыбораФайла2",0,0,""," //Открываем стандартный диалог Windows выбора каталога/файла в режиме выбора файла на сохранение
Диалог = Новый 
ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
//каталог по-умолчанию, можно не указывать
Диалог.Каталог = ""C:\"";
//фильтр для одного вида файлов, для нескольких – см. следующий пример
Диалог.Фильтр = ""Текстовый файл (*.txt)|*.txt|"";      //""Документ Excel (*.xls, *.xlsx)|*.xls;*.xlsx|""
//Если пользователь не нажал кнопку ОТМЕНА в диалоге
Если Диалог.Выбрать() Тогда
//Полное имя файла – с учетом «пути к нему» (имени каталога к нему)
    ИмяФайла = Диалог.ПолноеИмяФайла;
КонецЕсли;
Сообщить(ИмяФайла);"}
}
},
{2,
{"Работы с файлами",1,0,"",""},
{2,
{"Операции над файлами",1,0,"",""},
{0,
{"Как проверить существование файла",0,0,"","ФайлНаДиске = Новый Файл(""c:\file_src.txt"");
    Если ФайлНаДиске.Существует() Тогда
        Сообщить(""c:\file_src.txt существует"");
    КонецЕсли;"}
},
{0,
{"Как скопировать файл",0,0,"","КопироватьФайл(
        ""c:\file_src.txt"", // что копируем
        ""c:\file_dest.txt"" // куда копируем
    ); // перезапишет, если уже есть такой файл"}
}
},
{0,
{"НачатьПоискФайлов",0,0,"","&НаКлиенте
Процедура АсинхронныеМетоды()
 
 ОбратныйВызов = Новый ОписаниеОповещения(""ОбработкаЗавершения"", ЭтотОбъект, ""доп. параметры"", ""ОбработкаОшибки"", ЭтотОбъект); 
 
 //поищем файлы в папке tmp
 НачатьПоискФайлов(ОбратныйВызов, ""D:\tmp"", ""*.*"");
 
КонецПроцедуры
// разместить на форме где работают  
&НаКлиенте
Процедура ОбработкаЗавершения(НайденныеФайлы, ДополнительныеПараметры) Экспорт
 
 //выводим список найденых файлов
 Для Каждого Файл Из НайденныеФайлы Цикл
 Сообщить(Файл.ПолноеИмя);
 КонецЦикла; 
 
 //дополнительный параметр указанный в описании оповещения
 Сообщить(ДополнительныеПараметры);
 
КонецПроцедуры
 
&НаКлиенте
Процедура ОбработкаОшибки(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
 
 Сообщить(""Ошибка поиска файлов: "" + КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
 
 Сообщить(ДополнительныеПараметры);
 
КонецПроцедуры"}
}
}
},
{16,
{"Формы",1,0,"",""},
{2,
{"Временное хранилище",1,0,"",""},
{0,
{"Передача_с_сервера_на_форму",0,0,"","&НаКлиенте
//Получаем с сервера адрес врем. хранилища
Адрес = ПолучитьАдресСтруктуры();
//Получаем по адреу значение
Монитор = ПолучитьИзВременногоХранилища(Адрес);
//Используем значение на клиенте
Сообщить(Монитор.Контрастность);

&НаСервереБезКонтекста

Функция ПолучитьАдресСтруктуры()
    //Создаем структуру
    Монитор = Новый Структура(
        ""Диагональ,Контрастность,Матрица"",
        23, ""1000:1"", ""IPS"");
    //Помещаем во врем. хранилище
    Адрес = ПоместитьВоВременноеХранилище(Монитор);
	//Возвращаем адрес
    Возврат Адрес;

КонецФункции"}
},
{0,
{"Между_серверными_вызовами",0,0,"","//Получаем с сервера адрес врем. хранилища
Адрес = ПолучитьАдресТаблицы();
//Передаем адрес в серверную процедуру
ОбработкаТаблицы(Адрес);

&НаСервереБезКонтекста

Функция ПолучитьАдресТаблицы()
    //Создаем таблицу значений
    Товары = Новый ТаблицаЗначений;
    Товары.Колонки.Добавить(""Товар"");
    Товары.Колонки.Добавить(""Цена"");
    Товар = Товары.Добавить();
    Товар.Товар = ""Чайник"";
    Товар.Цена = 2500.5;
    //Помещаем во врем. хранилище
    Возврат ПоместитьВоВременноеХранилище(Товары);
КонецФункции


&НаСервереБезКонтекста

Процедура ОбработкаТаблицы(Адрес)

    //Получаем по адресу значение

    Товары = ПолучитьИзВременногоХранилища(Адрес);

    //Работаем с таблицей значений

    Сообщить(Товары.Количество());

КонецПроцедуры"}
}
},
{3,
{"Настройки отображения формы",1,0,"",""},
{0,
{"Изменение_высоты_и_ширины",0,0,"","//Получаем форму создания новой записи регистра сведений ""Цены""
Форма = ПолучитьФорму(""РегистрСведений.Цены.ФормаЗаписи"");
//Показываем форму
Форма.Открыть();
//Меняем высоту и ширину
Форма.Высота = 15;
Форма.Ширина = 15;"}
},
{0,
{"Изменение_группировки_элементов",0,0,"","//Получаем форму создания новой
//записи регистра сведений ""Цены""
Форма = ПолучитьФорму(""РегистрСведений.Цены.ФормаЗаписи"");
//Показываем форму
Форма.Открыть();
//Меняем группировку элементов формы на горизонтальную
Форма.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;"}
},
{0,
{"Изменение_доступности_формы",0,0,"","//Получаем форму создания новой
//записи регистра сведений ""Цены""
Форма = ПолучитьФорму(""РегистрСведений.Цены.ФормаЗаписи"");
//Показываем форму
Форма.Открыть();
//Блокируем дуступ к элементам формы
Форма.Доступность = Ложь;"}
}
},
{10,
{"Открытие формы",1,0,"",""},
{0,
{"Открыть_объект_с_оповещением",0,0,"","//Получаем склад ""Основной""
Склад = ПолучитьОсновнойСклад();
//Указываем процедуру, вызываемую
//при изменении реквизитов склада
Оповещение = Новый ОписаниеОповещения(
    ""ОбработатьРезультат"", ЭтотОбъект);
//Отображаем форму склада
ПоказатьЗначение(Оповещение, Склад);
//Процедура обработки изменений
&НаКлиенте
Процедура ОбработатьРезультат(Склад) Экспорт
       Сообщить(Склад);
КонецПроцедуры"}
},
{0,
{"Открыть_форму",0,0,"","//Способ №1
ОткрытьФорму(""Справочник.Сотрудники.ФормаСписка"");
//Способ №2
Форма = ПолучитьФорму(""Справочник.Сотрудники.ФормаСписка"");
Форма.Открыть();"}
},
{0,
{"Открыть_форму_выбора",0,0,"",""}
},
{0,
{"Открыть_форму_Модально",0,0,"","//Способ №1
ОткрытьФормуМодально(""Справочник.Сотрудники.ФормаСписка"");
//Способ №2
Форма = ПолучитьФорму(""Справочник.Сотрудники.ФормаСписка"");
Форма.ОткрытьМодально();"}
},
{0,
{"Открыть_форму_объекта",0,0,"","&НаКлиенте
Процедура ПоказатьОсновнойСклад() Экспорт
    //Получаем склад ""Основной""
    Склад = ПолучитьОсновнойСклад();
    ПоказатьЗначение(, Склад);

КонецПроцедуры

&НаСервере
Функция ПолучитьОсновнойСклад()
    Возврат Справочники.Склады.Основной;
КонецФункции"}
},
{0,
{"Открыть_форму_с_отбором",0,0,"","Отбор = Новый Структура;
Отбор.Вставить(""Должность"", ""Матрос"");
Параметры = Новый Структура(""Отбор"", Отбор);
//Открываем форму списка справочника сотрудники
//с отбором по должности ""Матрос""
ОткрытьФорму(""Справочник.Сотрудники.ФормаСписка"", Параметры);"}
},
{0,
{"Передача параметров в управляемые формы",0,0,"","//В месте получения формы 
ПараметрыСтруктура = Новый Структура(""НовыйПараметр"",ПоследнийЭлемент);
ФормаВыбора = ПолучитьФорму(""Справочник.Номенклатура.ФормаВыбора"",ПараметрыСтруктура);

//В модуле управляемой формы  

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    Если Параметры.Свойство(""НовыйПараметр"") Тогда
        // здесь код обработки параметра
    КонецЕсли;
КонецПроцедуры"}
},
{0,
{"Передача параметров в обычные формы",0,0,"","Форма = Объект.ПолучитьФорму(""ФормаВыбора"",ВладелецФормы, КлючУникальности);
Форма.Параметр = ЗначениеПараметра;
Форма.Открыть();"}
},
{0,
{"Как открыть общую форму?",0,0,"","//Здесь ОбщаяФорма - это стандартное указание на одну из общих форм, 
//а МояОбщаяФорма – это имя общей формы, созданной в конфигураторе. 
ОткрытьФорму(""ОбщаяФорма.МояОбщаяФорма""); 
//ИЛИ
Фрм=ПолучитьФорму(""ОбщаяФорма.ФормаВыбораНоменклатуры"",);
Фрм.Открыть();
"}
},
{0,
{"Получить параметры из закрываемой формы",0,0,"","//Пишем в модуле формы в методе ПриЗакрытии()
// параметры получаемые формой — родителем в структуру и передать через функцию  ОповеститьОВыборе()  
&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить(""Глава"",Глава);
	СтруктураВозврата.Вставить(""Счетчик"",Счетчик); 
	
	ОповеститьОВыборе(СтруктураВозврата);
КонецПроцедуры     

// в форме родителя пишем метод   ОбработкаВыбора()
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Глава = ВыбранноеЗначение.Глава;
	Счетчик = ВыбранноеЗначение.Счетчик;
	
КонецПроцедуры

"}
}
},
{9,
{"Получить форму",1,0,"",""},
{0,
{"Форма_документа",0,0,"","//Получаем форму списка документа ""ОказаниеУслуги""
Форма = ПолучитьФорму(""Документ.ОказаниеУслуги.ФормаСписка"");
Форма.Открыть();
//Получаем форму создания нового
//документа ПриходнаяНакладная
Форма = ПолучитьФорму(""Документ.ПриходнаяНакладная.ФормаОбъекта"");
Форма.Открыть();"}
},
{0,
{"Форма_констант",0,0,"","//Форма констант должна быть определена в
//конфигурации в разделе:
//Общие->Общие формы
Форма = ПолучитьФорму(""ОбщаяФорма.ФормаКонстант"");
Форма.Открыть();
//Форма константы ""Экспонента""
Форма = ПолучитьФорму(""Константа.Экспонента.ФормаКонстант"");
Форма.Открыть();"}
},
{0,
{"Форма_отчета",0,0,"","//Форма отчета ""Перерасчет""
Форма = ПолучитьФорму(""Отчет.Перерасчет.Форма"");
Форма.Открыть();
//Форма настроек отчета ""Перерасчет""
Форма = ПолучитьФорму(""Отчет.Перерасчет.ФормаНастроек"");
Форма.Открыть();"}
},
{0,
{"Форма_плана-счетов",0,0,"","//Получаем форму списка плана счетов ""Основной""
Форма = ПолучитьФорму(""ПланСчетов.Основной.ФормаСписка"");
Форма.Открыть();
//Получаем форму создания нового
//счета плана счетов ""Основной""
Форма = ПолучитьФорму(""ПланСчетов.Основной.ФормаОбъекта"");
Форма.Открыть();"}
},
{0,
{"Форма_регистра_бугалтерии",0,0,"","//Форма регистра бухгалтерии ""Управленческий""
Форма = ПолучитьФорму(""РегистрБухгалтерии.Управленческий.ФормаСписка"");
Форма.Открыть();"}
},
{0,
{"Форма_регистра_накопления",0,0,"","//Форма регистра накоплений ""ОстаткиМатериалов""
Форма = ПолучитьФорму(""РегистрНакопления.ОстаткиМатериалов.ФормаСписка"");
Форма.Открыть();"}
},
{0,
{"Форма_регистра_расчета",0,0,"","//Форма регистра расчета ""Начисления""
Форма = ПолучитьФорму(""РегистрРасчета.Начисления.ФормаСписка"");
Форма.Открыть();"}
},
{0,
{"Форма_регистра_сведений",0,0,"","//Форма регистра сведений ""Цены""
Форма = ПолучитьФорму(""РегистрСведений.Цены.ФормаСписка"");
Форма.Открыть();
//Получаем форму создания новой
//записи регистра сведений ""Цены""
Форма = ПолучитьФорму(""РегистрСведений.Цены.ФормаЗаписи"");
Форма.Открыть();"}
},
{0,
{"Форма_справочника",0,0,"","//Получаем форму списка справочника ""Сотрудники""
Форма = ПолучитьФорму(""Справочник.Сотрудники.ФормаСписка"");
Форма.Открыть();
//Получаем форму создания нового элемента
//справочника Склады
Форма = ПолучитьФорму(""Справочник.Склады.ФормаОбъекта"");
Форма.Открыть();
//Получаем форму создания новой группы
//справочника Номенклатура
Параметры = Новый Структура(""ЭтоГруппа"", Истина);
Форма = ПолучитьФорму(
    ""Справочник.Номенклатура.ФормаГруппы"",
    Параметры);
Форма.Открыть();"}
}
},
{1,
{"Работа с реквезитами",1,0,"",""},
{0,
{"Работа_с_реквезитами",0,0,"","//Стандартные реквизиты на примере
//работы с формой документа
Дата = Объект.Дата;
Номер = Объект.Номер;
Сообщить(Номер + "" от "" + Дата);
//изменение значения дополнительного реквизита
Объект.Покупатель =  Справочники.Контрагенты.НайтиПоКоду(""000000001"");"}
}
},
{5,
{"Работа с табличной частью",1,0,"",""},
{0,
{"Добавление_записи",0,0,"","Запись = Объект.<ИмяТаблицы>.Добавить();

Запись.<ИмяРеквезита> = Справочники.<ИмяСправочника>.НайтиПоКоду(""000000008"");

Запись.<ИмяРеквезита> = 5;

Запись.<ИмяРеквезита> = 2;"}
},
{0,
{"Перебор_Записей",0,0,"","Для Каждого Строка Из Объект.Товары Цикл
    Сообщить(Строка.Товар);
КонецЦикла;"}
},
{0,
{"Поиск_строк",0,0,"","//Параметры поиска ""Цена = 5""
Отбор = Новый Структура;
Отбор.Вставить(""Цена"", 5);
//Поиск строк
Строки = Объект.Товары.НайтиСтроки(Отбор);
//Перебор найденных строк
  Для Каждого Строка Из Строки Цикл
    Сообщить(Строка.Товар);
КонецЦикла;"}
},
{0,
{"Получить_количество_записей",0,0,"","Количество = Объект.Товары.Количество();
Сообщить(Количество);"}
},
{0,
{"Удаление-записи",0,0,"","Если Объект.Товары.Количество() > 0 Тогда
    //Удаляем первую запись
    Объект.Товары.Удалить(0);
КонецЕсли;

//Удаляем все записи
Объект.Товары.Очистить();"}
}
},
{2,
{"Работа с формой на сервере",1,0,"",""},
{0,
{"Реквезит_в_значение_и_обратно",0,0,"","&НаСервере
Процедура ОчиститьТаблицуТоваров()

 //Получаем объект документа
 ДокОбъект = РеквизитФормыВЗначение(""Объект"");
 //Работаем с объектом, например,
 //вызывая его метод:
 ДокОбъект.ОчиститьТаблицуТоваров();
 //Если объект изменен, то передаем объект обратно на форму
 ЗначениеВРеквизитФормы(ДокОбъект, ""Объект"");

КонецПроцедуры


//модуль объекта документа

Процедура ОчиститьТаблицуТоваров() Экспорт 

   ЭтотОбъект.Товары.Очистить();

КонецПроцедуры"}
},
{0,
{"Данные_формы_в_значение",0,0,"","//Модуль формы документа
&НаКлиенте
Процедура Очистить(Команда)
    ОбъектФормы = Объект;
    ОчиститьТовары(ОбъектФормы);
	КопироватьДанныеФормы(ОбъектФормы, Объект)
КонецПроцедуры


&НаСервереБезКонтекста

Процедура ОчиститьТовары(ОбъектФормы)

    //Получаем объект документа
	//ДанныеФормыВЗначение, в отличии от
    //РеквизитФормыВЗначение может работать
    //без контекста
    ДокОбъект = ДанныеФормыВЗначение(ОбъектФормы,
    Тип(""ДокументОбъект.ТестовыйДокумент""));
    //Работаем с объектом, например,
    //вызывая его метод:
    ДокОбъект.ОчиститьТаблицуТоваров();
    //Если объект изменен, то
	//передаем объект обратно на форму
    ЗначениеВДанныеФормы(ДокОбъект, ОбъектФормы);

КонецПроцедуры


//модуль объекта документа

Процедура ОчиститьТаблицуТоваров() Экспорт

    ЭтотОбъект.Товары.Очистить();

КонецПроцедуры"}
}
},
{1,
{"Кнопки",1,0,"",""},
{0,
{"Множесмвенный выбор",0,0,"","//&НаКлиенте
//Процедура <МножественныйВыборНазвание>(Команда)
	ПараметрыФормы = Новый Структура(""МножественныйВыбор"",Истина);
	ОткрытьФорму(""<Объект.НазваниеОбъекта.Форма.Название>"",ПараметрыФормы,Элементы.<Название>);
//КонецПроцедуры
//&НаКлиенте
//Процедура <НазваниеОбработкаВыбора>(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	// обработка заполнения
	Для Каждого ВыбранныйЭлемент из ВыбранноеЗначение Цикл
		НоваяСтрока = Объект.<НазваниеОбъекта>.Добавить();
		НоваяСтрока.<НазваниеРеквезита> = ВыбранныйЭлемент;
	КонецЦикла	
//КонецПроцедуры	
"}
}
},
{2,
{"Видимость реквезитов/элементов на форме",1,0,"",""},
{0,
{"Видимость элемента",0,0,"","Элементы.ГруппаСчета.Видимость = Ложь;"}
},
{0,
{"Аналог F5 Обновить форму",0,0,"","  //аналог F5
	ЭтаФорма.Элементы.Список.Обновить();"}
}
},
{2,
{"Оформление формы",1,0,"",""},
{0,
{"Условное оформление в управляемых формах",0,0,"","&НаСервере
Процедура РаботаСУсловнымОформлениемУФ()
	// Для Добавления элемента УО в списке нужно обратится к списку и добавить элемент УО
	ЭлементОформления = Список.УсловноеОформление.Элементы.Добавить();
	// Для УО формы добавление происходит через прикладной объект УсловноеОформление:
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	//Для УО нам нужно задать условие отбора, задать значение свойства УО и добавить оформляемые поля.
	
	// Создаем условие отбора
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип(""ЭлементОтбораКомпоновкиДанных""));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля); // имя поля
    ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; // либо задаем свой
	//**** Значение для отбора
	ЭлементОтбора.ПравоеЗначение = ЗначениеДляОтбора;
	// следует заметить что правым значением может выступать ПолеКомпоновкиДанных формы или списка
	ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
	//****
	ЭлементОтбора.Использование = Истина;
	
	// Установка значения элемента УО
	// Возможно обращение как по индексу так и установка через метод
	//1.
	Элемент = ЭлементОформления.Оформление.Элементы[0];
	Элемент.Значение = Цвет;
	//2.
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра(""ЦветФона"", WebЦвета.СеребристоСерый);

	Элемент.Использование = Истина;
	//Добавим поля оформления, если ничего не добавлять, то система применит оформления ко всей строке:

	// Создаем поля оформления
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ПолеДляОформления);
	ПолеОформления.Использование = Истина;
КонецПроцедуры	"}
},
{0,
{"Программное добавление элементов условного оформления формы(Пример2)",0,0,"","&НаСервере
Процедура УстановитьУсловноеОформление()         
                УсловноеОформление.Элементы.Очистить();
               
                ЭлементОформления = УсловноеОформление.Элементы.Добавить();


                ЭлементОформления.Оформление.УстановитьЗначениеПараметра(""ТолькоПросмотр"", Истина);
               
               ГруппаЭлементовОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип(""ГруппаЭлементовОтбораКомпоновкиДанных""));
                ГруппаЭлементовОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
                ГруппаЭлементовОтбора.Использование = Истина;
               
                ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип(""ЭлементОтбораКомпоновкиДанных""));
               ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(""АктивныйСчет"");  
               ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;   
               ЭлементОтбора.ПравоеЗначение = Истина;   
               ЭлементОтбора.Использование  = Истина;
               
                ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип(""ЭлементОтбораКомпоновкиДанных""));
               ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(""Объект.грУсловияОплатыТаблица.Редактирование"");  
               ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;   
               ЭлементОтбора.ПравоеЗначение = Ложь;      
               ЭлементОтбора.Использование  = Истина;


               ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();       
               ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(""грУсловияОплатыТаблица"");
               ПолеОформления.Использование = Истина;
КонецПроцедуры
Источник: https://career.i-neti.ru/1s-uf-programmnoe-dobavlenie-elementov-uslovnogo-oformleniya-formy"}
}
},
{1,
{"Картинки",1,0,"",""},
{0,
{"Разместить картинку на форме пропорционально",0,0,"","Элементы.НазваниеРеквезитаКартинки.РазмерКартинки = РазмерКартинки.Пропорционально;"}
}
},
{1,
{"Выбор файлов из папок(каталогов) в компьютере",1,0,"",""},
{0,
{" Открытие диалога выбора каталога для загрузки файлов(синхронный режим)",0,0,"","//прописывается в предопределенных собыниях на форме НачалоВыбора
Процедура КаталогЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Фильтр=""Все файлы(*.*)|*.*"";	
	ЗаголовокДиалога =""Выберите путь для отображения файлов"";
	ТекКаталог = КаталогЗагрузки;
	КаталогЗагрузки=ВыборФайловИКаталогов(""Каталог"",Фильтр,ЗаголовокДиалога);
	
КонецПроцедуры

Функция ВыборФайловИКаталогов(Реж,Фильтр,Заголовок,Каталог=Неопределено) Экспорт
	РеквизитВвода = """";
	Если Реж=""Файл"" Тогда
		Режим = РежимДиалогаВыбораФайла.Открытие;
	Иначе
		Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	КонецЕсли; 
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = """";
	//Фильтр = НСтр(""ru = 'Все файлы(*.*)'"");
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	Если Реж=""Файл"" Тогда
		Если Каталог<>Неопределено Тогда	
			ДиалогОткрытияФайла.Каталог=Каталог;	
		КонецЕсли; 
	КонецЕсли; 
	//ДиалогОткрытияФайла.Заголовок = НСтр(""ru = 'Выберите каталог'"");
	Если ДиалогОткрытияФайла.Выбрать() Тогда
			Если Реж=""Файл"" Тогда
				РеквизитВвода = ДиалогОткрытияФайла.ПолноеИмяФайла;
			Иначе
				РеквизитВвода = ДиалогОткрытияФайла.Каталог;
			КонецЕсли; 
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	Возврат РеквизитВвода;
КонецФункции //ВыборФайловИКаталогов()
"}
}
},
{5,
{"Программное добавление элементов на управляемую форму",1,0,"",""},
{0,
{"Добавление команды",0,0,"","&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	
	//Добавление команды формы
	Команда = Команды.Добавить(
		""ПоказатьПредупреждение""); //Имя команды
	Команда.Заголовок = ""Показать предупреждение"";
	Команда.Действие  = ""КомандаПоказатьПредупреждение""; //Имя связанной процедуры
	
	//Полный перечень свойств команды в синтакс-помощнике
	//	Интерфейс (управляемый)->Форма клиентского приложения->КомандаФормы
	
	//Добавление кнопки формы
	КнопкаФормы = Элементы.Добавить(
		""КнопкаПоказатьПредупреждение"", //Имя кнопки
		Тип(""КнопкаФормы""),             //Тип, всегда КнопкаФормы
		ЭтаФорма);                      //Контейнер для кнопки (Форма, Группа, Командная панель)
		
	КнопкаФормы.ИмяКоманды = ""ПоказатьПредупреждение""; //Связь с командой по имени
	
	//Возможные варианты вида кнопки:
	//	-Гиперссылка
	//	-ГиперссылкаКоманднойПанели
	//	-КнопкаКоманднойПанели
	//	-ОбычнаяКнопка
	//Если контейнер для формы - командная панель
	//то вид кнопки должен быть КнопкаКоманднойПанели
	КнопкаФормы.Вид = ВидКнопкиФормы.ОбычнаяКнопка; 
	
	//Полный перечень свойств кнопки формы в синтакс-помощнике
	//	Интерфейс (управляемый)->Кнопка формы
		
КонецПроцедуры

//Процедура вызываемая командой ""ПоказатьПредупреждение""
&НаКлиенте
Процедура КомандаПоказатьПредупреждение(Команда)
	
	ПоказатьПредупреждение(, ""ОК!"");
	
КонецПроцедуры"}
},
{0,
{"Добавление поля ввода",0,0,"","//Пример:
//Добавление поля ввода для реквизита объекта ""Комментарий""
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	ПолеВвода = Элементы.Добавить(
		""Комментарий"",    //Имя элемента формы
		Тип(""ПолеФормы""), //Тип, всегда ПолеФормы
		ЭтаФорма);	      //Контейнер для поля ввода (Форма,Группа,Страница)
		
	ПолеВвода.Заголовок = ""Комментарий"";
	ПолеВвода.Вид = ВидПоляФормы.ПолеВвода;
	
	//Установка связи элемента с данными
	ПолеВвода.ПутьКДанным = ""Объект.Комментарий"";
	
	//Можно добавить обработчик события
	//См. синтакс-помощник чтобы узнать список событий
	// Интерфейс (управляемый) -> Поле формы -> ПолеФормы -> События
	// а так же остальные варианты расширения поля формы в зависимости от вида кнопки
	// Интерфейс (управляемый) -> Поле формы -> Расширение поля ввода -> События
	// и прочее
	ПолеВвода.УстановитьДействие(
		""ПриИзменении"", 		    //Имя события
		""ПриИзмененииКомментария""); //Имя процедуры обработчика
		
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКомментария(Элемент)
	
	Сообщить(""Поле """"Комментарий"""" изменено!"");
	
КонецПроцедуры"}
},
{0,
{"Добавление реквезита формы",0,0,"","&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//Пример:
	//Добавление реквизита с именем ""АдресДоставки"", тип Строка
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	ТипРеквизита = Новый ОписаниеТипов(""Строка"");
	
	РеквизитФормы = Новый РеквизитФормы(
		""АдресДоставки"",  //Имя реквизита формы
		ТипРеквизита,     //Тип
		"""",               //Путь  (Пусто, ""Объект"", ИмяТЧ)
						  // например ""Объект.Товары""	
		""Адрес доставки"");//Заголовок
						  							 
	ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
	
	//Заставляем форму создать новые реквизиты
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	//Обращение к реквизиту формы из кода
	ЭтаФорма.АдресДоставки = ""ул. Пушкина"";
	
	//Вывод реквизита на форму (при необходимости)
	ПолеВвода = Элементы.Добавить(""ФормаАдресДоставки"", Тип(""ПолеФормы""), ЭтаФорма);
	ПолеВвода.Вид = ВидПоляФормы.ПолеВвода;
	ПолеВвода.ПутьКДанным = ""АдресДоставки"";
	
КонецПроцедуры"}
},
{0,
{"Добавление группы формы",0,0,"","&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//Пример:
	//Добавление группы формы
	//Добавление элементов в группу формы
	
	Группа = Элементы.Добавить(
		""ГруппаШапка"",
		Тип(""ГруппаФормы""),
		ЭтаФорма);
		
	Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	
	Группа.Заголовок = ""Реквизиты объекта:"";
	
	//Добавить поле ввода в группу
	ПолеВвода = Элементы.Добавить(""ФормаКомментарий"", Тип(""ПолеФормы""), Группа);
	ПолеВвода.Вид = ВидПоляФормы.ПолеВвода;
	ПолеВвода.ПутьКДанным = ""Объект.Комментарий"";

	
КонецПроцедуры"}
},
{0,
{"Добавление страниц формы",0,0,"","&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//Пример:
	//Добавление группы страниц
	//Добавление страниц
	//Добавление элементов на страницы
	
	СтраницыФормы = Элементы.Добавить(
		""СтраницыФормы"",
		Тип(""ГруппаФормы""),
		ЭтаФорма);
		
	СтраницыФормы.Вид = ВидГруппыФормы.Страницы;
	
	//Подключить обработчик при смене страницы
	СтраницыФормы.УстановитьДействие(""ПриСменеСтраницы"", ""ДействиеПриСменеСтраницы"");
	
	//Добавление 1-й страницы
	СтраницаФормы1 = Элементы.Добавить(
		""Страница1"",
		Тип(""ГруппаФормы""),
		СтраницыФормы);
		
	СтраницаФормы1.Вид = ВидГруппыФормы.Страница;
	СтраницаФормы1.Заголовок = ""Первая страница"";
	
	//Добавление 2-й страницы
	СтраницаФормы2 = Элементы.Добавить(
		""Страница2"",
		Тип(""ГруппаФормы""),
		СтраницыФормы);
		
	СтраницаФормы2.Вид = ВидГруппыФормы.Страница;
	СтраницаФормы2.Заголовок = ""Вторая страница"";
	
	//Добавить поле ввода на страницу 1
	ПолеВвода = Элементы.Добавить(""ФормаКомментарий"", Тип(""ПолеФормы""), СтраницаФормы1);
	ПолеВвода.Вид = ВидПоляФормы.ПолеВвода;
	ПолеВвода.ПутьКДанным = ""Объект.Комментарий"";
	
	//Добавить поле ввода на страницу 2
	ПолеВвода = Элементы.Добавить(""ФормаКомментарий2"", Тип(""ПолеФормы""), СтраницаФормы2);
	ПолеВвода.Вид = ВидПоляФормы.ПолеВвода;
	ПолеВвода.ПутьКДанным = ""Объект.Комментарий"";
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеПриСменеСтраницы(Элемент)
	
	Сообщить(""Изменена страница"");
	
КонецПроцедуры"}
}
},
{1,
{"Диалоги",1,0,"",""},
{0,
{"Диалог выбора файла Управляемые формы (УФ)",0,0,"","//В синтакс – помощнике есть пример использования диалога выбора файлов, но этот пример уже давно устарел, ведь во всех современных конфигурациях давно нельзя использовать модально, вот пример работы с диалогом без модальности.  
 &НаКлиенте
Процедура ЗагрузитьФайл(Команда)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = ""Выберите файл"";
	Диалог.ПолноеИмяФайла = """"; 
	Фильтр = ""xlsx (*.xlsx)|*.xlsx""; 
	Диалог.Фильтр = Фильтр; 
	Диалог.МножественныйВыбор = Ложь;	
	Диалог.Показать(Новый ОписаниеОповещения(""ЗагрузитьФайлЗавершение"", ЭтаФорма, Новый Структура(""Диалог"", Диалог)));		
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог; 
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда				
		
		АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Диалог.ПолноеИмяФайла));		
		ОбработатьФайлНаСервере(АдресВХ);
				
	КонецЕсли;
	
КонецПроцедуры
"}
}
},
{2,
{"Передача данных между формами",1,0,"",""},
{0,
{"Передать параметры уже открытой форме",0,0,"","//На открытой форме из которой нужно передать параметры ари закрытии формы (Произвольная форма)
&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	//Передать параметры уже открытой форме
	ОткрытьФорму(""РегистрСведений.ВыбранныеВопросы.ФормаСписка"");
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить(""Глава"", Глава);
	СтруктураВозврата.Вставить(""Счетчик"", Счетчик);
	
	Оповестить(""ДобавлениеСчетчика"",СтруктураВозврата,ЭтаФорма);
КонецПроцедуры

// На форме куда передать параметры на открытую форму ОбработкаОповещения() - это предопределенное событие  

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	   УвеличитьСчетчик(Параметр.Глава,Параметр.Счетчик)
КонецПроцедуры


"}
},
{0,
{"Передать параметры форме при открытии",0,0,"","  // на форме от куда передаем
  &НаКлиенте
  Процедура Кнопка1(Кнопка)
      //Передать параметры в форму
	  ПараметрыФормы = Новый Структура(""Параметр1,Параметр2"", Истина,""Привет"");
  КонецПроцедуры
  
  //На форме куда передать параметры
  &НаСервере
  Процедура ПриСозданииНаСервере(Отказ,СтандартнаяОбработка)
      Сообщить(Параметры.Параметр1);
	  Сообщить(Параметры.Параметр2);
  КонецПроцедуры
  "}
}
},
{6,
{"Открывать форму выбора (подбора) в управляемых формах",1,0,"",""},
{0,
{"Вызов формы выбора с одним возвращаемым результатом",0,0,"","   &НаКлиенте
Процедура КомандаОткрытьФормуВыбора(Команда)
 
	ПараметрыФормы = Новый Структура(""РежимВыбора"",Истина);

	ОткрытьФорму(""Документ.РеализацияТоваровУслуг.ФормаВыбора"",ПараметрыФормы,ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора) ///Событие формы
	
     РезультатСсылка =  ВыбранноеЗначение; ///Выбранное значение, вернет ссылку (документа в нашем примере)

КонецПроцедуры"}
},
{0,
{"Выбор нескольких значений (документов или справочников) ",0,0,"","&НаКлиенте
Процедура КомандаОткрытьФормуВыбора(Команда)
 
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить(""РежимВыбора"",Истина);
	ПараметрыФормы.Вставить(""МножественныйВыбор"",Истина);
	ПараметрыФормы.Вставить(""ЗакрыватьПриВыборе"",ложь);

	ОткрытьФорму(""Документ.РеализацияТоваровУслуг.ФормаВыбора"",ПараметрыФормы,ЭтаФорма);

КонецПроцедуры


&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	МассивСсылок =  ВыбранноеЗначение; ///Вернётся массив с выбранными значениями (Даже если значение только одно )
КонецПроцедуры"}
},
{0,
{"Выбор нескольких значений (документов или справочников) с использованием ""Обработки оповещения"" ",0,0,"","&НаКлиенте
Процедура КомандаОткрытьФормуВыбора(Команда)
 
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить(""РежимВыбора"",Истина);
	ПараметрыФормы.Вставить(""МножественныйВыбор"",Истина); ///Если хотим несколько значений

	ОбработкаВыбора = Новый ОписаниеОповещения(""ПриЗакрытииФормыВыбора"", ЭтаФорма,""ПодборРеализации"");

	ОткрытьФорму(""Документ.РеализацияТоваровУслуг.ФормаВыбора"",ПараметрыФормы,
	        ЭтаФорма, , , , ОбработкаВыбора);

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииФормыВыбора(Значение, ДопПараметры) Экспорт

   //Дополнительные условия если необходимо
   //Если ДопПараметры = ""ПодборРеализации"" тогда

    Если Значение = Неопределено Тогда  ///Если ничего не выбрать - вернется пустое значение (Неопределено)
        Возврат;
    КонецЕсли;
     
    МассивДокументов = Значение ///Если Множественный Выбор - то вернется массив 
    

    //КонецЕсли;
КонецПроцедуры"}
},
{0,
{"Выбор нескольких значений (документов или справочников) с условием",0,0,"","//Допустим мы хотим выбрать из списка документы только с товаром, для этого установим отбор по ""Виду операции"".
//Вид операции - это поле(реквизит) динамического списка, и отбор можно установить по всем доступным полям. 
&НаКлиенте
Процедура КомандаОткрытьФормуВыбора(Команда)

    ///Создаем структуру с отбором и добавляем значения
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить(""ВидОперации"", ПредопределенноеЗначение(""Перечисление.ВидыОперацийРеализацияТоваров.Товары""));
	//ПараметрыОтбора.Вставить(""Дата"", ТекущаяДата());   ///Дополнительный отбор
 
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить(""Отбор"", ПараметрыОтбора); ///Добавляем отбор в параметры формы

	ПараметрыФормы.Вставить(""РежимВыбора"",Истина);
	ПараметрыФормы.Вставить(""МножественныйВыбор"",Истина);

	ОбработкаВыбора = Новый ОписаниеОповещения(""ПриЗакрытииФормыВыбора"", ЭтаФорма,""Подбор"");

	ОткрытьФорму(""Документ.РеализацияТоваровУслуг.ФормаВыбора"",ПараметрыФормы,
	        ЭтаФорма, , , , ОбработкаВыбора);

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииФормыВыбора(Значение, ДопПараметры) Экспорт
    Если Значение = Неопределено Тогда
        Возврат;
    КонецЕсли;
     
    МассивДокументов = Значение; 
	
КонецПроцедуры
"}
},
{0,
{"Выбор нескольких значений (документов или справочников) открыть форму выбора со списком за определенный период",0,0,"","&НаКлиенте
Процедура КомандаОткрытьФормуВыбора(Команда)
	НастройкиКомпоновки = Новый НастройкиКомпоновкиДанных;

    ///Если хотим несколько условий
    ГруппаОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип(""ГруппаЭлементовОтбораКомпоновкиДанных""));
    ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип(""ЭлементОтбораКомпоновкиДанных"")); 
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(""ВидОперации"");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ПравоеЗначение = ПредопределенноеЗначение(""Перечисление.ВидыОперацийРеализацияТоваров.Товары"");

	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип(""ЭлементОтбораКомпоновкиДанных"")); 
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(""Дата"");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.больше;
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ПравоеЗначение = НачалоГода(ТекущаяДата());

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить(""ФиксированныеНастройки"", НастройкиКомпоновки);
	ПараметрыФормы.Вставить(""РежимВыбора"",Истина);
	ПараметрыФормы.Вставить(""МножественныйВыбор"",Истина);

	ОбработкаВыбора = Новый ОписаниеОповещения(""ПриЗакрытииФормыВыбора"", ЭтаФорма,""Подбор"");

	ОткрытьФорму(""Документ.РеализацияТоваровУслуг.ФормаВыбора"",ПараметрыФормы,
	        ЭтаФорма, , , , ОбработкаВыбора);

КонецПроцедуры


&НаКлиенте
Процедура ПриЗакрытииФормыВыбора(Значение, ДопПараметры) Экспорт
    Если Значение = Неопределено Тогда
        Возврат;
    КонецЕсли;
     
    МассивДокументов = Значение 
	
КонецПроцедуры"}
},
{0,
{"открыть форму выбора с Позиционированием ранее выбранного значения",0,0,"","&НаКлиенте
Процедура КомандаОткрытьФормуВыбора(Команда)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить(""РежимВыбора"",Истина);
	ПараметрыФормы.Вставить(""МножественныйВыбор"",Ложь);
	ПараметрыФормы.Вставить(""ЗакрыватьПриВыборе"",ложь);
	
	Если РанееВыбранныйДокумент <> Неопределено Тогда    ///Реквизит формы, ранее выбранное значение из открываемой формы	
		//ПараметрыФормы.Вставить(""УстановитьПараметрыФункциональныхОпцийФормы"",Новый Структура(""ТекущаяСтрока"",РанееВыбранныйДокумент));  /// Можно и так
	    ПараметрыВыбора.Вставить(""ТекущаяСтрока"", РанееВыбранныйДокумент); /// Подсказка от подписчика: user1502278 
    КонецЕсли;
	
	ОбработкаВыбора = Новый ОписаниеОповещения(""ПриЗакрытииФормыВыбора"", ЭтотОбъект,""Подбор"");

	ОткрытьФорму(""Документ.РеализацияТоваровУслуг.ФормаВыбора"",ПараметрыФормы,
	        ЭтаФорма, , , , ОбработкаВыбора);

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииФормыВыбора(Значение, ДопПараметры) экспорт
    Если Значение = Неопределено Тогда
        Возврат;
    КонецЕсли;
     
    МассивДокументов = Значение 
	
КонецПроцедуры"}
}
}
},
{6,
{"Массивы и колекции",1,0,"",""},
{15,
{"Массивы",1,0,"",""},
{0,
{"Получение уникальных значений",0,0,"","Числа1 = Новый Массив;
Числа1.Добавить(1);
Числа1.Добавить(3);
Числа1.Добавить(2);
Числа1.Добавить(1);
Числа1.Добавить(3);

//Числа1 = [1, 3, 2, 1, 3]
Числа2 = Новый Массив;
//первый вариант
Соответствие = Новый Соответствие;
Для каждого Число Из Числа1 Цикл
    Соответствие.Вставить(Число);
КонецЦикла;
Для каждого Элемент Из Соответствие Цикл
    Числа2.Добавить(Элемент.Ключ);
КонецЦикла;
//Числа2 = [1, 2, 3]
Числа2.Очистить();

//второй вариант
Для Каждого Число из Числа1 Цикл
    Если (Числа2.Найти(Число) = Неопределено) Тогда
        Числа2.Добавить(Число);
    КонецЕсли;
КонецЦикла;
//Числа2 = [1, 3, 2]
"}
},
{0,
{"Объединение массива",0,0,"","Числа1 = Новый Массив(3);
Числа1[0] = 2;
Числа1[1] = 3;
Числа1[2] = 5;

Числа2 = Новый Массив(3);
Числа2[0] = 7;
Числа2[1] = 11;
Числа2[2] = 13;

//вариант первый
ВсеЧисла = Новый Массив;
Для Каждого Число Из Числа1 Цикл
    ВсеЧисла.Добавить(Число);
КонецЦикла;

Для Каждого Число Из Числа2 Цикл
    ВсеЧисла.Добавить(Число);
КонецЦикла;
//ВсеЧисла = [2, 3, 5, 7, 11, 13]

//вариант второй

Список = Новый СписокЗначений;
Список.ЗагрузитьЗначения(Числа1);
Для Каждого Число Из Числа2 Цикл
    Список.Добавить(Число);
КонецЦикла;
ВсеЧисла = Список.ВыгрузитьЗначения();
//ВсеЧисла = [2, 3, 5, 7, 11, 13]"}
},
{0,
{"Обход массива",0,0,"","Числа = Новый Массив(3);
Числа[0] = 2;
Числа[1] = 3;
Числа[2] = 5;
Стр = """";
Для Каждого Число из Числа Цикл
    Стр = Стр + ?(Стр = """", """", ""; "") + Число;
КонецЦикла;
//Стр = ""2; 3; 5"""}
},
{0,
{"Обход массивов по индексам",0,0,"","Числа = Новый Массив(3);
Числа[0] = 2;
Числа[1] = 3;
Числа[2] = 5;
Стр = """";
Для Н = 0 По Числа.Количество() - 1 Цикл
    Стр = Стр + ?(Стр = """", """", ""; "") + Числа[Н];
КонецЦикла;
//Стр = ""2; 3; 5"""}
},
{0,
{"Динамические массивы",0,0,"","Количество = 15;
Числа = Новый Массив(Количество);
Числа[0] = 1;"}
},
{0,
{"Добавление и удаление элементов",0,0,"","Числа = Новый Массив(3);
Числа[0] = 2;
Числа[1] = 5;
Числа[2] = 7;
Числа.Добавить(11);
//Числа = [2, 5, 7, 11]
Числа.Вставить(1, 3);
//Числа = [2, 3, 5, 7, 11]
Числа.Удалить(2);
//Числа = [2, 3, 7, 11]
Числа.Очистить();
//Числа =  [] "}
},
{0,
{"Индексация массивов",0,0,"","//пустой массив

Массив1 = Новый Массив;

//одномерный массив

Массив2 = Новый Массив(3);
Массив2[0] = 2;
Массив2[1] = 3;
Массив2[2] = 1;

//двумерный массив
Массив3 = Новый Массив(2);
Массив3[0] = Новый Массив(2);
Массив3[1] = Новый Массив(2);
Массив3[0][1] = 5;
"}
},
{0,
{"Копирование массива",0,0,"","Числа1 = Новый Массив(3);
Числа1[0] = 1;
Числа1[1] = 2;
Числа1[2] = 3;

//первый вариант
Числа2 = Новый Массив(
Новый ФиксированныйМассив(Числа1));

//второй вариант

Список = Новый СписокЗначений;
Список.ЗагрузитьЗначения(Числа1);
Числа3 = Список.ВыгрузитьЗначения();"}
},
{0,
{"Массив с заданным значением",0,0,"","Количество = 3;
Значение = 5;
Числа = Новый Массив(Количество);
Для н = 0 По Количество - 1 Цикл
    Числа[н] = Значение;
КонецЦикла;
//Числа = [5, 5, 5]"}
},
{0,
{"Фильтрация элементов",0,0,"","Числа = Новый Массив;
Числа.Добавить(1);
Числа.Добавить(2);
Числа.Добавить(3);
Числа.Добавить(4);
//в 1С отсутствует функция фильтрации массива
//поэтому использует обычный перебор значений
Четные = Новый Массив;
Для Каждого Число Из Числа Цикл
    Если (Число % 2 = 0) Тогда
        Четные.Добавить(Число);
    КонецЕсли;
КонецЦикла;
   "}
},
{0,
{"Сортировка элементов",0,0,"","Числа = Новый Массив(3);
Числа[0] = 2;
Числа[1] = 3;
Числа[2] = 1;

Список = Новый СписокЗначений;
Список.ЗагрузитьЗначения(Числа);

Список.СортироватьПоЗначению(НаправлениеСортировки.Возр) ;

Числа = Список.ВыгрузитьЗначения();

//Числа = [1, 2, 3]

Список.СортироватьПоЗначению(НаправлениеСортировки.Убыв) ;
Числа = Список.ВыгрузитьЗначения();

//Числа = [3, 2, 1]
"}
},
{0,
{"Преобразование массива",0,0,"","Числа = Новый Массив(3);
Числа[0] = 2;
Числа[1] = 3;
Числа[2] = 5;

Для Н = 0 По Числа.Количество() - 1 Цикл
    Числа[Н] = Числа[Н] * 3;
КонецЦикла;
//Числа = [6, 9, 15]"}
},
{0,
{"Проверка наличия элемента",0,0,"","Числа = Новый Массив(3);
Числа[0] = 2;
Числа[1] = 3;
Числа[2] = 5;

Содержит3 = Числа.Найти(3) <> Неопределено;
//Содержит3 = Истина
Индекс3 = Числа.Найти(3);
//Индекс3 = 1
Содержит4 = Числа.Найти(4) <> Неопределено;

//Содержит4 = Ложь

"}
},
{0,
{"Проверка равенства массивов",0,0,"","Числа1 = Новый Массив(3);
Числа1[0] = 1;
Числа1[1] = 2;
Числа1[2] = 3;

Числа2 = Новый Массив(3);
Числа2[0] = 1;
Числа2[1] = 2;
Числа2[2] = 3;

//первый вариант

МассивыРавны = СравнитьМассивы1(Числа1, Числа2);

//МассивыРавны = Да

//второй вариант

МассивыРавны = СравнитьМассивы2(Числа1, Числа2);

//МассивыРавны = Да


Функция СравнитьМассивы1(Массив1, Массив2)
    Если Массив1.Количество() <> Массив2.Количество() Тогда
        Возврат Ложь;
    КонецЕсли;
    Для н = 0 По Массив1.Количество() - 1 Цикл
        Если (Массив1.Получить(н) <> Массив2.Получить(н)) Тогда
            Возврат Ложь;
        КонецЕсли;
    КонецЦикла;

    Возврат Истина;

КонецФункции

&НаСервере
Функция СравнитьМассивы2(Массив1, Массив2)
    Возврат ЗначениеВСтрокуВнутр(Массив1) =
        ЗначениеВСтрокуВнутр(Массив2);
КонецФункции"}
},
{9,
{"Алгоритмы сортировки массивов",1,0,"",""},
{0,
{"Сортировка выбором",0,0,"","  //Сортировка выбором {---
Функция СортировкаВыбором(Знач Массив) 
    
    Мин = 0;
    Для i = 0 По Массив.ВГраница() Цикл        
        Мин = i;                               
        Для j = i + 1 ПО Массив.ВГраница() Цикл        //Ищем минимальный элемент в массиве    
            Если Массив[j] < Массив[Мин] Тогда
                Мин = j;
            КонецЕсли; 
        КонецЦикла; 
        Если Массив [Мин] = Массив [i] Тогда           //Если мин. элемент массива = первому элементу неотс. части массива, то пропускаем.
            Продолжить;
        КонецЕсли;
        
        Смена = Массив[i];                            //Производим замену элементов массива.
        Массив[i] = Массив[Мин];
        Массив[Мин] = Смена;  
        
    КонецЦикла;
    Возврат Массив;    
КонецФункции"}
},
{0,
{"Сортировка пузырьком",0,0,"","//Сортировка пузырьком {---
Функция СортировкаПузырьком(Знач Массив)
    
    Для i = 0 По Массив.ВГраница() Цикл
        Для j = 0 ПО Массив.Вграница() - i - 1 Цикл
            Если Массив[j] > Массив[j + 1] Тогда
                Замена = Массив[j];
                Массив[j] = Массив[j + 1];
                Массив[j + 1] = Замена;
            КонецЕсли;            
        КонецЦикла;        
    КонецЦикла;    
    Возврат Массив;    
КонецФункции
//---}"}
},
{0,
{"Шейкерная сортировка(Сортировка перемешиванием,Двунаправленная пузырьковая сортировка)",0,0,"","//Сортировка перемешивание (Шейкер-Сортировка) {---
Функция СортировкаПеремешиванием(Знач Массив)
    
    Для i = 0 ПО Массив.ВГраница()/2 Цикл
        
        нИтер = 0;
        конИтер = Массив.ВГраница();          
        Пока нИтер  Массив[нИтер+1] Тогда
                Замена = Массив[нИтер];
                Массив[нИтер] = Массив[нИтер + 1];
                Массив[нИтер + 1] = Замена;                
            КонецЕсли;
            нИтер = нИтер + 1;//Двигаем позицию на шаг вперед
            //Проходим с конца
            Если Массив[конИтер - 1] > Массив[конИтер] Тогда
                Замена = Массив[конИтер - 1];
                Массив[конИтер-1] = Массив[конИтер];
                Массив[конИтер] = Замена;                
            КонецЕсли;
            конИтер = конИтер - 1;//Двигаем позицию на шаг назад              
        КонецЦикла;         
    КонецЦикла;       
    
    Возврат Массив;    
    
КонецФункции
//---}"}
},
{0,
{"Гномья сортировка",0,0,"","//Гномья сортировка {---   
Функция ГномьяСортировка(Знач Массив)
    
    i = 1;
    j = 2;
    
    Пока i < Массив.Количество() Цикл // Сравнение < - Сортировка по возрастанию, > - по убыванию   
        
        Если Массив[i-1]  
            i = j;
            j = j + 1;
        Иначе
            Замена = Массив[i];
            Массив[i] = Массив[i - 1];
            Массив[i - 1] = Замена;            
            i = i - 1;
            Если i = 0 Тогда
                i = j;
                j = j + 1;
            КонецЕсли;            
        КонецЕсли;        
    КонецЦикла;    
    
    Возврат Массив;    
КонецФункции
//---}"}
},
{0,
{"Сортировка вставками",0,0,"","//Сортировка вставками {---
Функция СортировкаВставками(Знач Массив)
    
    Для i = 0 По Массив.ВГраница()-1 Цикл            
        Ключ = i + 1;
        Замена = Массив[Ключ];
        j = i + 1;
        Пока j > 0 И Замена < Массив[j - 1] Цикл
            Массив[j] = Массив[j - 1];
            Замена = j - 1;
            Ключ = j - 1; 
            j = j - 1;
        КонецЦикла;    
    
        Массив[Ключ] = Замена;
        
    КонецЦикла;   
    
    Возврат Массив;    
    
КонецФункции
//---}"}
},
{0,
{"Сортировка слиянием",0,0,"","//Сортировка слиянием {---

Функция СортировкаСлиянием(Знач Массив)
    
    Если Массив.Количество() = 1 Тогда
        Возврат Массив;
    КонецЕсли;
    
    ТочкаРазрыв = Массив.Количество() / 2;
    
    лМассив = Новый Массив;
    прМассив = Новый Массив;
    
    Для Сч = 0 ПО Массив.ВГраница() Цикл
        Если Сч < ТочкаРазрыв Тогда
            лМассив.Добавить(Массив[Сч]);
        Иначе
            прМассив.Добавить(Массив[Сч]);
        КонецЕсли;
    КонецЦикла;
    
    Возврат Слияние(СортировкаСлиянием(лМассив),СортировкаСлиянием(прМассив));
    
КонецФункции

Функция Слияние(массив1,массив2)
    
    a = 0;
    b = 0;
    слМассив = Новый Массив;
    
    Для Сч = 0 ПО (Массив1.Количество() + Массив2.Количество())-1 Цикл
        слМассив.Добавить();
    КонецЦикла;
    
    Для i = 0 ПО (массив1.Количество() + массив2.Количество())-1 Цикл            
        Если b <  массив2.Количество() И a < массив1.Количество() Тогда            
            Если (массив1[a] > массив2[b]) И (b < массив2.Количество()) Тогда
                слМассив[i] =  массив2[b];
                b = b + 1;
            Иначе
                слМассив[i] =  массив1[a];
                a = a + 1;
            КонецЕсли;             
        Иначе
            Если b < массив2.количество() Тогда
                слМассив[i] = массив2[b];
                b = b + 1;
            Иначе
                слМассив[i] = массив1[a];
                a = a + 1;
            КонецЕсли;            
        КонецЕсли;
                
    КонецЦикла;    
    
    Возврат слМассив;
    
КонецФункции   
//---}"}
},
{0,
{"Сортировка Шелла",0,0,"","//Сортировка Шелла {---
Функция СортировкаШелла(Знач Массив)
    
    Шаг = Цел(Массив.Количество()/2);
    
    Пока Шаг > 0 Цикл
        i = 0;
        Пока i < (Массив.Количество() - Шаг) Цикл
            j = i;
            Пока j >= 0 И Массив[j] > Массив[j + Шаг] Цикл
                Замена = Массив[j];
                Массив[j] = Массив[j + Шаг];
                Массив[j + Шаг] = Замена;
                j = j - 1;
                
                Если ПрименитьОтображениеСортировки Тогда    
                    ОтобразитьДиаграммуСортировки(Массив);    
                КонецЕсли;
                
            КонецЦикла;                
            i = i + 1;    
        КонецЦикла;
        Шаг = Цел(Шаг/2);
        
        ОбработкаПрерыванияПользователя();
    КонецЦикла;
    
    Возврат Массив;
    
КонецФункции   
//---}"}
},
{0,
{"Быстрая сортировка",0,0,""," //Алгоритм ""Быстрая сортировка"" { 
Процедура б_Сортировка(Массив,НижнийПредел,ВерхнийПредел)
      
    
    i    = НижнийПредел;
    j    = ВерхнийПредел;
    m    = Массив[Цел((i+j)/2)];
    
    Пока Истина Цикл        
        Пока Массив[i] < m Цикл            
            i    = i + 1;                   
        КонецЦикла;
        
        Пока Массив[j] > m Цикл            
            j    = j - 1;                   
        КонецЦикла; 
        
        Если i > j Тогда                       
            Прервать;                        
        КонецЕсли;
        
    КонецЦикла;
    
    Если НижнийПредел < j Тогда         
        б_Сортировка(Массив,НижнийПредел,j);        
    КонецЕсли; 
    
    Если i < ВерхнийПредел Тогда                      
        б_Сортировка(Массив,i,ВерхнийПредел);        
    КонецЕсли;
    
КонецПроцедуры

Функция БыстраяСортировка(Массив)
    
    НижняяГраница = 0;
    ВерхняяГраница = Массив.ВГраница();    
    б_Сортировка(Массив,НижняяГраница,ВерхняяГраница);
    
    Возврат Массив;
    
КонецФункции
 //---}"}
},
{0,
{"Классическая сортировка массива в 1с.",0,0,"","//Сортировка списком значений {---
Функция СортировкаСпискомЗначений(Знач Массив)
    
        мСписокЗнч = Новый СписокЗначений;
        мСписокЗнч.ЗагрузитьЗначения(Массив);
    мСписокЗнч.СортироватьПоЗначению(НаправлениеСортировки.Возр);    
    Возврат мСписокЗнч.ВыгрузитьЗначения();
КонецФункции
//---}"}
}
}
},
{8,
{"Словари(Соответствие)",1,0,"",""},
{0,
{"Добавление и удаление элементов",0,0,"","Соотв = Новый Соответствие;
Соотв.Вставить(1, ""один"");
Соотв.Вставить(2, ""два"");
Соотв.Вставить(3, """");
Соотв[3] = ""три"";
//Соотв = [1 : ""один"", 2 : ""два"", 3 : ""три""]
Соотв.Удалить(3);
//с = [1 : ""один"", 2 : ""два""]
Соотв.Очистить();
//с = []
"}
},
{0,
{"Индексация словарей",0,0,"","//пустой словарь
Соответствие1 = Новый Соответствие;
//словарь со значениями
Соответствие2 = Новый Соответствие;
Соответствие2.Вставить(1, ""один"");
Соответствие2.Вставить(2, ""два"");
"}
},
{0,
{"Количество элементов",0,0,"","Соотв = Новый Соответствие;
Соотв.Вставить(1, ""один"");
Соотв.Вставить(2, ""два"");
Количество = Соотв.Количество();
//Количество = 2"}
},
{0,
{"Обход словаря",0,0,"","Соотв = Новый Соответствие;
Соотв.Вставить(1, ""один"");
Соотв.Вставить(2, ""два"");
Стр = """";
Для Каждого Элемент из Соотв Цикл
    Стр = Стр + ?(Стр = """", """", "", "") +
        (""{"" + Элемент.Ключ + "" : """""" +
        Элемент.Значение + """"""}"");
КонецЦикла;
//Стр = ""{1 : ""один""}, {2 : ""два""}"}
},
{0,
{"Получение списка значения",0,0,"","Соотв = Новый Соответствие;
Соотв.Вставить(1, ""один"");
Соотв.Вставить(2, ""два"");
Значения = Новый Массив;
Для Каждого Элемент из Соотв Цикл
    Значения.Добавить(Элемент.Значение);
КонецЦикла;
//Значения = [""один"", ""два""]"}
},
{0,
{"Получение списка ключей",0,0,"","Соотв = Новый Соответствие;
Соотв.Вставить(1, ""один"");
Соотв.Вставить(2, ""два"");
Ключи = Новый Массив;
Для Каждого Элемент из Соотв Цикл
    Ключи.Добавить(Элемент.Ключ);
КонецЦикла;
//Ключи = [1, 2]"}
},
{0,
{"Получение значения по ключу",0,0,"","Соотв = Новый Соответствие;
Соотв.Вставить(1, ""один"");
Соотв.Вставить(2, ""два"");

Значение1 = Соотв[1];
//Значение1 = ""один""
Значение2 = Соотв[2];
//Значение2 = ""два""
Значение3 = Соотв[3];
//Значение3 = Неопределено"}
},
{0,
{"Проверка наличия ключа",0,0,"","Соотв = Новый Соответствие;
Соотв.Вставить(1, ""один"");
Соотв.Вставить(2, Неопределено);
Есть1 = Соотв.Получить(1) <> Неопределено;
//Есть1 = Истина
Есть2 = Соотв.Получить(2) <> Неопределено;
//Есть2 = Ложь
Есть3 = Соотв.Получить(3) <> Неопределено;
//Есть3 = Ложь"}
}
},
{10,
{"Дерево значений",1,0,"",""},
{0,
{"Сортировка данных",0,0,"","Должности = Новый ДеревоЗначений;
Должности.Колонки.Добавить(""Должность"");
Должности.Колонки.Добавить(""Количество"");

ГлБух = Должности.Строки.Добавить();
ГлБух.Должность = ""Гл. бухгалтер"";
ГлБух.Количество = 1;

ЗамГлБух = ГлБух.Строки.Добавить();
ЗамГлБух.Должность = ""Зам. гл. бухгалтера"";
ЗамГлБух.Количество = 1;

БухРасчет = ГлБух.Строки.Добавить();
БухРасчет.Должность = ""Бух. расч. отдела"";
БухРасчет.Количество = 3;

//сортировка подчиненных строк строки глБух
ГлБух.Строки.Сортировать(""Должность Возр"");
//сортировка всех строк дерева значений
Должности.Строки.Сортировать(""Количество Убыв, Должность Возр"", Истина);"}
},
{0,
{"Создание копии дерева",0,0,"","Должности = Новый ДеревоЗначений;
Должности.Колонки.Добавить(""Должность"");
ГенДир = Должности.Строки.Добавить();
ГенДир.Должность = ""Ген. директор"";
ФинДир = ГенДир.Строки.Добавить();
ФинДир.Должность = ""Фин. директор"";
КомДир = ГенДир.Строки.Добавить();
КомДир.Должность = ""Ком. директор"";
//полная копия дерева
Копия = Должности.Скопировать();

"}
},
{0,
{"Получение индексов строки",0,0,"","Должности = Новый ДеревоЗначений;
Должности.Колонки.Добавить(""Должность"");
ГенДир = Должности.Строки.Добавить();
ГенДир.Должность = ""Ген. директор"";
ФинДир = ГенДир.Строки.Добавить();
ФинДир.Должность = ""Фин. директор"";
КомДир = ГенДир.Строки.Добавить();
КомДир.Должность = ""Ком. директор"";
Индекс = Должности.Строки.Индекс(КомДир);
//Индекс = -1
Индекс = ГенДир.Строки.Индекс(КомДир);
//Индекс = 1
"}
},
{0,
{" Поиск по дереву",0,0,"","Должности = Новый ДеревоЗначений;
Должности.Колонки.Добавить(""Должность"");
Должности.Колонки.Добавить(""Количество"");

Директор = Должности.Строки.Добавить();
Директор.Должность = ""Директор"";
Директор.Количество = 1;

Бухгалтер = Директор.Строки.Добавить();
Бухгалтер.Должность = ""Бухгалтер"";
Бухгалтер.Количество = 1;

Продавец = Директор.Строки.Добавить();
Продавец.Должность = ""Продавец"";
Продавец.Количество = 3;
//поиск по всем колонкам и подчиненным строкам
Строка1 = Должности.Строки.Найти(""Продавец"", Неопределено, Истина);
//Строка = Продавец : 3
//поиск по колонке ""Должность"", включая подчиненные строки
Строка2 = Должности.Строки.Найти(""Продавец"", ""Должность"", Истина);
//Строка = Продавец : 3
//поиск по колонке ""Количество"", включая подчиненные строки
Строка3 = Должности.Строки.Найти(""Продавец"", ""Количество"", Истина);
//Строка = Неопределено
//поиск по колонке ""Должность""
Строка4 = Должности.Строки.Найти(""Продавец"", ""Должность"");
//Строка = Неопределено
//поиск по всем колонкам в строке ""директор""
строка5 = директор.Строки.Найти(""Продавец"");
//строка = Продавец : 3
ПараметрыОтбора = Новый Структура;
ПараметрыОтбора.Вставить(""Количество"", 1);
строки = должности.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
//массив из строк ""Директор"" и ""Бухгалтер"""}
},
{0,
{"Перечисление колонок",0,0,"","Товары = Новый ДеревоЗначений;
Товары.Колонки.Добавить(""Товар"");
Товары.Колонки.Добавить(""Цена"");
Для Каждого Колонка Из Товары.Колонки Цикл
    Сообщить(Колонка.Имя);
КонецЦикла;"}
},
{0,
{"Перемещение строк",0,0,"","перемещение строк
Должности = Новый ДеревоЗначений;
Должности.Колонки.Добавить(""Должность"");
ГенДир = Должности.Строки.Добавить();
ГенДир.Должность = ""Ген. директор"";
ФинДир = ГенДир.Строки.Добавить();
ФинДир.Должность = ""Фин. директор"";
КомДир = ГенДир.Строки.Добавить();
КомДир.Должность = ""Ком. директор"";
//сдвигаем фин. дир. на строчку ниже
ГенДир.Строки.Сдвинуть(0, 1);
//возвращаем обратно
ГенДир.Строки.Сдвинуть(1, -1);"}
},
{0,
{"Обход дерева значений",0,0,"","Должности = Новый ДеревоЗначений;
Должности.Колонки.Добавить(""Должность"");
Должности.Колонки.Добавить(""Количество"");
ГенДир = Должности.Строки.Добавить();
ГенДир.Должность = ""Ген. директор"";
ГенДир.Количество = 1;
ГлБух = ГенДир.Строки.Добавить();
ГлБух.Должность = ""Гл. бухгалтер"";
ГлБух.Количество = 1;
ЗамГлБух = ГлБух.Строки.Добавить();
ЗамГлБух.Должность = ""Зам. гл. бухгалтера"";
ЗамГлБух.Количество = 1;
БухРасчет = ГлБух.Строки.Добавить();
БухРасчет.Должность = ""Бух. расч. отдела"";
БухРасчет.Количество = 3;
ПоказатьДЗ(Должности);


&НаСервере
Процедура ПоказатьДЗ(Дерево, Уровень = 1)
      Пробелы = ""          "";
    Для Каждого Строка из Дерево.Строки Цикл
        Стр = Строка.Должность + "": "" +
        Строка.Количество + "" ед."";
        //отступ для подчиненных строк
        Стр = Лев(Пробелы, (Уровень - 1)*2) + Стр;
        Сообщить(Стр);
        ПоказатьДЗ(Строка, Уровень + 1);
    КонецЦикла;
КонецПроцедуры"}
},
{0,
{"Инициализация",0,0,"","Должности = Новый ДеревоЗначений;
Должности.Колонки.Добавить(""Должность"");
Должности.Колонки.Добавить(""Количество"");

ГенДир = Должности.Строки.Добавить();
ГенДир.Должность = ""Ген. директор"";
ГенДир.Количество = 1;

ФинДир = ГенДир.Строки.Добавить();
ФинДир.Должность = ""Фин. директор"";
ФинДир.Количество = 1;

КомДир = ГенДир.Строки.Добавить();
КомДир.Должность = ""Ком. директор"";
КомДир.Количество = 1;

Торг = КомДир.Строки.Добавить();
Торг.Должность = ""Торг. представитель"";
Торг.Количество = 3;"}
},
{0,
{"Загрузка и выгрузка колонок",0,0,"","Должности = Новый ДеревоЗначений;
Должности.Колонки.Добавить(""Должность"");

ГенДир = Должности.Строки.Добавить();
ГенДир.Должность = ""Ген. директор"";

ФинДир = ГенДир.Строки.Добавить();
ФинДир.Должность = ""Фин. директор"";

КомДир = ГенДир.Строки.Добавить();
КомДир.Должность = ""Ком. директор"";

Массив = Должности.Строки.ВыгрузитьКолонку(0);
//Массив = [""Ген. директор""]
Массив = ГенДир.Строки.ВыгрузитьКолонку(0);
//Массив = [""Фин. директор"", ""Ком. директор""]

Массив[0] = ""Тех. директор"";
ГенДир.Строки.ЗагрузитьКолонку(Массив, 0);"}
},
{0,
{"Добавление и удаление строк",0,0,"","Должности = Новый ДеревоЗначений;
Должности.Колонки.Добавить(""Должность"");

ГенДир = Должности.Строки.Добавить();
ГенДир.Должность = ""Ген. директор"";

ФинДир = ГенДир.Строки.Добавить();
ФинДир.Должность = ""Фин. директор"";

КомДир = ГенДир.Строки.Добавить();
КомДир.Должность = ""Ком. директор"";

//удаляем строку ""Фин. директор""
ГенДир.Строки.Удалить(0);
//удаляем все строки ветки ""Ген. директор""
ГенДир.Строки.Очистить();
//удаляем все строки дерева
Должности.Строки.Очистить();"}
}
},
{12,
{"Список значений",1,0,"",""},
{0,
{"Добавление и удаление элементов",0,0,"","Числа = Новый СписокЗначений;
Числа.Добавить(1, ""один"");
Числа.Добавить(3, ""три"");
//Числа = [1 : ""один"", 3 : ""три""]
Числа.Вставить(1, 2, ""два"");
//Числа = [1 : ""один"", 2 : ""два"", 3 : ""три""]
Числа.Удалить(0);
//Числа = [2 : ""два"", 3 : ""три""]
Три = сз[1];
Числа.Удалить(Три);
//Числа = [2 : ""два""]
Числа.Очистить();
//Числа = [ ]"}
},
{0,
{"Загрузка и  выгрузка значений",0,0,"","Числа = Новый СписокЗначений;
Числа.Добавить(1, ""один"");
Числа.Добавить(2, ""два"", Истина);
Числа.Добавить(3);
//Числа = [1 : ""один"" : Нет, 2 : ""два"" : Да, 3 ]"}
},
{0,
{"Инициализация",0,0,"","Числа = Новый СписокЗначений;
Числа.Добавить(1, ""один"");
Числа.Добавить(2, ""два"", Истина);
Числа.Добавить(3);
//Числа = [1 : ""один"" : Нет, 2 : ""два"" : Да, 3 ]"}
},
{0,
{"Обход списка значений",0,0,"","Числа = Новый СписокЗначений;
Числа.Добавить(1, ""один"", Истина);
Числа.Добавить(2, ""два"", Ложь);
Стр = """";
Для Каждого Элемент из Числа Цикл
    Стр = Стр + ?(Стр = """", """", "", "") +
        (""{"" + Элемент.Значение + "" : """""" +
        Элемент.Представление + """""" : "" +
        Элемент.Пометка + ""}"");
КонецЦикла;

//Стр = ""{1 : ""один"" : Да}, {2 : ""два"" : Нет}"" "}
},
{0,
{"Обход списка с индексом",0,0,"","Числа = Новый СписокЗначений;
Числа.Добавить(1, ""один"");
Числа.Добавить(2, ""два"");
Стр = """";
Для Н = 0 По Числа.Количество() - 1 Цикл
    Стр = Стр + ?(Стр = """", """", "", "") +
        (""{"" + Числа[Н].Значение + "" : """""" +
        Числа[Н].Представление + """"""}"");
КонецЦикла;
//Стр = ""{1 : ""один""}, {2 : ""два""}"""}
},
{0,
{"Перемещение элемента",0,0,"","Числа = Новый СписокЗначений;
Числа.Добавить(1, ""один"");
Числа.Добавить(3, ""три"");
Числа.Добавить(2, ""два"");
Числа.Сдвинуть(сз[2], -1);
//Числа = [1 : ""один"", 2 : ""два"", 3 : ""три""]"}
},
{0,
{"Поиск индекса элемента",0,0,"","Числа = Новый СписокЗначений;
Числа.Добавить(1, ""один"");
Числа.Добавить(2, ""два"");
Значение2 = Числа.НайтиПоЗначению(2);
Индекс = Числа.Индекс(Значение2);
//Индекс = 1"}
},
{0,
{"Показ выбора списка",0,0,""," Цвета = Новый СписокЗначений;
Цвета.Добавить(""Красный"");

Цвета.Добавить(""Зеленый"");
Цвета.Добавить(""Синий"");
//устанавливаем отметку у всех элементам
Цвета.ЗаполнитьПометки(Истина);

Оповещение = Новый ОписаниеОповещения(""РезультатВыбораСписка"", ЭтотОбъект);
Цвета.ПоказатьОтметкуЭлементов(Оповещение,""Выберите цвета"");

Процедура РезультатВыбораСписка(Элементы, Параметры) Экспорт
    Если Элементы = Неопределено Тогда
        Возврат;
    КонецЕсли;
    Для Каждого Цвет Из Элементы Цикл
        Если Цвет.Пометка Тогда
            Сообщить(Цвет.Значение);
        КонецЕсли;
    КонецЦикла;
КонецПроцедуры"}
},
{0,
{"Показ выбора элемента",0,0,"","Цвета = Новый СписокЗначений;
Цвета.Добавить(""Красный"");
Цвета.Добавить(""Зеленый"");
Цвета.Добавить(""Синий"");
//устанавливаем отметку у всех элементам
Цвета.ЗаполнитьПометки(Истина);
Оповещение = Новый ОписаниеОповещения(""РезультатВыбораСписка"", ЭтотОбъект);
Цвета.ПоказатьОтметкуЭлементов(Оповещение,""Выберите цвета"");


Процедура РезультатВыбораСписка(Элементы, Параметры) Экспорт
    Если Элементы = Неопределено Тогда
        Возврат;
    КонецЕсли;

    Для Каждого Цвет Из Элементы Цикл
        Если Цвет.Пометка Тогда
            Сообщить(Цвет.Значение);
        КонецЕсли;
    КонецЦикла;

КонецПроцедуры
"}
},
{0,
{"Проверка наличия значения",0,0,"","Цвета = Новый СписокЗначений;
Цвета.Добавить(""Красный"");
Цвета.Добавить(""Зеленый"");
Цвета.Добавить(""Синий"");
Оповещение = Новый ОписаниеОповещения(""РезультатВыбора"", ЭтотОбъект);
Цвета.ПоказатьВыборЭлемента(Оповещение, ""Выберите цвет);


Процедура РезультатВыбора(Элемент, Параметры) Экспорт
    Если Элемент <> Неопределено Тогда
        Сообщить(Элемент.Значение);
    КонецЕсли;
КонецПроцедуры
"}
},
{0,
{"Создать копию списка",0,0,"","Числа = Новый СписокЗначений;
Числа.Добавить(1, ""один"");
Числа.Добавить(2, ""два"");
КопияЧисла = Числа.Скопировать();
//КопияЧисла = [1 : ""один"", 2 : ""два""]"}
},
{0,
{"Сортировка элементов",0,0,"","Числа = Новый СписокЗначений;
Числа.Добавить(1, ""один"");
Числа.Добавить(3, ""три"");
Числа.Добавить(2, ""два"");

Числа.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
//Числа = [3 : ""три"", 2 : ""два"", 1 : ""один""]
Числа.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
//Числа = [2 : ""два"", 1 : ""один"", 3 : ""три""]
"}
}
},
{8,
{"Структура",1,0,"",""},
{0,
{"Добавление и удаление элементов",0,0,"","Месяцы = Новый Структура;
Месяцы.Вставить(""Январь"", 1);
Месяцы.Вставить(""Февраль"", 2);
Месяцы.Вставить(""Март"", 3);
Месяцы.Удалить(""Февраль"");
//Месяцы = [Январь : 1, Март : 3]
Месяцы.Очистить();
//Месяцы = [ ]"}
},
{0,
{"Изменение значения",0,0,"","Месяцы = Новый Структура;
Месяцы.Вставить(""Январь"", 5);
Месяцы.Вставить(""Февраль"", 2);
Месяцы[""Январь""] = 1;
//или
Месяцы.Январь = 1;
"}
},
{0,
{"Инициализация",0,0,"","//первый способ
Монитор = Новый Структура;
Монитор.Вставить(""Диагональ"", 23);
Монитор.Вставить(""Контрастность"", ""1000:1"");
Монитор.Вставить(""Матрица"", ""IPS"");
//второй способ
Монитор = Новый Структура( ""Диагональ,Контрастность,Матрица"",23, ""1000:1"", ""IPS"");

//третий способ

Монитор = Новый Структура(""Диагональ,Контрастность,Матрица"") ;
Монитор.Диагональ = 23;
Монитор.Контрастность = ""1000:1"";
Монитор.Матрица = ""IPS"";

"}
},
{0,
{"Количество элементов",0,0,"","Паспорт = Новый Структура;
Паспорт.Вставить(""Серия"", ""3004"");
Паспорт.Вставить(""Номер"", ""321123"");
Количество = Паспорт.Количество();
//Количество = 2
"}
},
{0,
{"Обход структуры",0,0,"","Телефон = Новый Структура;
Телефон.Вставить(""Диагональ"", 5.5);
Телефон.Вставить(""ОЗУ"", ""6 Гб"");
Телефон.Вставить(""Камера"", ""23 Мп"");
Стр = """";
Для Каждого Элемент из Телефон Цикл
    Стр = Стр + ?(Стр = """", """", "", "") +
        ("""" + Элемент.Ключ + "" : "" + Элемент.Значение);
КонецЦикла;
//Стр = ""Диагональ : 5,5, ОЗУ : 6 Гб, Камера : 23 Мп""
"}
},
{0,
{"Получение списка значений",0,0,"","Телефон = Новый Структура;
Телефон.Вставить(""Диагональ"", 5.5);
Телефон.Вставить(""ОЗУ"", ""6 Гб"");
Телефон.Вставить(""Камера"", ""23 Мп"");
Значения = Новый Массив;
Для Каждого Элемент из Телефон Цикл
    Значения.Добавить(Элемент.Значение);
КонецЦикла;
//Значения = [5.5, ""6 Гб"", ""23 Мп""]"}
},
{0,
{"Получение списка ключей",0,0,"","Телефон = Новый Структура;
Телефон.Вставить(""Диагональ"", 5.5);
Телефон.Вставить(""ОЗУ"", ""6 Гб"");
Телефон.Вставить(""Камера"", ""23 Мп"");
Ключи = Новый Массив;
Для Каждого Элемент из Телефон Цикл
    Ключи.Добавить(Элемент.Ключ);
КонецЦикла;
//Ключи = [""Диагональ"", ""ОЗУ"", Камера""]

Получить значение по ключу
Паспорт = Новый Структура;
Паспорт.Вставить(""Серия"", ""3004"");
Паспорт.Вставить(""Номер"", ""321123"");
Серия = """";
Паспорт.Свойство(""Серия"", Серия);
//Серия = ""3004
Номер = Паспорт.Номер;
//Номер = ""321123"""}
},
{0,
{"Проверка наличия ключа",0,0,"","Паспорт = Новый Структура;
Паспорт.Вставить(""Серия"", ""3004"");
Паспорт.Вставить(""Номер"", ""321123"");
ЕстьСерия = Паспорт.Свойство(""Серия"");
//ЕстьСерия = Да
ЕстьДатаВыдачи = Паспорт.Свойство(""ДатаВыдачи"");
//ЕстьДатаВыдачи = Нет"}
}
},
{18,
{"Таблица значений",1,0,"",""},
{0,
{"Группировка данных",0,0,"","Товары = Новый ТаблицаЗначений;
Товары.Колонки.Добавить(""Товар"");
Товары.Колонки.Добавить(""Материал"");
Товары.Колонки.Добавить(""Цена"");

Товар = Товары.Добавить();
Товар.Товар = ""Чайник"";
Товар.Материал = ""Пластик"";
Товар.Цена = 2500.5;
Товар = Товары.Добавить();
Товар.Товар = ""Тостер"";
Товар.Материал = ""Метал"";
Товар.Цена = 1800;
Товар = Товары.Добавить();
Товар.Товар = ""Блендер"";
Товар.Материал = ""Пластик"";
Товар.Цена = 1500;
Товары.Свернуть(""Материал"", ""Цена"");
//Товары = [Пластик : 4000.5, Метал : 1800]"}
},
{0,
{"Добавление и удаление строк",0,0,"","Товары = Новый ТаблицаЗначений;
Товары.Колонки.Добавить(""Товар"");
Товары.Колонки.Добавить(""Цена"");
Товар = Товары.Добавить();
Товар.Товар = ""Чайник"";
Товар.Цена = 2500.5;
//Товары = [Чайник : 2500.5]
Товар = Товары.Добавить();
Товар.Товар = ""Тостер"";
Товар.Цена = 1800;
//Товары = [Чайник : 2500.5, Тостер : 1800]
Товары.Удалить(0);
//Товары = [Тостер : 1800]
Товары.Очистить();
//Товары = [ ]"}
},
{0,
{"Загрузка и выгрузка колонок",0,0,"","Товары = Новый ТаблицаЗначений;
Товары.Колонки.Добавить(""Товар"");
Товары.Колонки.Добавить(""Цена"");
Товар = Товары.Добавить();
Товар.Товар = ""Чайник"";
Товар.Цена = 2500.5;
Товар = Товары.Добавить();
Товар.Товар = ""Тостер"";
Товар.Цена = 1800;
Названия = Товары.ВыгрузитьКолонку(""Товар"");
//Названия = [Чайник, Тостер]
Названия[0] = ""Духовка"";
Товары.ЗагрузитьКолонку(Названия, ""Товар"");
//Товары = [Духовка : 2500.5, Тостер : 1800]"}
},
{0,
{"Заполнение значений колонки",0,0,"","Товары = Новый ТаблицаЗначений;
Товары.Колонки.Добавить(""Товар"");
Товары.Колонки.Добавить(""Цена"");
Товар = Товары.Добавить();
Товар.Товар = ""Чайник"";
Товар = Товары.Добавить();
Товар.Товар = ""Тостер"";
Товары.ЗаполнитьЗначения(1000, ""Цена"");
//Товары = [Чайник : 1000, Тостер : 1000]"}
},
{0,
{"Инициализация",0,0,"","Товары = Новый ТаблицаЗначений;
Товары.Колонки.Добавить(""Товар"");
Товары.Колонки.Добавить(""Цена"",Новый ОписаниеТипов(""Число""));
Товар = Товары.Добавить();
Товар.Товар = ""Чайник"";
Товар.Цена = 2500.5;
Товар= Товары.Добавить();
Товар.Товар = ""Тостер"";
Товар.Цена = 1800;
//Товары = [Чайник : 2500.5, Тостер : 1800]"}
},
{0,
{"Обход  таблицы значений ",0,0,"","Товары = Новый ТаблицаЗначений;
Товары.Колонки.Добавить(""Товар"");
Товары.Колонки.Добавить(""Цена"");
Товар = Товары.Добавить();
Товар.Товар = ""Чайник"";
Товар.Цена = 2500.5;
Товар= Товары.Добавить();
Товар.Товар = ""Тостер"";
Товар.Цена = 1800;
Стр = """";
Количество = Товары.Колонки.Количество();
Для Каждого Строка из Товары Цикл
    Для Н = 0 По кол - 1 Цикл
        Стр = Стр + Товары.Колонки[Н].Имя +
        "": "" + Строка[Н];
        Стр = Стр + ?(Н < Количество - 1, "", "", "";"");
    КонецЦикла;
    Стр = Стр + Символы.ПС;
КонецЦикла;
//Стр = Товар: Чайник, Цена: 2500,5;
//      Товар: Тостер, Цена: 1800;
"}
},
{0,
{"Обход таблицы с индексом",0,0,"","Товары = Новый ТаблицаЗначений;
Товары.Колонки.Добавить(""Товар"");
Товары.Колонки.Добавить(""Цена"");
Товар = Товары.Добавить();
Товар.Товар = ""Чайник"";
Товар.Цена = 2500.5;
Товар = Товары.Добавить();
Товар.Товар = ""Тостер"";
Товар.Цена = 1800;
Стр = """";
Количество = Товары.Колонки.Количество();
Для Н1 = 0 По Товары.Количество() - 1 Цикл
    Для Н2 = 0 По кол - 1 Цикл
        Стр = Стр + Товары.Колонки[Н2].Имя +
        "": "" + Товары[Н1][Н2];
        Стр = Стр + ?(Н2 < Количество - 1, "", "", "";"");
    КонецЦикла;
    Стр = Стр + Символы.ПС;
КонецЦикла;
//Стр = Товар: Чайник, Цена: 2500,5;
//      Товар: Тостер, Цена: 1800;"}
},
{0,
{"Перемещение строк",0,0,"","Товары = Новый ТаблицаЗначений;
Товары.Колонки.Добавить(""Товар"");
Товары.Колонки.Добавить(""Цена"");
Товар = Товары.Добавить();
Товар.Товар = ""Чайник"";
Товар.Цена = 2500.5;
Товар= Товары.Добавить();
Товар.Товар = ""Тостер"";
Товар.Цена = 1800;
//Товары = [Чайник : 2500.5, Тостер : 1800]
//сдвигаем первую строку вниз
Товары.Сдвинуть(0, 1);
//Товары = [Тостер : 1800, Чайник : 2500.5]
//сдвигаем вторую строку вверх

Товары.Сдвинуть(1, -1);
//Товары = [Чайник : 2500.5, Тостер : 1800]
"}
},
{0,
{"Перечисление колонок",0,0,"","Товары = Новый ТаблицаЗначений;
Товары.Колонки.Добавить(""Товар"");
Товары.Колонки.Добавить(""Цена"");
Для Каждого Колонка Из Товары.Колонки Цикл
    Сообщить(Колонка.Имя);
КонецЦикла;"}
},
{0,
{"Поиск по таблице",0,0,"","Товары = Новый ТаблицаЗначений;
Товары.Колонки.Добавить(""Товар"");
Товары.Колонки.Добавить(""Цена"");
Товар = Товары.Добавить();
Товар.Товар = ""Чайник"";
Товар.Цена = 2500;
Товар = Товары.Добавить();
Товар.Товар = ""Тостер"";
Товар.Цена = 1800;
Товар = Товары.Добавить();
Товар.Товар = ""Миксер"";
Товар.Цена = 2500;

Строка = Товары.Найти(""Чайник"");
//Строка = Чайник : 2500
Строка = Товары.Найти(""Яблоко"");
//Строка = Неопределено
Строка = Товары.Найти(1800);
//Строка = Тостер : 1800
//поиск в заданных колонках:
Строка = Товары.Найти(""Тостер"", ""Товар, Цена"");
//Строка = Тостер : 1800
Строка = Таб.Найти(""Тостер"", ""Цена"");
//Строка = Неопределено
Строка = Товары.Найти(""Тостер"", ""Товар"");
//Строка = Тостер : 1800

Если (Строка <> Неопределено) Тогда
         Сообщить(Строка.Товар);
КонецЕсли;
ПараметрыОтбора = Новый Структура;
ПараметрыОтбора.Вставить(""Цена"", 2500);
Строки = Товары.НайтиСтроки(ПараметрыОтбора);
//массив из двух строк ""Чайник"" и ""Миксер""
"}
},
{0,
{"Получение индекса строк",0,0,""," Товары = Новый ТаблицаЗначений;
Товары.Колонки.Добавить(""Товар"");
Чайник = Товары.Добавить();
Чайник.Товар = ""Чайник"";
Блендер = Товары.Добавить();
Блендер.Товар = ""Блендер"";
Индекс = Товары.Индекс(чайник);
//Индекс = 0
Индекс = Товары.Индекс(блендер);
//Индекс = 1
"}
},
{0,
{"Создание копии таблицы",0,0,"","Товары = Новый ТаблицаЗначений;
Товары.Колонки.Добавить(""Товар"");
Товары.Колонки.Добавить(""Цена"");
Товар = Товары.Добавить();
Товар.Товар = ""Чайник"";
Товар.Цена = 2500.5;
Товар = Товары.Добавить();
Товар.Товар = ""Тостер"";
Товар.Цена = 1800;
Копия1 = Товары.Скопировать();

//Копия1 = [Чайник : 2500.5, Тостер : 1800]
Копия2 = Товары.СкопироватьКолонки(""Товар, Цена"");
//Копия2 - пустая таблица из двух колонок
Отбор = Новый Структура;
Отбор.Вставить(""Цена"", 1800);
Копия3 = Товары.Скопировать(отбор);
//Копия3 = [Тостер : 1800]
Копия4 = Товары.Скопировать(отбор, ""Товар"");
//Копия4 = [Тостер]"}
},
{0,
{"Сортировка данных",0,0,"","Товары = Новый ТаблицаЗначений;
Товары.Колонки.Добавить(""Товар"");
Товары.Колонки.Добавить(""Цена"");
Товар = Товары.Добавить();
Товар.Товар = ""Чайник"";
Товар.Цена = 2500.5;
Товар = Товары.Добавить();
Товар.Товар = ""Блендер"";
Товар.Цена = 1500;
Товар = Товары.Добавить();
Товар.Товар = ""Чайник"";
Товар.Цена = 1800;
Товары.Сортировать(""Товар Убыв, Цена Возр"");
//Товары = [Чайник : 1800, Чайник : 2500.5, Блендер : 1800]
"}
},
{0,
{"Фильтрация (отбор) строк",0,0,"","Товары = Новый ТаблицаЗначений;
Товары.Колонки.Добавить(""Товар"");
Товары.Колонки.Добавить(""Материал"");
Товар = Товары.Добавить();
Товар.Товар = ""Чайник"";
Товар.Материал = ""Метал"";
Товар = Товары.Добавить();
Товар.Товар = ""Блендер"";
Товар.Материал = ""Пластик"";
Товар = Товары.Добавить();
Товар.Товар = ""Тостер"";
Товар.Материал = ""Метал"";
Отбор = Новый Структура;
Отбор.Вставить(""Материал"", ""Метал"");
Строки = Товары.НайтиСтроки(Отбор);
Для Каждого Стр Из Строки Цикл
    Сообщить(Стр.Товар); // Чайник Тостер
КонецЦикла;
"}
},
{0,
{"Итог по колонке",0,0,"","ТЗ.Итог(""ИмяКолонки"")"}
},
{0,
{"Выгрузить значение колонки в массив",0,0,"","      мЗначения = тз.ВыгрузитьКолонку(0);"}
},
{0,
{"Найти колонку",0,0,"","      Колонка = тз.Колонки.Найти(""Комментарий"");"}
},
{0,
{"ПолучитьИмя, Заголовок колонки",0,0,"","    Колонка = тз.Колонки.Найти(""Комментарий"");
	Сообщить(Колонка.Имя); 
	Сообщить(Колонка.Заголовок);"}
}
}
},
{2,
{"Многопоточные операции",1,0,"",""},
{0,
{"Запуск нового потока",0,0,"","Параметры = Новый Массив;
Параметры.Добавить(""Значение"");
// запуск фонового задания
ФоновыеЗадания.Выполнить(""РаботаСПотоками.Операция"", Параметры);

Процедура Операция(Параметр) Экспорт
    //реализация фонового задания
КонецПроцедуры
"}
},
{0,
{"Запуск нового потока и ожидание",0,0,"","Параметры = Новый Массив;
Параметры.Добавить(""Значение"");
// запуск фонового задания
Задание = ФоновыеЗадания.Выполнить(""РаботаСПотоками.Операция"", Параметры);
МассивЗаданий = Новый Массив;
МассивЗаданий.Добавить(Задание);
ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
Сообщить(""Фоновое задание выполнено"");

Процедура Операция(Параметр) Экспорт

    //реализация фонового задания

КонецПроцедуры
"}
}
},
{3,
{"Обработка исключений",1,0,"",""},
{0,
{"Генерация исключения",0,0,"","Товары = Новый Массив;
ПродатьТовар(Товары);
Процедура ПродатьТовар(Товары) Экспорт
    Если (товары.Количество() = 0) Тогда
        ВызватьИсключение ""Отсутствует товар"";
    КонецЕсли;
    //Реализация продажи
КонецПроцедуры"}
},
{0,
{"Перехват всех исключений",0,0,"","Товары = ""сыр, колбаса"";
Попытка
    Продать(Товары);
Исключение
    Инфо = ИнформацияОбОшибке();
    Сообщить(""Описание='"" + Инфо.Описание + ""'"");
    Сообщить(""Модуль='"" + Инфо.ИмяМодуля + ""'"");
    Сообщить(""НомерСтроки="" + Инфо.НомерСтроки);
    Сообщить(""ИсходнаяСтрока='"" + Инфо.ИсходнаяСтрока + ""'"");
КонецПопытки;

Процедура Продать(Товары) Экспорт
    Если ТипЗнч(Товары) <> Тип(""Массив"") Тогда
        ВызватьИсключение ""Неверный параметр"";
    КонецЕсли;
    Если (Товары.Количество() = 0) Тогда
        ВызватьИсключение ""Отсутствует товар"";
    КонецЕсли;
    //Реализация продажи
КонецПроцедуры"}
},
{0,
{"Повторная генерация исключений",0,0,"","Попытка
    ВызватьИсключение ""Неверный формат"";
Исключение
    //сообщаем об ошибке
    Инфо = ИнформацияОбОшибке();
    Сообщить(Инфо);
    //здесь можно обработать ошибку
    //повторно вызываем исключение
    //с первоначальным описанием
    ВызватьИсключение Инфо.Описание;
КонецПопытки;

"}
}
},
{1,
{"Общие Объекты",1,0,"",""},
{2,
{"Табличный документ",1,0,"",""},
{0,
{"табличный документ: показать, заполнить, колонтитулы и шрифты, на принтер, масштаб, отступы",0,0,"","// получить табличный документ:
ТабДок = Новый ТабличныйДокумент;
Макет = ПолучитьМакет(""Макет"");	

// заполним параметры табличного документа:
ОбластьМакета = Макет.ПолучитьОбласть(""Область"");
ОбластьМакета.Параметры.ФИО = ""Семенов Семен Семенович"";
ОбластьМакета.Параметры.Возраст = ""25"";	
ТабДок.Вывести(ОбластьМакета);

// масштаб по ширине страницы:
ТабДок.АвтоМасштаб = Истина;

// покажем табличный документ, выведем на экран:
ТабДок.Показать();

// настройки вывода колонтитулов:
ТабДок.НижнийКолонтитул.Выводить = Истина;
ТабДок.НижнийКолонтитул.ТекстСправа = ""Информация снизу справа"";
ТабДок.НижнийКолонтитул.ТекстСлева = ""Информация снизу слева""; 
ТабДок.НижнийКолонтитул.ТекстВЦентре = ""Информация снизу по центру""; 
ТабДок.НижнийКолонтитул.НачальнаяСтраница = 2; // вывод колонтитула со второй страницы
НовыйШрифт = Новый Шрифт(""Times New Roman"",10,);
ТабДок.НижнийКолонтитул.Шрифт = НовыйШрифт;
ТабДок.РазмерКолонтитулаСнизу = 36; // высота колонтитула
ТабДок.ВерхнийКолонтитул.Выводить = Истина; // верхний колонтитул по аналогии с нижним 

// настройки отступов от краев документа:
ТабДок.ПолеСверху = 36; // отступ сверху
ТабДок.ПолеСнизу = 36; // отступ сверху
ТабДок.ПолеСлева = 20; // отступ слева
ТабДок.ПолеСправа = 10; // отступ справа 

// сразу отправим табличный документ на принтер:
ТабДок.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);"}
},
{0,
{"Изменить цвет текста области табличного документа",0,0,"","ТабДокумент.Области.<ИмяОбласти>.ЦветТекста= WebЦвета.Красный;"}
}
}
},
{13,
{"Объекты 1С",1,0,"",""},
{17,
{"Документы",1,0,"",""},
{0,
{"Блокировка перед изменением",0,0,"","Док = Документы.ПриходнаяНакладная;
Накл = Док.НайтиПоНомеру(6);
Объект = Накл.ПолучитьОбъект();
Если Не Объект.Заблокирован() Тогда
    Объект.Заблокировать();
    //Вносим необходимые изменения
    Объект.Склад = Справочники.Склады.Основной;
    Объект.Записать();
    Объект.Разблокировать();
КонецЕсли;"}
},
{0,
{"Изменение представления",0,0,"","Процедура ПодпискаНаСобытиеПолученияПредставления(
    Источник, Данные, Представление, СтандартнаяОбработка) Экспорт
    //Представление документа будет использоваться
    //во всех отчетах и журналах, где фигурирует данный документ
    СтандартнаяОбработка = Ложь;
    Представление = СтрШаблон(""№ %1 от %2"",
        Данные.Ссылка.ПолучитьОбъект().КаталожныйНомер,
        Данные.Дата);
КонецПроцедуры
	"}
},
{0,
{"Использование транзакции",0,0,"","Использование транзакции
//выбрать документы созданные до 01.01.2017
Запрос = Новый Запрос;
Запрос.Текст =
    ""ВЫБРАТЬ
    |   ПриходнаяНакладная.Ссылка
    |ИЗ
    |   Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
    |ГДЕ
    |   ПриходнаяНакладная.Дата < &Дата"";
Запрос.УстановитьПараметр(""Дата"", Дата(2017, 1, 1));
Элементы = Запрос.Выполнить().Выбрать();
//устанавливаем ""Основной"" склад для найденных док-в
//в случае любой ошибки, изменения
//по всем документам будут отменены
НачатьТранзакцию();
Пока Элементы.Следующий() Цикл
    Объект = Элементы.Ссылка.ПолучитьОбъект();
    Объект.Склад = Справочники.Склады.Основной;
    Объект.Записать();
КонецЦикла;
ЗафиксироватьТранзакцию();"}
},
{0,
{"Копирование документа",0,0,"","Док = Документы.ПриходнаяНакладная;
//находим нужный документ
Накл = Док.НайтиПоНомеру(6);
//создаем копию документа
НовыйДокумент = Накл.Скопировать();
НовыйДокумент.Склад = Справочники.Склады.Основной;
НовыйДокумент.Дата = ТекущаяДата();
НовыйДокумент.Записать();НовыйДокумент.Записать();"}
},
{0,
{"Открыть форму выбора",0,0,"","&НаКлиенте
Процедура ОткрытьФормуВыбора() Экспорт
 //процедура ""ПослеВыбораДокумента""
    //будет вызвана после выбора док-та
   Оповещение = Новый ОписаниеОповещения(
        ""ПослеВыбораДокумента"",
        ЭтотОбъект);
    ОткрытьФорму(
        ""Документ.ПриходнаяНакладная.ФормаВыбора"",,,,,,
        Оповещение);
КонецПроцедуры            
	

&НаКлиенте
Процедура ПослеВыбораДокумента(Результат, Параметры) Экспорт
    Если Результат <> Неопределено Тогда
        Сообщить(""Выбрали документ: "" + Результат);
    Иначе
        Сообщить(""Ничего не выбрали"");
    КонецЕсли;
КонецПроцедуры
"}
},
{0,
{"Открыть форму документа",0,0,"","&НаКлиенте
Процедура ОткрытьФормуДокумента() Экспорт
    Ссылка = НайтиДокумент(6);
    Парам = Новый Структура(""Ключ"", Ссылка);
    ОткрытьФорму(
        ""Документ.ПриходнаяНакладная.ФормаОбъекта"",
        Парам);
КонецПроцедуры
&НаСервере
Функция НайтиДокумент(Номер) Экспорт
    Док = Документы.ПриходнаяНакладная;
    Накл = Док.НайтиПоНомеру(Номер);
    Возврат Накл;
КонецФункции"}
},
{0,
{"Перебор документов",0,0,"","Перебор документов
//выбрать документы созданные начиная с 01.01.2017
//медленный, нерекомендуемый способ
Элементы = Документы.ПриходнаяНакладная.Выбрать();
Пока Элементы.Следующий() Цикл
    Если (НачалоДня(Элементы.Дата) >= Дата(2017, 1, 1)) Тогда
        Сообщить(Элементы);
    КонецЕсли;
КонецЦикла;
//рекомендуемый способ с сортировкой по дате
Запрос = Новый Запрос;
Запрос.Текст =
""ВЫБРАТЬ
|   Ссылка
|ИЗ
|   Документ.ПриходнаяНакладная
|ГДЕ
|   Дата >= &Дата
|
|УПОРЯДОЧИТЬ ПО
|   Дата"";

Запрос.УстановитьПараметр(""Дата"", Дата(2017, 1, 1));
Элементы = Запрос.Выполнить().Выбрать();
Пока Элементы.Следующий() Цикл
    Сообщить(Элементы.Ссылка);
КонецЦикла;"}
},
{0,
{"Поиск документов",0,0,"","Док = Документы.ПриходнаяНакладная;
//поиск по номеру документа
Накл = Док.НайтиПоНомеру(1);
 //Если элемент найден
Если (Накл <> Док.ПустаяСсылка()) Тогда
    Сообщить(Накл);
КонецЕсли;
 //поиск по реквизиту
Накл = Док.НайтиПоРеквизиту(""Склад"", Справочники.Склады.Основной);
 //Если элемент найден
Если (Не Накл.Пустая()) Тогда
    Сообщить(Накл);
КонецЕсли;

 //поиск запросом по дате и складу
Запрос = Новый Запрос;
Запрос.Текст =

    ""ВЫБРАТЬ
    |   Ссылка
    |ИЗ
    |   Документ.ПриходнаяНакладная
    |ГДЕ
    |   Дата МЕЖДУ &С И &По
    |   И Склад = &Склад"";

Запрос.УстановитьПараметр(""С"", '20170401');
Запрос.УстановитьПараметр(""По"", '20170630');
Запрос.УстановитьПараметр(""Склад"", Справочники.Склады.Основной);
Выборка = Запрос.Выполнить().Выбрать();
Пока Выборка.Следующий() Цикл
    Сообщить(Выборка.Ссылка);
КонецЦикла;"}
},
{0,
{"Поиск по документу основанию",0,0,"","Запрос = Новый Запрос;
Запрос.Текст =
    ""ВЫБРАТЬ
    |   Ссылка
    |ИЗ
    |   Документ.СчетФактура
    |ГДЕ
    |   ДокументОснование = &Основание"";
 Запрос.УстановитьПараметр(""Основание"",
 Документы.ПриходнаяНакладная.НайтиПоНомеру(5));
 Выборка = Запрос.Выполнить().Выбрать();
Если Выборка.Следующий() Тогда
    Сообщить(Выборка.Ссылка);
КонецЕсли;"}
},
{0,
{"Проведение документов",0,0,"","Документ = Документы.ПриходнаяНакладная.СоздатьДокумент();
Документ.Дата = ТекущаяДата();
//провести
Документ.Записать(РежимЗаписиДокумента.Проведение);
//отменить проведение
Документ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
Проверка состояния
Док = Документы.ПриходнаяНакладная;
//находим нужный документ
Накл = Док.НайтиПоНомеру(6);
Если Накл.Проведен Тогда
    Сообщить(""Документ проведен"");
ИначеЕсли Накл.ПометкаУдаления Тогда
    Сообщить(""Документ удален"");
Иначе
    Сообщить(""Документ записан"");
КонецЕсли"}
},
{0,
{"Создание документов",0,0,"","Документ = Документы.ПриходнаяНакладная.СоздатьДокумент();
Документ.Дата = ТекущаяДата();
Строка = Документ.Материалы.Добавить();
Строка.Материал = Справочники.Номенклатура.НайтиПоНаименованию(""Шланг"");
Строка.Количество = 2;
Строка.Цена = 230;
Документ.Записать();"}
},
{0,
{"Удаление документа",0,0,"","Док = Документы.ПриходнаяНакладная;
Накл = Док.НайтиПоНомеру(1);
Если (Накл <> Док.ПустаяСсылка()) Тогда
    //Документ помечается на удаление
    Накл.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
    //Документ полностью удаляется из БД
    //без проверки ссылочной целостности
    Накл.ПолучитьОбъект().Удалить();
КонецЕсли;"}
},
{0,
{"Форма выбора с отбором",0,0,"","&НаКлиенте
Процедура ОткрытьФормуВыбораСОтбором()
    //Отображаем только документы
    //со складом ""Основной""
    Отбор = Новый Структура;
    Отбор.Вставить(""Склад"",
        ОсновнойСклад());
    ПараметрыФормы = Новый Структура;
    ПараметрыФормы.Вставить(""Отбор"", Отбор);
    ОткрытьФорму(
        ""Документ.ПриходнаяНакладная.ФормаВыбора"",
        ПараметрыФормы);
КонецПроцедуры

&НаСервере
Функция ОсновнойСклад()
    Возврат Справочники.Склады.Основной;
КонецФункции"}
},
{4,
{"Табличная часть",1,0,"",""},
{0,
{"Добовление строки",0,0,"","Добовление строки
//Находим нужный документ
Док = Документы.ПриходнаяНакладная;
Накл = Док.НайтиПоНомеру(Номер);
Если (Накл <> Док.ПустаяСсылка()) Тогда
    //Получаем объект для редактирования
    Объект = Накл.ПолучитьОбъект();
    //Заполняем табличную часть
    Строка = Объект.Материалы.Добавить();
    Материал = Справочники.Номенклатура.НайтиПоКоду(""000000007"");
    Строка.Материал = Материал;
    Строка.Количество = 5;
    Строка.Цена = 450;
    //Записываем изменения
    Объект.Записать();
КонецЕсли;"}
},
{0,
{"Очистка таблицы",0,0,"","//Находим нужный документ
Док = Документы.ПриходнаяНакладная;
Накл = Док.НайтиПоНомеру(Номер);
//Получаем объект для редактирования
Объект = Накл.ПолучитьОбъект();
//Очищаем табличную часть
Объект.Материалы.Очистить();    
//Записываем изменения
Объект.Записать();"}
},
{0,
{"Перебор строк",0,0,"","Док = Документы.ПриходнаяНакладная;
Накл = Док.НайтиПоНомеру(6);
Для Каждого Строка Из Накл.Материалы Цикл
    Сообщить(Строка.Материал);
КонецЦикла;
Поиск строки
//Находим нужный документ
Док = Документы.ПриходнаяНакладная;
Накл = Док.НайтиПоНомеру(Номер);
Если (Накл <> Док.ПустаяСсылка()) Тогда
    Брус = Справочники.Номенклатура.НайтиПоКоду(""000000007"");
    //Поиск строки с брусом в поле Материал
    Строка = Накл.Материалы.Найти(Брус, ""Материал"");
    //Если нашли, то выводим цену
    Если ЗначениеЗаполнено(Строка) Тогда
        Сообщить(Строка.Цена);
    КонецЕсли;
КонецЕсли;"}
},
{0,
{"Удаление строки",0,0,"","//Находим нужный документ
Док = Документы.ПриходнаяНакладная;
Накл = Док.НайтиПоНомеру(Номер);
Если (Накл <> Док.ПустаяСсылка()) Тогда
    //Получаем объект для редактирования
    Объект = Накл.ПолучитьОбъект();
    Брус = Справочники.Номенклатура.НайтиПоКоду(""000000007"");
    //Поиск строки с брусом в поле Материал
    Строка = Объект.Материалы.Найти(Брус, ""Материал"");
    Если ЗначениеЗаполнено(Строка) Тогда
        //Если нашли, то удаляем
        Сообщить(""Удаляем строку №"" + Строка.НомерСтроки);
        Объект.Материалы.Удалить(Строка.НомерСтроки);
        //Записываем изменения
        Объект.Записать();
    КонецЕсли;
КонецЕсли;    "}
}
},
{0,
{"Провести документ",0,0,"","//1.
Запрос = Новый Запрос;
Запрос.Текст = ""
	|ВЫБРАТЬ
	|ПЕРВЫЕ 1
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Проведен = ложь
	|	И (ВЫРАЗИТЬ(РеализацияТоваровУслуг.Комментарий КАК СТРОКА(10))) = """"Тест""""
	|"";

Результат = Запрос.Выполнить().Выбрать();

если Результат.Следующий() тогда
	сообщить(""Проводим реализацию №"" + Результат.Ссылка.Номер + "" от "" + Результат.Ссылка.Дата);
	РеализацияТоваровУслугОбъект = Результат.Ссылка.ПолучитьОбъект();
	попытка
		РеализацияТоваровУслугОбъект.Записать(РежимЗаписиДокумента.Проведение);
		сообщить(""Успешно проведена"");
	исключение
		сообщить(""Не хватает товаров"");
	конецпопытки
иначе
	сообщить(""Не найден документ"");
конецесли;

//2.
Док=Документы.ОприходованиеТоваров;
ДокСсылка=Док.НайтиПоНомеру(""00000000009"",Дата(""20120101""));
Если НЕ(ДокСсылка=Док.ПустаяСсылка()) Тогда
	ДокОб=ДокСсылка.ПолучитьОбъект();
	ДокОб.Записать(РежимЗаписиДокумента.Проведение);
КонецЕсли;
"}
},
{0,
{"Примеры использования объектов",0,0,"","1.  // Глобальный контекст
  // Документы
// Пример: вывести все типы ссылок на элементы справочников, существующие в конфигурации.
Массив = Документы.ТипВсеСсылки().Типы();
Для Каждого ОчереднойТип из Массив Цикл 
  Сообщить(ОчереднойТип);
КонецЦикла;

2.  //объект ДокументыМенеджер
  // .<имя документа>
  // [<имя документа>]
  // Для Каждого … Из … Цикл … КонецЦикла;
// Пример: получить макет для печати документа ""Оказание услуги"".
Макет = Документы[""ОказаниеУслуги""].ПолучитьМакет(""Печать"");
// Пример: получить ссылку на каждый из документов, существующих в конфигурации.
Для Каждого ОчереднойДокумент Из Документы Цикл
  Ссылка = ОчереднойДокумент.ПолучитьСсылку();
 …
КонецЦикла;

3.   // объект ДокументМенеджер.<Имя документа>
  // НайтиПоНомеру()
  // НайтиПоРеквизиту()
  // ПустаяСсылка()
// Пример: Проверить, проведен ли документ ПриходнаяНакладная с номером 3.
Если Документы.ПриходнаяНакладная.НайтиПоНомеру(3).Проведен Тогда
  Сообщить(""Документ с номером 3 проведен"");
КонецЕсли;
// Пример: Проверить, что во всех документах ПриходнаяНакладная заполнен реквизит Склад.
ПустаяСсылкаСклада = Справочники.Склады.ПустаяСсылка();
Если Не Документы.ПриходнаяНакладная.НайтиПоРеквизиту(
            ""Склад"", ПустаяСсылкаСклада).Пустая() Тогда 
  Сообщить(""Есть документы, у которых не заполнен реквизит Склад"");
КонецЕсли;

4.   // объект ДокументМенеджер.<Имя документа>
   // Выбрать()
// Пример: Выбрать все документы ПриходнаяНакладная за текущий месяц.
Выборка = Документы.ПриходнаяНакладная.Выбрать(НачалоМесяца(
            ТекущаяДата()), КонецМесяца(ТекущаяДата()));
Пока Выборка.Следующий() Цикл 
  Сообщить(Выборка);
КонецЦикла;

5.   // объект ДокументМенеджер.<Имя документа>
   // СоздатьДокумент()
// Пример: Создать новый документ ПриходнаяНакладная.
НовыйДокумент = Документы.ПриходнаяНакладная.СоздатьДокумент();
НовыйДокумент.Дата = ТекущаяДата();
НовыйДокумент.Склад = Справочники.Склады.Основной;
// Заполнить табличную часть Материалы
НоваяСтрокаТабличнойЧасти = НовыйДокумент.Материалы.Добавить();
НоваяСтрокаТабличнойЧасти.Материал = Справочники.Номенклатура.НайтиПоКоду(6);
НоваяСтрокаТабличнойЧасти.Количество = 10;
НоваяСтрокаТабличнойЧасти.Цена = 22.5;
НоваяСтрокаТабличнойЧасти.Сумма = 225;
НовыйДокумент.Записать();

6.   // объект ДокументОбъект.<Имя документа>, объект ДокументСсылка.<Имя документа>
    // Ссылка
// Пример: в модуле объекта вызвать процедуру проверки заполнения реквизитов документа.
Если Не ПроверитьЗаполнениеРеквизитов(ЭтотОбъект.Ссылка) Тогда
  Сообщить(""Реквизиты документа не заполнены!"");
КонецЕсли;

7.   // объект ДокументСсылка.<Имя документа>, объект ДокументОбъект.<Имя документа>
  // ПолучитьОбъект()
  // Скопировать()
// Пример: пометить документ на удаление.
НенужныйДокумент = Документы.ОказаниеУслуги.НайтиПоНомеру(13).ПолучитьОбъект();
НенужныйДокумент.УстановитьПометкуУдаления(Истина);

8.   // объект ДокументВыборка.<Имя документа>
  // Ссылка
// Сформировать список ссылок на все документы ""ПриходнаяНакладная"" за текущий месяц.
СписокНакладных = Новый СписокЗначений;
Выборка = Документы.ПриходнаяНакладная.Выбрать(НачалоМесяца(ТекущаяДата()),
 КонецМесяца(ТекущаяДата()));
Пока Выборка.Следующий() Цикл 
  СписокНакладных.Добавить(Выборка.Ссылка);
КонецЦикла;

9.   // объект ДокументВыборка.<Имя документа>
   // ПолучитьОбъект()
// Пример: удалить все документы ""ПриходнаяНакладная"".
Выборка = Документы.ПриходнаяНакладная.Выбрать();
Пока Выборка.Следующий() Цикл 
  Выборка.ПолучитьОбъект().Удалить();
КонецЦикла;
"}
},
{0,
{"проверить проведен ли документ",0,0,"","Если Объект.Проведен Тогда
    Сообщить(""Проведен"")
Иначе
    Сообщить(""Не проведен"")
КонецЕсли;"}
}
},
{3,
{"Константы",1,0,"",""},
{0,
{"Перебор всех констант",0,0,"","Для Каждого Константа Из Константы Цикл
    Сообщить(Строка(Константа) + "" = "" + Константа.Получить());
КонецЦикла;
Получение значения
//первый способ
Пи = Константы.ЧислоПи.Получить();
Сообщить(Пи);

//второй способ
Менеджер = Константы.ЧислоПи.СоздатьМенеджерЗначения();
Менеджер.Прочитать();
Пи = Менеджер.Значение;
Сообщить(Пи);

//третий способ
Список = ""ЧислоПи, Экспонента"";
Набор = Константы.СоздатьНабор(Список);
Набор.Прочитать();
Сообщить(Набор.ЧислоПи);"}
},
{0,
{"Установка значений",0,0,"","Пи = 3.145;

//первый способ
Константы.ЧислоПи.Установить(Пи);

//второй способ
Менеджер = Константы.ЧислоПи.СоздатьМенеджерЗначения();
Менеджер.Значение = Пи;
Менеджер.Записать();

//третий способ
Список = ""ЧислоПи, Экспонента"";
Набор = Константы.СоздатьНабор(Список);
Набор.ЧислоПи = Пи;
Набор.Записать();"}
},
{0,
{"Примеры использования объектов",0,0,"","//1.   Глобальный контекст
  // Константы
// Пример: установить значение константы.
Константы.Бухгалтер.Установить(""Сидоров Петр Иванович"");

//2.   объект КонстантыМенеджер
  // .<имя константы>
  // [<имя константы>]
  // Для Каждого … Из … Цикл … КонецЦикла;
// Пример: прочитать значение константы.
Результат = Константы.ПрефиксНумерации.Получить();
Сообщить(""Значение константы ПрефиксНумерации = ""+ Результат);
// Пример: установить значение константы ПрефиксНумерации равным ЦБ.
Константы[""ПрефиксНумерации""].Установить(""ЦБ"");
Сообщить(""Новое значение = "" + Константы[""ПрефиксНумерации""].Получить());
// Пример: очистить значения всех констант.
Для Каждого ОчереднаяКонстанта Из Константы Цикл
  ОчереднаяКонстанта.Установить(Неопределено);
КонецЦикла;

//3.   объект КонстантыМенеджер
  // СоздатьНабор()
// Пример: установить новые значения нескольких констант.
Набор = Константы.СоздатьНабор(""Руководитель, Бухгалтер"");
Набор.Руководитель = ""Николаев Денис Павлович"";
Набор.Бухгалтер = ""Николаева Людмила Сергеевна"";
Набор.Записать();

//4.   объект КонстантаМенеджер.<имя>
  // СоздатьМенеджерЗначения()
// Пример: вывести значения всех констант, существующих в конфигурации.
Для Каждого ОчереднаяКонстанта Из Константы Цикл
  ИмяКонст = ОчереднаяКонстанта.СоздатьМенеджерЗначения().Метаданные().Имя;
  ЗначениеКонст = ОчереднаяКонстанта.Получить();
  Сообщить(""Константа ""+ ИмяКонст +"" = ""+ ЗначениеКонст);
КонецЦикла;
"}
}
},
{5,
{"Перечисления",1,0,"",""},
{0,
{"Отображение формы выбора",0,0,"","&НаКлиенте
Процедура ОтобразитьФормуВыбора() Экспорт
    Оповещение = Новый ОписаниеОповещения(""ВыборЗавершен"",ЭтотОбъект);
    ОткрытьФорму(""Перечисление.СтороныСвета.ФормаВыбора"",,,,,, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗавершен(Результат, Параметры) Экспорт

    Если ЗначениеЗаполнено(Результат) Тогда
        Сообщить(Результат);
    Иначе
        Сообщить(""Значение не выбрано"");
    КонецЕсли;
КонецПроцедуры"}
},
{0,
{"Перебор элементов",0,0,"","&НаСервере
СтороныСвета = Перечисления.СтороныСвета;

//способ первый
Для Каждого Элемент из СтороныСвета Цикл
    Сообщить(Элемент);
КонецЦикла;

//способ второй
Для Н = 0 По СтороныСвета.Количество() - 1 Цикл
    Сообщить(СтороныСвета.Получить(Н));
КонецЦикла;"}
},
{0,
{"Получение элемента",0,0,"","СтороныСвета = Перечисления.СтороныСвета;
Север = СтороныСвета.Север;"}
},
{0,
{"Примеры использования объектов",0,0,"","1.  // Глобальный контекст
  // Перечисления
// Пример: получить значение перечисления по индексу.
Перечисления.ВидыНоменклатуры.Получить(0);
2.  // объект ПеречисленияМенеджер
  // .<имя перечисления>
  // [<имя перечисления>]
  // Для Каждого … Из … Цикл … КонецЦикла;
// Пример: получить количество значений перечисления
Перечисления.[""ВидыНоменклатуры""].Количество();
3.   // объект ПеречислениеМенеджер.<Имя>
  // .<имя значения перечисления>
  // [<имя значения перечисления>]
  // [<индекс элемента коллекции>]
  // Для Каждого … Из … Цикл … КонецЦикла;
  // ПустаяСсылка()
// Пример: получить пустую ссылку на значение перечисления.
…
ПустаяСсылкаПеречисления = Перечисления.ВидыНоменклатуры.ПустаяСсылка();
Если ТекущаяНоменклатура.ВидНоменклатуры = ПустаяСсылкаПеречисления Тогда
  // Предложить заполнение вида номенклатуры.
 …
КонецЕсли;
"}
},
{0,
{"Обращение к перечислению на клиенте в управляемых формах",0,0,"","ПредопределенноеЗначение(""Справочник.СвойстваОбъектов.КассаООК"")
&НаКлиенте
Процедура УстановитьВидимостьКредитныхУсловий()

	Если Объект.ВариантДоговора = ПредопределенноеЗначение(""Перечисление.ВариантыДоговоров.Комплектация"") Тогда
		//…
	КонецЕсли;
	
КонецПроцедуры"}
}
},
{8,
{"План счетов",1,0,"",""},
{0,
{"Контекстный поиск счётов",0,0,"","Запрос = Новый Запрос;
Запрос.Текст =
    ""ВЫБРАТЬ
    |   Основной.Ссылка
    |ИЗ
    |   ПланСчетов.Основной КАК Основной
    |ГДЕ
    |   Основной.Наименование ПОДОБНО &Наименование"";

Запрос.УстановитьПараметр(""Наименование"", ""%Товар%"");
Выборка = Запрос.Выполнить().Выбрать();
Пока Выборка.Следующий() Цикл
    Сообщить(Выборка.Ссылка);
КонецЦикла;"}
},
{0,
{"Перебор всех счётов",0,0,"","Элементы = ПланыСчетов.Основной.Выбрать();
Пока Элементы.Следующий() Цикл
    Сообщить(Элементы.Наименование);
КонецЦикла;"}
},
{0,
{"Перебор подчинённых счётов",0,0,"","Перебор подчинённых счётов
//Перечисляем все подсчета счета Товары
Товары = ПланыСчетов.Основной.Товары;
Элементы = ПланыСчетов.Основной.Выбрать(Товары);
Пока Элементы.Следующий() Цикл
    Сообщить(Элементы.Наименование);
КонецЦикла;"}
},
{0,
{"Перебор субконто счётов",0,0,"","//Перечисляем все субконто счета Товары
Товары = ПланыСчетов.Основной.Товары;
Для Каждого Субконто из Товары.ВидыСубконто Цикл
    Сообщить(Субконто.ВидСубконто.Наименование);
КонецЦикла;"}
},
{0,
{"Поиск счета",0,0,"","//поиск по коду
Счет = ПланыСчетов.Основной.НайтиПоКоду(""41"");
//Если счет найден
Если (Счет <> ПланыСчетов.Основной.ПустаяСсылка()) Тогда
    Сообщить(Счет.Наименование);
КонецЕсли;
//поиск по наименованию
Счет = ПланыСчетов.Основной.НайтиПоНаименованию(""Капитал"");
Если (Не Счет.Пустая()) Тогда
    Сообщить(Счет.Код);
КонецЕсли;"}
},
{0,
{"Предопределенные счета",0,0,"","//Счет ""Товары"" задан в конфигурации
//на форме предопределенных элементов
//плана счетов Основной
Товары =  ПланыСчетов.Основной.Товары;
Сообщить(Товары);"}
},
{0,
{"Создание счета",0,0,"","
Счет = ПланыСчетов.Основной.СоздатьСчет();
Счет.Родитель = ПланыСчетов.Основной.Товары;
Счет.Код = ""41.05"";
Счет.Наименование = ""Товары (совместная деятельность)"";
Счет.Вид = ВидСчета.Активный;
Счет.Забалансовый = Истина;
Субконто1 = Счет.ВидыСубконто.Добавить();
СУбконто1.ВидСубконто =
ПланыВидовХарактеристик.ВидыСубконто.Материалы;
СУбконто1.Количественный = Истина;
Счет.Записать();"}
},
{0,
{"Удаление счета",0,0,"","Счет = ПланыСчетов.Основной.НайтиПоКоду(""41.05"");
Если (Не Счет.Пустая()) Тогда
    //Счет помечается на удаление
    Счет.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
    //Счет полностью удаляется из БД
    //без проверки ссылочной целостности   
    Счет.ПолучитьОбъект().Удалить();
КонецЕсли;"}
}
},
{8,
{"Планы видов расчета",1,0,"",""},
{0,
{"Добавление вида расчета",0,0,"","ВидРасчета = ПланыВидовРасчета.ОсновныеНачисления.СоздатьВидРасчета();
ВидРасчета.Код = ""Районный"";
ВидРасчета.Наименование = ""Районный коэффициент"";
ВидРасчета.Процент = 80;

Базовый = ВидРасчета.БазовыеВидыРасчета.Добавить();
Базовый.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисления.Оклад;

Ведущий = ВидРасчета.ВедущиеВидыРасчета.Добавить();
Ведущий.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисления.Оклад;
Ведущий = ВидРасчета.ВедущиеВидыРасчета.Добавить();
Ведущий.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисления.Невыход;

ВидРасчета.Записать();"}
},
{0,
{"Использование транзакции",0,0,"","
Запрос = Новый Запрос;
Запрос.Текст =
""ВЫБРАТЬ
|   ОсновныеНачисления.Ссылка
|ИЗ
|   ПланВидовРасчета.ОсновныеНачисления КАК ОсновныеНачисления
|ГДЕ
|   ОсновныеНачисления.Наименование ПОДОБНО &ЧастьНаименования"";

Запрос.УстановитьПараметр(""ЧастьНаименования"", ""%премия%"");
Выборка = Запрос.Выполнить().Выбрать();

//увеличиваем размер премий на 10%
//в случае любой ошибки, изменения 
//по всех элементам будут отменены  
НачатьТранзакцию();
Пока Выборка.Следующий() Цикл
Премия = Выборка.Ссылка.ПолучитьОбъект();
Премия.Процент = Премия.Процент * 1.1;
Премия.Записать();
КонецЦикла;
ЗафиксироватьТранзакцию();"}
},
{0,
{"Контекстный поиск",0,0,"","Запрос = Новый Запрос;
Запрос.Текст =
""ВЫБРАТЬ
|   ОсновныеНачисления.Наименование
|ИЗ
|   ПланВидовРасчета.ОсновныеНачисления КАК ОсновныеНачисления
|ГДЕ
|   ОсновныеНачисления.Наименование ПОДОБНО &ЧастьНаименования"";

Запрос.УстановитьПараметр(""ЧастьНаименования"", ""%премия%"");

Выборка = Запрос.Выполнить().Выбрать();

Пока Выборка.Следующий() Цикл
Сообщить(Выборка.Наименование);
КонецЦикла;"}
},
{0,
{"Перебор всех элементов",0,0,"","Процедура ПереборЭлементов() Экспорт
    Элементы = ПланыВидовРасчета.ОсновныеНачисления.Выбрать();
    Пока Элементы.Следующий() Цикл
       Сообщить(Элементы.Наименование);
    КонецЦикла;
КонецПроцедуры"}
},
{0,
{"Поиск вида расчёта",0,0,"","План = ПланыВидовРасчета.ОсновныеНачисления;
//поиск по коду
Районный = План.НайтиПоКоду(""Районный"");
//Если элемент найден
Если (Районный <> План.ПустаяСсылка()) Тогда
Сообщить(Районный.Наименование);
КонецЕсли;

//поиск по наименованию
Районный = План.НайтиПоНаименованию(""Районный коэфф"", Ложь);
Если (Не Районный.Пустая()) Тогда
Сообщить(Районный.Наименование);
КонецЕсли;

//поиск по реквизиту
Районный = План.НайтиПоРеквизиту(""Процент"", 80);
Если (Не Районный.Пустая()) Тогда
Сообщить(Районный.Наименование);
КонецЕсли;"}
},
{0,
{"Поиск зависимых элементов",0,0,"","//Поиск видов расчетов, зависящих от элемента ""Невыход""
Запрос = Новый Запрос;
Запрос.Текст =
""ВЫБРАТЬ
|   ОсновныеНачисления.Наименование
|ИЗ
|   ПланВидовРасчета.ОсновныеНачисления КАК ОсновныеНачисления
|ГДЕ
|   ОсновныеНачисления.БазовыеВидыРасчета.ВидРасчета = &ВидРасчета
|   ИЛИ ОсновныеНачисления.ВедущиеВидыРасчета.ВидРасчета = &ВидРасчета
| ИЛИ ОсновныеНачисления.ВытесняющиеВидыРасчета.ВидРасчета = &ВидРасчета"";

Запрос.УстановитьПараметр(""ВидРасчета"",
ПланыВидовРасчета.ОсновныеНачисления.Невыход);

Выборка = Запрос.Выполнить().Выбрать();

Пока Выборка.Следующий() Цикл
Сообщить(Выборка.Наименование);
КонецЦикла;

"}
},
{0,
{"Предопределенные элементы",0,0,""," //вид расчета ""Оклад"" задан в конфигурации
//на форме предопределенных элементов
//плана видов расчетов ""ОсновныеНачисления""
Оклад = ПланыВидовРасчета.ОсновныеНачисления.Оклад;
Сообщить(Оклад);"}
},
{0,
{"Удаление видов расчётов",0,0,"","План = ПланыВидовРасчета.ОсновныеНачисления;
ВидРасчета = План.НайтиПоКоду(""Районный"");

Если (ВидРасчета <> План.ПустаяСсылка()) Тогда
//помечается на удаление
ВидРасчета.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);

//полностью удаляется из БД
//без проверки ссылочной целостности
ВидРасчета.ПолучитьОбъект().Удалить();
КонецЕсли;

"}
}
},
{7,
{"Планы видов характеристик",1,0,"",""},
{0,
{"Перенести элемент в группу",0,0,"","Характ = ПланыВидовХарактеристик.СвойстваНоменклатуры;

Элемент = Характ.НайтиПоНаименованию(""Вес"");
Группа = Характ.НайтиПоНаименованию(""Числовые"");

Если (Не Элемент.Пустая()) И Группа.ЭтоГруппа Тогда
    Объект = Элемент.ПолучитьОбъект();
    Объект.Родитель = Группа.Ссылка;
    Объект.Записать();
КонецЕсли
"}
},
{0,
{"Поиск элементов",0,0,"","Характ = ПланыВидовХарактеристик.СвойстваНоменклатуры;
//поиск по коду
Элемент = Характ.НайтиПоКоду(""000000002"");
//Если элемент найден
Если (Элемент <> Характ.ПустаяСсылка()) Тогда
    //Получаем объект для изменения и
    //меняем наименование
    Объект = Элемент.ПолучитьОбъект();    
    Объект.Наименование = Объект.Наименование + "" №1"";
    Объект.Записать();
    Сообщить(Элемент.Наименование);
КонецЕсли;

//поиск по наименованию
Элемент = Характ.НайтиПоНаименованию(""Вес"");
Если (Не Элемент.Пустая()) Тогда
    Сообщить(Элемент.Наименование);
КонецЕсли;"}
},
{0,
{"предопределенные элементы",0,0,"","//""Материал"" задан в конфигурации
//на форме предопределенных элементов
//плана вида характеристик СвойстваНоменклатуры
Материал = ПланыВидовХарактеристик.СвойстваНоменклатуры.Материал;
Сообщить(Материал);"}
},
{0,
{"создание группы",0,0,"","Характ = ПланыВидовХарактеристик.СвойстваНоменклатуры.СоздатьГруппу();
Характ.Наименование = ""Числовые"";
Характ.Записать();"}
},
{0,
{"создание элемента",0,0,"","Характ = ПланыВидовХарактеристик.СвойстваНоменклатуры.СоздатьЭлемент();
Характ.Наименование = ""Вес"";
Характ.ТипЗначения = Новый ОписаниеТипов(""Число"");
Характ.Записать();

Характ = ПланыВидовХарактеристик.СвойстваНоменклатуры.СоздатьЭлемент();
Характ.Наименование = ""Ответственный"";
Характ.ТипЗначения = Новый ОписаниеТипов(""СправочникСсылка.Сотрудники"");;
Характ.Записать();
"}
},
{0,
{"Удалить группу",0,0,"","Характ = ПланыВидовХарактеристик.СвойстваНоменклатуры;
Группа = Характ.НайтиПоНаименованию(""Числовые"");

Если (Не Группа.Пустая()) Тогда
    //Группа помечается на удаление
    Группа.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);

    //Группа и вложенные в нее элементы полностью удаляются     
    //из БД без проверки ссылочной целостности
    Группа.ПолучитьОбъект().Удалить();
КонецЕсли;"}
},
{0,
{"Удаление элемента",0,0,"","Характ = ПланыВидовХарактеристик.СвойстваНоменклатуры;
Элемент = Характ.НайтиПоКоду(""000000001"");

Если (Не Элемент.Пустая()) Тогда
    //Объект помечается на удаление
    Элемент.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);

    //Объект полностью удаляется из БД
    //без проверки ссылочной целостности
    Элемент.ПолучитьОбъект().Удалить();
КонецЕсли;"}
}
},
{9,
{"Регистры бухгалтерии",1,0,"",""},
{0,
{"Выбор записей за период",0,0,"","//Выбор всех записей за первое полугодие 2017 г.
//где счет дебета = Товары
Запрос = Новый Запрос;
Запрос.Текст =
    ""ВЫБРАТЬ
    |   Управленческий.СчетДт,
    |   Управленческий.СчетКт,
    |   Управленческий.Сумма
    |ИЗ
    |   РегистрБухгалтерии.Управленческий КАК Управленческий
    |ГДЕ
    |   Управленческий.Период МЕЖДУ &НачПериод И &КонПериод
    |   И Управленческий.СчетДт = &СчетДт"";

Запрос.УстановитьПараметр(""НачПериод"", '20170101');
Запрос.УстановитьПараметр(""КонПериод"", '20170630235959');
Запрос.УстановитьПараметр(""СчетДт"", ПланыСчетов.Основной.Товары);

Выборка = Запрос.Выполнить().Выбрать();

Пока Выборка.Следующий() Цикл
    Сообщить("""" + Выборка.СчетДт + "" / "" +
        Выборка.СчетКт + "" : "" + Выборка.Сумма);
КонецЦикла;
"}
},
{0,
{"Выбор записей по документу",0,0,"","Номер = ""000000001"";
Документ = Документы.ПриходнаяНакладная.НайтиПоНомеру(Номер);

//первый вариант
Набор = РегистрыБухгалтерии.Управленческий.СоздатьНаборЗаписей();
Набор.Отбор.Регистратор.Установить(Документ.Ссылка);
Набор.Прочитать();

Для н = 0 По Набор.Количество() - 1 Цикл
    Сообщить("""" + Набор[н].СчетДт + "" / "" +
    Набор[н].СчетКт + "" : "" + Набор[н].Сумма);
КонецЦикла;

//второй вариант
Объект = Документ.ПолучитьОбъект();
Набор = Объект.Движения.Управленческий;
Набор.Прочитать();

Для н = 0 По Набор.Количество() - 1 Цикл
    Сообщить("""" + Набор[н].СчетДт + "" / "" +
        Набор[н].СчетКт + "" : "" + Набор[н].Сумма);
КонецЦикла;

//третий вариант
Запрос = Новый Запрос;
Запрос.Текст =
    ""ВЫБРАТЬ
    |   Управленческий.СчетДт,
    |   Управленческий.СчетКт,
    |   Управленческий.Сумма
    |ИЗ
    |   РегистрБухгалтерии.Управленческий КАК Управленческий
    |ГДЕ
    |   Управленческий.Регистратор = &Регистратор"";

Запрос.УстановитьПараметр(""Регистратор"", Документ);
Выборка = Запрос.Выполнить().Выбрать();

Пока Выборка.Следующий() Цикл
    Сообщить("""" + Выборка.СчетДт + "" / "" +
        Выборка.СчетКт + "" : "" + Выборка.Сумма);
КонецЦикла;"}
},
{0,
{"Выбор остатков",0,0,"","//выбор остатков по счету Товары на 01.04.2017
//с группировкой по первому субконто
Запрос = Новый Запрос;
Запрос.Текст =
    ""ВЫБРАТЬ
    |   УправленческийОстатки.Субконто1 Как Номенклатура,
    |   УправленческийОстатки.СуммаОстаток Как Сумма
    |ИЗ
    |   РегистрБухгалтерии.Управленческий.Остатки(
    |       &НаДату
    |) КАК УправленческийОстатки
    |ГДЕ
    |   УправленческийОстатки.Счет = &Счет"";

Запрос.УстановитьПараметр(""НаДату"", '20170401');
Запрос.УстановитьПараметр(""Счет"", ПланыСчетов.Основной.Товары);
Выборка = Запрос.Выполнить().Выбрать();

Пока Выборка.Следующий() Цикл
    Сообщить("" "" + Выборка.Номенклатура + "": "" + Выборка.Сумма);
КонецЦикла;"}
},
{0,
{"Добавление записи",0,0,"","//Обновляем данные регистра Управленческий по
//документу ПриходнаяНакладная №000000001
Документ = Документы.ПриходнаяНакладная.НайтиПоНомеру(""000000001"");

Набор = РегистрыБухгалтерии.Управленческий.СоздатьНаборЗаписей();
Набор.Отбор.Регистратор.Установить(Документ.Ссылка);

Для Каждого Строка Из Документ.Материалы Цикл
    Запись = Набор.Добавить();
    Запись.СчетДт = ПланыСчетов.Основной.Товары;
    Запись.СчетКт = ПланыСчетов.Основной.РасчетыСПоставщиками;
    Запись.Период = Документ.Дата;
    Запись.Сумма = Строка.Сумма;
    Запись.КоличествоДт = Строка.Количество;
    Запись.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Материалы] =
        Строка.Материал;
КонецЦикла;
	
Набор.Записать(Истина);	"}
},
{0,
{"Заполнение в обработке проведения",0,0,"","//модуль документа ""Приходная накладная""
Процедура ОбработкаПроведения(Отказ, Режим)

    Движения.Управленческий.Записывать = Истина;

    Для Каждого ТекСтрокаМатериалы Из Материалы Цикл
        Движение = Движения.Управленческий.Добавить();
        Движение.СчетДт = ПланыСчетов.Основной.Товары;
        Движение.СчетКт = ПланыСчетов.Основной.РасчетыСПоставщиками;
        Движение.Период = Дата;
        Движение.Сумма = ТекСтрокаМатериалы.Сумма;
        Движение.КоличествоДт = ТекСтрокаМатериалы.Количество;
        Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Материалы] =
        ТекСтрокаМатериалы.Материал;
    КонецЦикла;
КонецПроцедуры"}
},
{0,
{"Изменение записи",0,0,"","Документ = Документы.ПриходнаяНакладная.НайтиПоНомеру(""000000001"");
Объект = Документ.ПолучитьОбъект();
Набор = Объект.Движения.Управленческий;
Набор.Прочитать();

Для Каждого Запись Из Набор Цикл
    //увеличим проводки сумму на 10%
    Запись.Сумма = Запись.Сумма * 1.1;
КонецЦикла;

Набор.Записать(Истина);
"}
},
{0,
{"Очистка всего регистра",0,0,"","Запрос = Новый Запрос;
Запрос.Текст =
    ""ВЫБРАТЬ РАЗЛИЧНЫЕ
    |   Управленческий.Регистратор
    |ИЗ
    |   РегистрБухгалтерии.Управленческий КАК Управленческий"";

РезультатЗапроса = Запрос.Выполнить();
Выборка = РезультатЗапроса.Выбрать();

Набор = РегистрыБухгалтерии.Управленческий.СоздатьНаборЗаписей();

//удаляем записи по каждому регистратору
Пока Выборка.Следующий() Цикл
    Набор.Отбор.Регистратор.Установить(Выборка.Регистратор);
    Набор.Записать(Истина);
КонецЦикла;
"}
},
{0,
{"получение оборотов",0,0,"","//обороты за первое полугодие 2017 года по счету Товары
Запрос = Новый Запрос;
Запрос.Текст =
    ""ВЫБРАТЬ
    |   УправленческийОборотыДтКт.СубконтоДт1 Как Номенклатура,
    |   УправленческийОборотыДтКт.СуммаОборот Как Сумма
    |ИЗ
    |   РегистрБухгалтерии.Управленческий.ОборотыДтКт(
    |       &НачПериод,
    |       КОНЕЦПЕРИОДА(&КонПериод, ДЕНЬ)      
    |   ) КАК УправленческийОборотыДтКт
    |ГДЕ
    |   УправленческийОборотыДтКт.СчетДт = &СчетДт"";

Запрос.УстановитьПараметр(""НачПериод"", '20170101');
Запрос.УстановитьПараметр(""КонПериод"", '20170630');
Запрос.УстановитьПараметр(""СчетДт"", ПланыСчетов.Основной.Товары);

Выборка = Запрос.Выполнить().Выбрать();

Пока Выборка.Следующий() Цикл
    Сообщить("" "" + Выборка.Номенклатура + "": "" + Выборка.Сумма);
КонецЦикла;"}
},
{0,
{"Удаление записи",0,0,"","//Удаляем записи регистра Управленческий по
//документу ПриходнаяНакладная №000000001
Документ = Документы.ПриходнаяНакладная.НайтиПоНомеру(""000000001"");

Набор = РегистрыБухгалтерии.Управленческий.СоздатьНаборЗаписей();
Набор.Отбор.Регистратор.Установить(Документ.Ссылка);
Набор.Прочитать();

Если Набор.Количество() > 0 Тогда
//Удаляем первую запись
Набор.Удалить(0);
//Удаляем все записи
Набор.Очистить();
КонецЕсли;

Набор.Записать(Истина);
"}
}
},
{8,
{"Регистры накопления",1,0,"",""},
{0,
{"Выбор записей за период",0,0,"","Запрос = Новый Запрос;
Запрос.Текст =
""ВЫБРАТЬ
|   Материал.Наименование КАК Наименование,
|   Количество
|ИЗ
|   РегистрНакопления.ОстаткиМатериалов
|ГДЕ
|   Период МЕЖДУ &НачПериод И &КонПериод"";

Запрос.УстановитьПараметр(""НачПериод"", '20170101');
Запрос.УстановитьПараметр(""КонПериод"",
КонецДня('20170630'));
Выборка = Запрос.Выполнить().Выбрать();

Пока Выборка.Следующий() Цикл
Сообщить(Выборка.Наименование + "": "" +
Выборка.Количество);
КонецЦикла;"}
},
{0,
{"Выбор записи по документу",0,0,"","Номер = ""000000001"";
Документ = Документы.ПриходнаяНакладная.НайтиПоНомеру(Номер);

//первый вариант
Набор = РегистрыНакопления.ОстаткиМатериалов.СоздатьНаборЗаписей();
Набор.Отбор.Регистратор.Установить(Документ.Ссылка);
Набор.Прочитать();

Для н = 0 По Набор.Количество() - 1 Цикл
Сообщить(Набор[н].Материал.Наименование + "": "" + Набор[н].Количество);
КонецЦикла;

//второй вариант
Объект = Документ.ПолучитьОбъект();
Набор = Объект.Движения.ОстаткиМатериалов;
Набор.Прочитать();

Для н = 0 По Набор.Количество() - 1 Цикл
Сообщить(Набор[н].Материал.Наименование + "": "" + Набор[н].Количество);
КонецЦикла;

//третий вариант
Запрос = Новый Запрос;
Запрос.Текст =
""ВЫБРАТЬ
|   ОстаткиМатериалов.Материал.Наименование КАК Наименование,       
|   ОстаткиМатериалов.Количество
|ИЗ
|   РегистрНакопления.ОстаткиМатериалов КАК ОстаткиМатериалов
|ГДЕ
|   ОстаткиМатериалов.Регистратор.Номер = &Номер"";

Запрос.УстановитьПараметр(""Номер"", Номер);
Выборка = Запрос.Выполнить().Выбрать();

Пока Выборка.Следующий() Цикл
Сообщить(Выборка.Наименование + "": "" + Выборка.Количество);
КонецЦикла;"}
},
{0,
{"Добавление записи",0,0,"","//Обновляем данные регистра ОстаткиМатериалов по
//документу ОказаниеУслуг №000000001
Документ = Документы.ОказаниеУслуги.НайтиПоНомеру(""000000001"");

Набор = РегистрыНакопления.ОстаткиМатериалов.СоздатьНаборЗаписей();
Набор.Отбор.Регистратор.Установить(Документ.Ссылка);

Для Каждого Строка Из Документ.ПереченьНоменклатуры Цикл
Движение = Набор.Добавить();
Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
Движение.Материал = Строка.Номенклатура;
Движение.Количество = Строка.Количество;
Движение.Склад = Документ.Склад;
Движение.Период = Документ.Дата;
КонецЦикла;

Набор.Записать(Истина);

Заолнение и обработка проведения

//заполняем приход материалов   
Движения.ОстаткиМатериалов.Записывать = Истина;

Для Каждого ТекСтрокаМатериалы Из Материалы Цикл
Движение = Движения.ОстаткиМатериалов.Добавить();
Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
Движение.Период = Дата;
Движение.Материал = ТекСтрокаМатериалы.Материал;
Движение.Склад = Склад;
Движение.Количество = ТекСтрокаМатериалы.Количество;
КонецЦикла;
"}
},
{0,
{"Изменить запись",0,0,"","Документ = Документы.ПриходнаяНакладная.НайтиПоНомеру(""000000001"");
Объект = Документ.ПолучитьОбъект();
Набор = Объект.Движения.ОстаткиМатериалов;
Набор.Прочитать();

Для Каждого Запись Из Набор Цикл
//увеличим количество на 1
Запись.Количество = Запись.Количество + 1;
КонецЦикла;

Набор.Записать(Истина);

Очиства всего регистра

Запрос = Новый Запрос;
Запрос.Текст =
""ВЫБРАТЬ
|   Различные ОстаткиМатериалов.Регистратор
|ИЗ
|   РегистрНакопления.ОстаткиМатериалов КАК ОстаткиМатериалов"";

РезультатЗапроса = Запрос.Выполнить();
Выборка = РезультатЗапроса.Выбрать();

Набор = РегистрыНакопления.ОстаткиМатериалов.СоздатьНаборЗаписей();

Пока Выборка.Следующий() Цикл
Набор.Отбор.Регистратор.Установить(Выборка.Регистратор);
Набор.Записать(Истина);
КонецЦикла;
"}
},
{0,
{"Получение оборотов",0,0,"","Запрос = Новый Запрос;
Запрос.Текст =
""ВЫБРАТЬ
|   Материал.Наименование КАК Наименование,
|   КоличествоОборот КАК Количество
|ИЗ
|   РегистрНакопления.ОстаткиМатериалов.Обороты(
|       &НачПериод,
|       &КонПериод
|   )"";

Запрос.УстановитьПараметр(""НачПериод"", '20170101');
Запрос.УстановитьПараметр(""КонПериод"",
КонецДня('20170630'));
Выборка = Запрос.Выполнить().Выбрать();

Пока Выборка.Следующий() Цикл
Сообщить(Выборка.Наименование +
"": "" + Выборка.Количество);
КонецЦикла;"}
},
{0,
{"Получение остатков на дату",0,0,"","Запрос = Новый Запрос;
Запрос.Текст =
    ""ВЫБРАТЬ
    |   ОстаткиМатериаловОстатки.Материал,
    |   ОстаткиМатериаловОстатки.КоличествоОстаток Как Количество
    |ИЗ
    |   РегистрНакопления.ОстаткиМатериалов.Остатки(
    |       &НаДату
    |) КАК ОстаткиМатериаловОстатки"";

Запрос.УстановитьПараметр(""НаДату"", '20170501');
Выборка = Запрос.Выполнить().Выбрать();

Пока Выборка.Следующий() Цикл
    Сообщить(Выборка.Материал.Наименование + "": "" + Выборка.Количество);
КонецЦикла;"}
},
{0,
{"Удаление записи",0,0,"","//Удаляем записи регистра ОстаткиМатериалов по
//документу ПриходнаяНакладная №000000001
Документ = Документы.ПриходнаяНакладная.НайтиПоНомеру(""000000001"");

Набор = РегистрыНакопления.ОстаткиМатериалов.СоздатьНаборЗаписей();
Набор.Отбор.Регистратор.Установить(Документ.Ссылка);
Набор.Прочитать();

Если Набор.Количество() > 0 Тогда
//Удаляем первую запись
Набор.Удалить(0);
//Удаляем все записи
Набор.Очистить();
КонецЕсли;

Набор.Записать(Истина);
"}
},
{0,
{"Примеры использования объектов ",0,0,"","1.  // Глобальный контекст
  // РегистрыНакопления
// Пример: выполнить полный пересчет итогов регистра ""ОстаткиМатериалов"".
РегистрыНакопления.ОстаткиМатериалов.ПересчитатьИтоги();
2.  // объект РегистрыНакопленияМенеджер
   // .<имя регистра накопления>
  // [<имя регистра накопления>]
  // Для Каждого … Из … Цикл … КонецЦикла;
// Пример: рассчитать итоги регистра ""ОстаткиМатериалов"" на указанную дату.
ИмяРегистра = ОстаткиМатериалов;
РегистрыНакопления[ИмяРегистра].УстановитьПериодРассчитанныхИтогов(УказаннаяДата);
3.  // объект РегистрНакопленияМенеджер.<имя>
   // СоздатьКлючЗаписи()
// Пример: активизировать требуемую строку списка регистра накопления.
СтруктураКлючевыхПолей = Новый Структура;
СтруктураКлючевыхПолей.Вставить(
      ""Регистратор"", Документы.ПриходнаяНакладная.НайтиПоНомеру(""0000002""));
СтруктураКлючевыхПолей.Вставить(""НомерСтроки"", 2);
Элементы.Материалы.ТекущаяСтрока = РегистрыНакопления.ОстаткиМатериалов
      Со.здатьКлючЗаписи(СтруктураКлючевыхПолей);
4.  // объект РегистрНакопленияМенеджер.<имя>
   // СоздатьНаборЗаписей()
// Пример: получить движения документа.
НужныйДокумент = Документы.ПриходнаяНакладная.НайтиПоНомеру(4);
Движения = РегистрыНакопления.ОстаткиМатериалов.СоздатьНаборЗаписей();
Движения.Отбор.Регистратор.Значение = НужныйДокумент;
Движения.Прочитать();
5.  // объект РегистрНакопленияМенеджер.<имя>
  // Выбрать()
  // ВыбратьПоРегистратору()
// Пример: выбрать все записи регистра ""ОстаткиМатериалов"" за текущий месяц.
Выборка = РегистрыНакопления.ОстаткиМатериалов.Выбрать(
      НачалоМесяца(ТекущаяДата()), КонецМесяца(ТекущаяДата()));
6.  // объект РегистрНакопленияНаборЗаписей.<имя>
  // [<индекс элемента коллекции>]
  // Для Каждого … Из … Цикл … КонецЦикла;
// Пример: получить движения документа.
НужныйДокумент = Документы.ПриходнаяНакладная.НайтиПоНомеру(4);
Движения = РегистрыНакопления.ОстаткиМатериалов.СоздатьНаборЗаписей();
Движения.Отбор.Регистратор.Значение = НужныйДокумент;
Движения.Прочитать();
Для Каждого ОчередноеДвижение Из Движения Цикл
  // Алгоритм обработки движений
   …
КонецЦикла;"}
}
},
{8,
{"Регистры расчета",1,0,"",""},
{0,
{"Добавление записи",0,0,"","//Обновляем данные регистра Начисления по
//документу НачисленияСотрудникам №000000001
Документ = Документы.НачисленияСотрудникам.НайтиПоНомеру(""000000001"");

Набор = РегистрыРасчета.Начисления.СоздатьНаборЗаписей();
Набор.Отбор.Регистратор.Установить(Документ.Ссылка);

Для Каждого Строка Из Документ.Начисления Цикл
Запись = Набор.Добавить();
Запись.Сторно = Ложь;
Запись.ВидРасчета = Строка.ВидРасчета;
Запись.ПериодДействияНачало = Строка.ДатаНачала;
Запись.ПериодДействияКонец = КонецДня(Строка.ДатаОкончания);
Запись.ПериодРегистрации = Документ.Дата;
Запись.БазовыйПериодНачало = Строка.ДатаНачала;
Запись.БазовыйПериодКонец = КонецДня(Строка.ДатаОкончания);
Запись.Сотрудник = Строка.Сотрудник;
Запись.ГрафиеРаботы = Строка.ГрафикРаботы;
Запись.ИсходныеДанные = Строка.Начислено;
КонецЦикла;

Набор.Записать(Истина);
"}
},
{0,
{"Заполнение в обработке проведения ",0,0,"","Процедура ОбработкаПроведения(Отказ, Режим)
//модуль документа ""Начисления сотрудникам""
Движения.Начисления.Записывать = Истина;

Для Каждого ТекСтрокаНачисления Из Начисления Цикл
Движение = Движения.Начисления.Добавить();
Движение.Сторно = Ложь;
Движение.ВидРасчета = ТекСтрокаНачисления.ВидРасчета;
Движение.ПериодДействияНачало = ТекСтрокаНачисления.ДатаНачала;
Движение.ПериодДействияКонец = КонецДня(ТекСтрокаНачисления.ДатаОкончания);
Движение.ПериодРегистрации = Дата;
Движение.БазовыйПериодНачало = ТекСтрокаНачисления.ДатаНачала;
Движение.БазовыйПериодКонец = КонецДня(ТекСтрокаНачисления.ДатаОкончания);
Движение.Сотрудник = ТекСтрокаНачисления.Сотрудник;
Движение.ГрафиеРаботы = ТекСтрокаНачисления.ГрафикРаботы;
Движение.ИсходныеДанные = ТекСтрокаНачисления.Начислено;
КонецЦикла;

Движения.Начисления.Записать();
КонецПроцедуры
"}
},
{0,
{"Изменение записи",0,0,"","Документ = Документы.НачисленияСотрудникам.НайтиПоНомеру(""000000001"");
Объект = Документ.ПолучитьОбъект();
Набор = Объект.Движения.Начисления;
Набор.Прочитать();

Для Каждого Запись Из Набор Цикл
//увеличим результат расчета на 10%
Запись.Результат = Запись.Результат * 1.1;
КонецЦикла;

Набор.Записать(Истина);
"}
},
{0,
{"Очистка всего регистра",0,0,"","Запрос = Новый Запрос;
Запрос.Текст =
""ВЫБРАТЬ РАЗЛИЧНЫЕ
|   Начисления.Регистратор
|ИЗ
|   РегистрРасчета.Начисления КАК Начисления"";

РезультатЗапроса = Запрос.Выполнить();
Выборка = РезультатЗапроса.Выбрать();

Набор = РегистрыРасчета.Начисления.СоздатьНаборЗаписей();

//удаляем записи по каждому регистратору
Пока Выборка.Следующий() Цикл
Набор.Отбор.Регистратор.Установить(Выборка.Регистратор);
Набор.Записать(Истина);
КонецЦикла;"}
},
{0,
{"Получаем данные графика",0,0,"","//выбираем норму и фактическое время работы
//для начисления оклада за май 2017 г.
Запрос = Новый Запрос;
Запрос.Текст =
""ВЫБРАТЬ
|   НачисленияДанныеГрафика.ЗначениеПериодДействия КАК Норма,
|   НачисленияДанныеГрафика.ЗначениеФактическийПериодДействия КАК Факт,
|   НачисленияДанныеГрафика.НомерСтроки КАК НомерСтроки,
|   НачисленияДанныеГрафика.Регистратор,
|   НачисленияДанныеГрафика.Сотрудник
|ИЗ
|   РегистрРасчета.Начисления.ДанныеГрафика(ВидРасчета = &ВидРасчета) КАК НачисленияДанныеГрафика
|ГДЕ
|   НачисленияДанныеГрафика.ПериодДействияНачало <= &Начало
|   И НачисленияДанныеГрафика.ПериодДействияКонец >= &Конец"";

Запрос.УстановитьПараметр(""ВидРасчета"", ПланыВидовРасчета.ОсновныеНачисления.Оклад);
Запрос.УстановитьПараметр(""Начало"", '20170501');
Запрос.УстановитьПараметр(""Конец"", '20170531');

Выборка = Запрос.Выполнить().Выбрать();

Набор = РегистрыРасчета.Начисления.СоздатьНаборЗаписей();
Пока Выборка.Следующий() Цикл
   //находим нужную строку регистра расчета
   Набор.Отбор.Регистратор.Установить(Выборка.Регистратор);
   Набор.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
  Набор.Прочитать();
Для Н = 0 по Набор.Количество() - 1 Цикл
   Если Набор[Н].НомерСтроки = Выборка.НомерСтроки Тогда
      Если Выборка.Норма = 0 Тогда
        Набор[Н].Результат = 0;
      Иначе
         //расчитываем оклад
         Набор[Н].Результат = (Набор[Н].ИсходныеДанные / Выборка.Норма) * Выборка.Факт;
      КонецЕсли;
   КонецЕсли;
КонецЦикла;

Набор.Записать(Истина);
КонецЦикла;"}
},
{0,
{"Получение базы для начислений",0,0,"","//выбираем базу для начисления премии
//за май 2017 г.
Запрос = Новый Запрос;
Запрос.Текст =
""ВЫБРАТЬ
|   НачисленияБазаНачисления.РезультатБаза КАК База,
|   НачисленияБазаНачисления.НомерСтроки КАК НомерСтроки,
|   НачисленияБазаНачисления.Регистратор,
|   НачисленияБазаНачисления.Сотрудник
|ИЗ
|   РегистрРасчета.Начисления.БазаНачисления(&Измерения, &Измерения, , 
|       ВидРасчета = &ВидРасчета) КАК НачисленияБазаНачисления
|ГДЕ
|   НачисленияБазаНачисления.ПериодДействияНачало <= &Начало
|   И НачисленияБазаНачисления.ПериодДействияКонец >= &Конец"";

Измер = Новый Массив(1);
Измер[0] = ""Сотрудник"";

Запрос.УстановитьПараметр(""Измерения"", Измер);
Запрос.УстановитьПараметр(""ВидРасчета"", ПланыВидовРасчета.ОсновныеНачисления.Премия);
Запрос.УстановитьПараметр(""Начало"", '20170501');
Запрос.УстановитьПараметр(""Конец"", '20170531');

Выборка = Запрос.Выполнить().Выбрать();

Набор = РегистрыРасчета.Начисления.СоздатьНаборЗаписей();
Пока Выборка.Следующий() Цикл
//находим нужную строку регистра расчета
Набор.Отбор.Регистратор.Установить(Выборка.Регистратор);
Набор.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
Набор.Прочитать();
Для Н = 0 по Набор.Количество() - 1 Цикл
Если Набор[Н].НомерСтроки = Выборка.НомерСтроки Тогда
//расчитываем премию
Набор[Н].Результат = Выборка.База * 0.1;
КонецЕсли;
КонецЦикла;

Набор.Записать(Истина);
КонецЦикла;"}
},
{0,
{"Получение записи по документу",0,0,"","Номер = ""000000001"";

//первый вариант
Документ = Документы.НачисленияСотрудникам.НайтиПоНомеру(Номер);

Набор = РегистрыРасчета.Начисления.СоздатьНаборЗаписей();
Набор.Отбор.Регистратор.Установить(Документ.Ссылка);
Набор.Прочитать();

Для н = 0 По Набор.Количество() - 1 Цикл
Сообщить("""" + Набор[н].Сотрудник + "" / "" +
Набор[н].ВидРасчета + "" : "" + Набор[н].Результат);
КонецЦикла;

//второй вариант
Объект = Документ.ПолучитьОбъект();
Набор = Объект.Движения.Начисления;
Набор.Прочитать();

Для н = 0 По Набор.Количество() - 1 Цикл
Сообщить("""" + Набор[н].Сотрудник + "" / "" +
Набор[н].ВидРасчета + "" : "" + Набор[н].Результат);
КонецЦикла;

//третий вариант
Запрос = Новый Запрос;
Запрос.Текст =
""ВЫБРАТЬ
|   Начисления.Сотрудник,
|   Начисления.ВидРасчета,
|   Начисления.Результат
|ИЗ
|   РегистрРасчета.Начисления КАК Начисления
|ГДЕ
|   Начисления.Регистратор = &Регистратор"";

Запрос.УстановитьПараметр(""Регистратор"", Документ);
Выборка = Запрос.Выполнить().Выбрать();

Пока Выборка.Следующий() Цикл
Сообщить("""" + Выборка.Сотрудник + "" / "" +
Выборка.ВидРасчета + "" : "" + Выборка.Результат);
КонецЦикла;
"}
},
{0,
{"Удаление записи",0,0,"","//Удаляем записи регистра Начисления по
//документу НачисленияСотрудникам №000000001
Документ = Документы.НачисленияСотрудникам.НайтиПоНомеру(""000000001"");

Набор = РегистрыРасчета.Начисления.СоздатьНаборЗаписей();
Набор.Отбор.Регистратор.Установить(Документ.Ссылка);
Набор.Прочитать();

Если Набор.Количество() > 0 Тогда
//Удаляем первую запись
Набор.Удалить(0);
//Удаляем все записи
Набор.Очистить();
КонецЕсли;

Набор.Записать(Истина);
"}
}
},
{12,
{"Регистры сведений",1,0,"",""},
{0,
{"Выбор записей за период",0,0,"","Запрос = Новый Запрос;
Запрос.Текст =
""ВЫБРАТЬ
|   Цены.Цена,
|   Цены.Номенклатура
|ИЗ
|   РегистрСведений.Цены КАК Цены
|ГДЕ
|   Цены.Период МЕЖДУ &СДаты И &ПоДату"";

Запрос.УстановитьПараметр(""СДаты"", '20170101');
Запрос.УстановитьПараметр(""ПоДату"", '20170331');

Выборка = Запрос.Выполнить().Выбрать();

Пока Выборка.Следующий() Цикл
Сообщить(Выборка.Номенклатура.Наименование +
"": "" + Выборка.Цена);
КонецЦикла;
"}
},
{0,
{"Выбор записи",0,0,"","Номенклатура = Справочники.Номенклатура.НайтиПоКоду(""000000007"");

Набор = РегистрыСведений.Цены.СоздатьНаборЗаписей();
//отбираем все записи по конкретной номенклатуре
Набор.Отбор.Номенклатура.Установить(Номенклатура);
//из них выбираем запись на определенный момент времени
Набор.Отбор.Период.Установить('20170101');
Набор.Прочитать();

Если Набор.Количество() > 0 Тогда
Сообщить(Набор[0].Цена);
КонецЕсли;"}
},
{0,
{"Выбор записи запросом",0,0,"","Номенклатура = Справочники.Номенклатура.НайтиПоКоду(""000000007"");

Запрос = Новый Запрос;
Запрос.Текст =
""ВЫБРАТЬ
|   Цены.Цена
|ИЗ
|   РегистрСведений.Цены КАК Цены
|ГДЕ
|   Цены.Номенклатура = &Номенклатура
|   И Цены.Период = &Период"";

Запрос.УстановитьПараметр(""Номенклатура"", Номенклатура);
Запрос.УстановитьПараметр(""Период"", '20170101');

Выгрузка = Запрос.Выполнить().Выгрузить();"}
},
{0,
{"Добавление записи",0,0,"","Номенклатура = Справочники.Номенклатура.НайтиПоКоду(""000000001"");

//первый способ
Запись = РегистрыСведений.Цены.СоздатьМенеджерЗаписи();
Запись.Период = '20160101';
Запись.Номенклатура = Номенклатура;
Запись.Цена = 100;
Запись.Записать(
Истина // замещать запись с такими же измерениями и периодом
);

//второй способ
Набор = РегистрыСведений.Цены.СоздатьНаборЗаписей();
Запись = Набор.Добавить();
Запись.Период = '20170101';
Запись.Номенклатура = Номенклатура;
Запись.Цена = 105;
Набор.Записать(
Ложь // не удаляем другие записи из регистра
);

Если Выгрузка.Количество() > 0 Тогда
Сообщить(Выгрузка[0].Цена);
КонецЕсли;"}
},
{8,
{"Дополнительные сведения",1,0,"",""},
{0,
{"Добавление записи",0,0,"","//Наименование дополнительного сведения
Наименование = ""Номер складского документа"";
//Находим вид дополнительного сведения
ДопСведение = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(
    Наименование);
//Объект, к которому относиться доп. сведение.
//Например документ или элемент справочника
Ссылка = Объект.Ссылка;

//создаем запись
Запись = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
Запись.Свойство = ДопСведение;
Запись.Объект = Ссылка;
Запись.Значение = ""1/2"";
//Сохраняем изменения
Запись.Записать(
    Истина //Замещаем существующую запись
);"}
},
{0,
{"Изменение значения",0,0,"","//Наименование дополнительного сведения
Наименование = ""Номер складского документа"";
//Находим вид дополнительного сведения
ДопСведение = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(
Наименование);
//Объект, к которому относиться доп. сведение
Ссылка = Объект.Ссылка;

//Находим строку доп. Сведения
Набор = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
Набор.Отбор.Свойство.Установить(ДопСведение);
Набор.Отбор.Объект.Установить(Ссылка);
Набор.Прочитать();

//Если строка доп. сведения найдена
Если Набор.Количество() > 0 Тогда
//Изменяем значение реквизита
Набор[0].Значение = ""4321"";

//подтверждаем изменения
Набор.Записать();
КонецЕсли;"}
},
{0,
{"Получение значения",0,0,"","//Наименование дополнительного сведения
Наименование = ""Номер складского документа"";
//Находим вид дополнительного сведения
ДопСведение = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(
Наименование);
//Объект, к которому относиться доп. сведение
Ссылка = Объект.Ссылка;

//Находим строку доп. сведения
Набор = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
Набор.Отбор.Свойство.Установить(ДопСведение);
Набор.Отбор.Объект.Установить(Ссылка);
Набор.Прочитать();

//Если строка доп. сведения найдена
Если Набор.Количество() > 0 Тогда
Сообщить(Набор[0].Значение);
КонецЕсли;"}
},
{0,
{"Получение значение запросом",0,0,"","//Наименование дополнительного сведения
Наименование = ""Номер складского документа"";
//Находим вид дополнительного сведения
Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(
    Наименование);
//Объект, к которому относиться доп. сведение
Ссылка = Объект.Ссылка;

 //Находим строку доп. Сведения
Запрос = Новый Запрос;
Запрос.Текст = ""ВЫБРАТЬ
    |   ДополнительныеСведения.Значение
    |ИЗ
    |   РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
    |ГДЕ
    |   ДополнительныеСведения.Объект = &Ссылка
    |   И ДополнительныеСведения.Свойство = &Свойство"";
Запрос.УстановитьПараметр(""Ссылка"", Ссылка);
Запрос.УстановитьПараметр(""Свойство"", Свойство);

Выбока = Запрос.Выполнить().Выбрать();

//Если строка доп. сведения найдена
Если Выбока.Количество() > 0 Тогда
    Выбока.Следующий();
    Результат = Выбока.Значение;
    Сообщить(Результат);
КонецЕсли;"}
},
{0,
{"Удаление записи",0,0,""," //Наименование дополнительного сведения
Наименование = ""Номер складского документа"";
//Находим вид дополнительного сведения
ДопСведение = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(
    Наименование);
//Объект, к которому относиться доп. сведение
Ссылка = Объект.Ссылка;

//Находим строку доп. Сведения
Набор = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
Набор.Отбор.Свойство.Установить(ДопСведение);
Набор.Отбор.Объект.Установить(Ссылка);
Набор.Прочитать();

//Если строка доп. сведения найдена
Если Набор.Количество() > 0 Тогда
    Сообщить(Набор[0].Значение);

    //Удаляем найденную строчку
    Набор.Очистить();
    //Подтверждаем изменения
    Набор.Записать();
КонецЕсли;
"}
},
{0,
{"Получить текущую цену из периодического регистра сведений Цены",0,0,"","// Пример: Получить текущую цену из периодического регистра сведений Цены
Элемент = Справочники.Номенклатура.НайтиПоКоду(4);
Отбор = Новый Структура(""Номенклатура"",Элемент);
ЗначенияРесурсов = РегистрыСведений.Цены.ПолучитьПоследнее(ТекущаяДата(), Отбор);"}
},
{0,
{"Открыть форму списка регистра сведений",0,0,"","// Пример: Открыть форму списка регистра сведений Цены
ИмяРегистра = ""Цены"";
Форма = РегистрыСведений[ИмяРегистра].ПолучитьФормуСписка();
Форма.Открыть();"}
},
{0,
{"Активизировать требуемую строку списка регистра сведений",0,0,"","// СоздатьКлючЗаписи()
 
// Пример: Активизировать требуемую строку списка регистра сведений
СтруктураКлючевыхПолей = Новый Структура;
СтруктураКлючевыхПолей.Вставить(""Период"", Дата(""20040331000000""));
СтруктураКлючевыхПолей.Вставить(""Номенклатура"", Справочники.Номенклатура.НайтиПоКоду(""0000006""));
ЭлементыФормы.ТабличноеПоле1.ТекущаяСтрока = РегистрыСведений.Цены.СоздатьКлючЗаписи(СтруктураКлючевыхПолей);"}
}
},
{0,
{"Заполнение в обработке проведения",0,0,""," //модуль документа
Процедура ОбработкаПроведения(Отказ, Режим)

Движения.Цены.Записывать = Истина;

Для Каждого ТекСтрокаЦены Из Цены Цикл
Движение = Движения.Цены.Добавить();
Движение.Период = Дата;
Движение.Номенклатура = ТекСтрокаЦены.Номенклатура;
Движение.Цена = ТекСтрокаЦены.Цена;
КонецЦикла;

КонецПроцедуры
"}
},
{0,
{"Изменение записи",0,0,"","Номенклатура = Справочники.Номенклатура.НайтиПоКоду(""000000007"");

Набор = РегистрыСведений.Цены.СоздатьНаборЗаписей( );
//Отбираем все записи по конкретной номенклатуре.
//Отбор по измерениям работает только для 
//независивых регистров сведений.
Набор.Отбор.Номенклатура.Установить(Номенклатура);
Набор.Прочитать();

Количество = Набор.Количество();
Если Количество > 0 Тогда
//увеличиваем последнюю цену на 10%
Набор[Количество - 1].Цена = Набор[Количество - 1].Цена * 1.1;

Сообщить(Набор[Количество - 1].Цена);
КонецЕсли;

Набор.Записать(Истина);"}
},
{0,
{"Очистка всего регистра",0,0,"","Набор = РегистрыСведений.Цены.СоздатьНаборЗаписей();
Набор.Записать(Истина);

Получить записи регистратора

Регистратор = Документы.ЦеныНаУслуги.НайтиПоНомеру(""000000001"");

//получить записи регистра Цена
//добавленные документом ЦеныНаУслуги № ""000000001""
Запрос = Новый Запрос;
Запрос.Текст =
""ВЫБРАТЬ
|   Цена,
|   Номенклатура.Наименование КАК Наименование
|ИЗ
|   РегистрСведений.Цены
|ГДЕ
|   Регистратор = &Регистратор"";

Запрос.УстановитьПараметр(""Регистратор"", Регистратор);

Выборка = Запрос.Выполнить().Выбрать();

Пока Выборка.Следующий() Цикл
Сообщить(Выборка.Наименование +
"": "" + Выборка.Цена);
КонецЦикла;
"}
},
{0,
{"Получить первые записи",0,0,"","Номенклатура = Справочники.Номенклатура.НайтиПоКоду(""000000007"");

//получить первую цену по заданной номенклатуре
//начиная с 01.01.2016 г. (включительно)
Запрос = Новый Запрос;
Запрос.Текст =
""ВЫБРАТЬ
|   ЦеныСрезПервых.Цена
|ИЗ
|   РегистрСведений.Цены.СрезПервых(
|       &СДаты,
|       Номенклатура = &Номенклатура
|   ) КАК ЦеныСрезПервых"";

Запрос.УстановитьПараметр(""СДаты"", '20160101');
Запрос.УстановитьПараметр(""Номенклатура"", Номенклатура);

Выборка = Запрос.Выполнить().Выбрать();

Если Выборка.Следующий() Тогда
Сообщить(Выборка.Цена);
КонецЕсли;

"}
},
{0,
{"Получить последние записи",0,0,"","Номенклатура = Справочники.Номенклатура.НайтиПоКоду(""000000007"");

//получить последнюю цену по заданной номенклатуре
//назначенную до 31.03.2017 г. (включительно)
Запрос = Новый Запрос;
Запрос.Текст =
""ВЫБРАТЬ
|   ЦеныСрезПоследних.Цена
|ИЗ
|   РегистрСведений.Цены.СрезПоследних(
|       &ПоДату,
|       Номенклатура = &Номенклатура
|   ) КАК ЦеныСрезПоследних"";

Запрос.УстановитьПараметр(""ПоДату"", '20170331');
Запрос.УстановитьПараметр(""Номенклатура"", Номенклатура);

Выборка = Запрос.Выполнить().Выбрать();

Если Выборка.Следующий() Тогда
Сообщить(Выборка.Цена);
КонецЕсли;"}
},
{0,
{"Удаление записи",0,0,""," Номенклатура = Справочники.Номенклатура.НайтиПоКоду(""000000007"");

Набор = РегистрыСведений.Цены.СоздатьНаборЗаписей();
//отбираем все записи по конкретной номенклатуре
Набор.Отбор.Номенклатура.Установить(Номенклатура);
Набор.Прочитать();

//удаляем первую запись
Если Набор.Количество() > 0 Тогда
Набор.Удалить(0);
КонецЕсли;
//Удаляем все записи соответствующие отбору
//Если отбор не задан, то удалятся все записи регистра
Набор.Очистить();

//подтверждаем изменения
Набор.Записать(Истина);"}
},
{0,
{"Примеры использования объектов ",0,0,"","1.  // Глобальный контекст
  // РегистрыСведений
// Пример: получить текущую цену из периодического регистра сведений ""Цены"".
Элемент = Справочники.Номенклатура.НайтиПоКоду(4);
Отбор = Новый Структура(""Номенклатура"", Элемент);
ЗначенияРесурсов = РегистрыСведений.Цены.ПолучитьПоследнее(ТекущаяДата(), Отбор);
Цена = ЗначенияРесурсов.Цена;
2.  // объект РегистрыСведенийМенеджер
   // .<имя регистра сведений>
  // [<имя регистра сведений>]
  // Для Каждого … Из … Цикл … КонецЦикла;
// Пример: Получить начальную цену из периодического регистра сведений Цены.
ИмяРегистра = ""Цены"";
Услуга = Справочники.Номенклатура.НайтиПоНаименованию(""Диагностика"");
Отбор = Новый Структура;
Отбор.Вставить(""Номенклатура"", Услуга );
Цена = РегистрыСведений[ИмяРегистра].ПолучитьПервое(ТекущаяДата(), Отбор).Цена;
3.  // объект РегистрСведенийМенеджер.<имя>
   // СоздатьКлючЗаписи()
// Пример: активизировать требуемую строку списка регистра сведений.
СтруктураКлючевыхПолей = Новый Структура;
СтруктураКлючевыхПолей.Вставить(""Период"", Дата(""20040331000000""));
СтруктураКлючевыхПолей.Вставить(""Номенклатура""
        , Справочники.Номенклатура.НайтиПоКоду(""0000006""));
Элементы.Материалы.ТекущаяСтрока = РегистрыСведений.Цены.СоздатьКлючЗаписи(
        СтруктураКлючевыхПолей);
4.  // объект РегистрСведенийМенеджер.<имя>
  // СоздатьНаборЗаписей()
// Пример: показать номенклатуру, цена на которую была установлена в заданную дату и время.
Набор = РегистрыСведений.Цены.СоздатьНаборЗаписей();
Набор.Отбор.Период.Установить(ЗаданнаяДата, Истина);
Набор.Прочитать();
Для Каждого ОчереднаяЗапись Из Набор Цикл
  Сообщить(""Номенклатура = ""+ ОчереднаяЗапись.Номенклатура +"", цена = 
                ""+ ОчереднаяЗапись.Цена);
КонецЦикла;
5.  // объект РегистрСведенийМенеджер.<имя>
  // СоздатьМенеджерЗаписи()
// Пример: добавить новое значение цены в регистр ""Цены"".
Запись = РегистрыСведений.Цены.СоздатьМенеджерЗаписи();
Запись.Период = ТекущаяДата();
Запись.Номенклатура = Справочники.Номенклатура.НайтиПоКоду(""0000005"");
Запись.Цена = 568;
Запись.Записать();
6.  // объект РегистрСведенийНаборЗаписей.<имя>
  // [<индекс элемента коллекции>]
  // Для Каждого … Из … Цикл … КонецЦикла;
// Пример: показать номенклатуру, цена на которую была установлена в заданную дату и время.
Набор = РегистрыСведений.Цены.СоздатьНаборЗаписей();
Набор.Отбор.Период.Установить(ЗаданнаяДата, Истина);
Набор.Прочитать();
Для Каждого ОчереднаяЗапись Из Набор Цикл
  Сообщить(""Номенклатура = ""+ ОчереднаяЗапись.Номенклатура + "", цена = 
            "" + ОчереднаяЗапись.Цена);
КонецЦикла;
7.  // объект РегистрСведенийВыборка.<имя>
   // ПолучитьМенеджерЗаписи()
// Пример: удалить все записи регистра сведений за текущий месяц.
Выборка = РегистрыСведений.Цены.Выбрать(НачалоМесяца(ТекущаяДата())
              , КонецМесяца(ТекущаяДата()));
Пока Выборка.Следующий() цикл Выборка.
  ПолучитьМенеджерЗаписи().Удалить();
КонецЦикла;
8.  // объект РегистрСведенийМенеджер.<имя>
  // Выбрать()
  // ВыбратьПоРегистратору()
// Пример: показать изменение цен на элемент номенклатуры в течение года.
Отбор = Новый Структура(""Номенклатура"", Справочники.Номенклатура
            .НайтиПоКоду(""0000005""));
Выборка = РегистрыСведений.Цены.Выбрать(НачалоГода(ТекущаяДата()), ТекущаяДата(), Отбор);
Пока Выборка.Следующий() цикл 
  Сообщить(""Дата = "" + Выборка.Период + "", цена = "" + Выборка.Цена);
КонецЦикла;
"}
}
},
{16,
{"Справочники",1,0,"",""},
{0,
{"добавление элемента",0,0,"","Сотр = Справочники.Сотрудники.СоздатьЭлемент();
Сотр.Наименование = ""Некрасов Н.А."";
Сотр.Должность = ""писатель"";
Сотр.Записать();"}
},
{0,
{"Изменение элемента",0,0,"","Спр = Справочники.Сотрудники;

//поиск по коду
Сотр = Спр.НайтиПоКоду(""000000001"");
//Если элемент найден
Если (Сотр <> Спр.ПустаяСсылка()) Тогда
//Получаем объект для изменения и 
//меняем наименование
Объект = Сотр.ПолучитьОбъект(); 
Объект.Наименование = ""Иванов И.И."";
Объект.Записать();
КонецЕсли;
"}
},
{0,
{"Использование транзакции",0,0,"","Спр = Справочники.Сотрудники;
Матросы = Спр.НайтиПоНаименованию(""Матросы"");

Запрос = Новый Запрос;
Запрос.Текст =
""ВЫБРАТЬ
|   Сотрудники.Ссылка
|ИЗ
|   Справочник.Сотрудники КАК Сотрудники
|ГДЕ
|   Сотрудники.Должность ПОДОБНО &Должность"";

Запрос.УстановитьПараметр(""Должность"", ""%Матрос%"");
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

//перенос всех матросов в папку ""Матросы""
//в случае любой ошибки, изменения 
//по всем элементам будут отменены
НачатьТранзакцию();
Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
Объект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
Объект.Родитель = Матросы.Ссылка;
Объект.Записать();
КонецЦикла;
ЗафиксироватьТранзакцию();
"}
},
{0,
{"Контекстный поиск элемента",0,0,""," Запрос = Новый Запрос;
Запрос.Текст =
""ВЫБРАТЬ
|   Сотрудники.Ссылка
|ИЗ
|   Справочник.Сотрудники КАК Сотрудники
|ГДЕ
|   Сотрудники.Должность ПОДОБНО &Должность"";

Запрос.УстановитьПараметр(""Должность"", ""%Матрос%"");

РезультатЗапроса = Запрос.Выполнить();

ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
Сообщить(ВыборкаДетальныеЗаписи.Ссылка);
КонецЦикла;"}
},
{0,
{"перебор подчинённых",0,0,"","//Спр. Документы подчинен спр. Сотрудники
Спр = Справочники.Сотрудники;
Сотр = Спр.НайтиПоНаименованию(""Миронов"");
Выборка = Справочники.Документы.Выбрать( , Сотр);
Пока Выборка.Следующий() Цикл
Сообщить(Выборка.Наименование);
КонецЦикла;"}
},
{0,
{"Перебор элементов группы",0,0,"","Спр = Справочники.Сотрудники;
Писатели = Спр.НайтиПоНаименованию(""Писатели"");
Выборка = Спр.Выбрать(Писатели);
Пока Выборка.Следующий() Цикл
Сообщить(Выборка.Наименование);
КонецЦикла;"}
},
{0,
{"Перебор элементов",0,0,"","Элементы = Справочники.Сотрудники.Выбрать();
Пока Элементы.Следующий() Цикл
Сообщить(Элементы.Наименование);
КонецЦикла;
"}
},
{0,
{"Перенести элементов в группу",0,0,"","Спр = Справочники.Сотрудники;

Сотр = Спр.НайтиПоНаименованию(""Некрасов"");
Группа = Спр.НайтиПоНаименованию(""Писатели"");

Если (Сотр <> Спр.ПустаяСсылка()) И Группа.ЭтоГруппа Тогда
Объект = Сотр.ПолучитьОбъект();
Объект.Родитель = Группа.Ссылка;
Объект.Записать();
КонецЕсли;"}
},
{0,
{"Поиск элементов",0,0,"","Спр = Справочники.Сотрудники; 

//поиск по наименованию
Сотр = Спр.НайтиПоНаименованию(""Некрасов"");
Если (Не Сотр.Пустая()) Тогда
//Получаем объект для изменения и 
//меняем наименование
Объект = Сотр.ПолучитьОбъект(); 
Объект.Наименование = ""Некрасов Николай Александрович"";
Объект.Записать();
Сообщить(Сотр.Наименование);
КонецЕсли;

//поиск по коду
Сотр = Спр.НайтиПоКоду(""000000001"");
//Если элемент найден
Если (Сотр <> Спр.ПустаяСсылка()) Тогда
Сообщить(Сотр.Наименование);
КонецЕсли;

//поиск по реквизиту
Сотр = Спр.НайтиПоРеквизиту(""Должность"", ""писатель"");
Если (Не Сотр.Пустая()) Тогда
Сообщить(Сотр.Наименование);
КонецЕсли;"}
},
{0,
{"Предопределенные элементы",0,0,"","//""Основной"" склад задан в конфигурации
//на форме предопределенных элементов
//справочника ""Склады""
ОсновнойСклад = Справочники.Склады.Основной;
Сообщить(ОсновнойСклад);"}
},
{0,
{"Создание группы",0,0,"","Сотр = Справочники.Сотрудники.СоздатьГруппу();
Сотр.Наименование = ""Дизайнеры"";
Сотр.Записать();
"}
},
{5,
{"Табличная часть",1,0,"",""},
{0,
{"Добовление строки",0,0,"","Спр = Справочники.Сотрудники;
Сотр = Спр.НайтиПоКоду(""000000001"");

Если (Сотр <> Спр.ПустаяСсылка()) Тогда
//Получаем объект для редактирования
Объект = Сотр.ПолучитьОбъект();

//Заполняем табличную часть
ТД = Объект.ТрудоваяДеятельность.Добавить();
ТД.Организация = ""1С"";
ТД.НачалоРаботы = ""20190101"";
ТД.Должность = ""Аналитик"";

//Записываем изменения
Объект.Записать();
КонецЕсли;"}
},
{0,
{"Перебор строк",0,0,""," Спр = Справочники.Сотрудники;
//Находим нужного сотрудника
Сотр = Спр.НайтиПоКоду(""000000001"");

//Перебираем строки табличной части
Для Каждого Строка Из Сотр.ТрудоваяДеятельность Цикл
Сообщить(Строка.Организация);
КонецЦикла;"}
},
{0,
{"Поиск строки",0,0,"","Спр = Справочники.Сотрудники;
//Находим нужного сотрудника
Сотр = Спр.НайтиПоКоду(""000000001"");

Если (Сотр <> Спр.ПустаяСсылка()) Тогда
//Поиск строки в текстом ""1С"" в поле ""Организация""
ТД = Сотр.ТрудоваяДеятельность.Найти(""1С"", ""Организация"");
//Если нашли, то выводим НачалоРаботы
Если ЗначениеЗаполнено(ТД) Тогда
Сообщить(ТД.НачалоРаботы);
КонецЕсли;
КонецЕсли;"}
},
{0,
{"Удаление всех строк",0,0,"","Спр = Справочники.Сотрудники;
//Находим нужного сотрудника
Сотр = Спр.НайтиПоКоду(""000000001"");
//Получаем объект для редактирования
Объект = Сотр.ПолучитьОбъект();
//Очищаем табличную часть
Объект.ТрудоваяДеятельность.Очистить(); 
//Записываем изменения
Объект.Записать();"}
},
{0,
{"Удаление строки",0,0,""," Спр = Справочники.Сотрудники;
//Находим нужного сотрудника
Сотр = Спр.НайтиПоКоду(""000000001"");

Если (Сотр <> Спр.ПустаяСсылка()) Тогда
//Получаем объект для редактирования
Объект = Сотр.ПолучитьОбъект();

//Поиск строки в текстом ""1С"" в поле ""Организация""
ТД = Объект.ТрудоваяДеятельность.Найти(""1С"", ""Организация"");
Если ЗначениеЗаполнено(ТД) Тогда
//Если нашли, то удаляем
Объект.ТрудоваяДеятельность.Удалить(ТД);

//Записываем изменения
Объект.Записать();
КонецЕсли;
КонецЕсли;
"}
}
},
{0,
{"Удаление группы",0,0,"","Спр = Справочники.Сотрудники;
Группа = Спр.НайтиПоНаименованию(""Писатели"");

//пометить на удаление
Если (Группа <> Спр.ПустаяСсылка()) Тогда
//Группа помечается на удаление
Группа.ПолучитьОбъект().УстановитьПометкуУдаления(Истина, Ложь);

//Группа и вложенные в нее элементы помечаются на удаление
Группа.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
КонецЕсли;

//удалить
Если (Группа <> Спр.ПустаяСсылка()) Тогда
//Группа и вложенные в нее элементы полнстью удаляются      
//из БД без проверки ссылочной целостности
Группа.ПолучитьОбъект().Удалить();
КонецЕсли;"}
},
{0,
{"Удаление элемента",0,0,"","Спр = Справочники.Сотрудники;
Сотр = Спр.НайтиПоКоду(""000000003"");

Если (Сотр <> Спр.ПустаяСсылка()) Тогда
//Объект помечается на удаление
Сотр.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);

//Объект полностью удаляется из БД
//без проверки ссылочной целостности
Сотр.ПолучитьОбъект().Удалить();
КонецЕсли;"}
},
{0,
{"Обратится к процедуре в модуле справочника",0,0,"","// размещается в модуле справочника
Процедура Проверка() Экспорт
//  текст процедуры
КонецПроцедуры;
//Вызов процедуры как метода объекта «Справочник»
Клиент = Справочники.Клиенты.НайтиПоКоду(1).ПолучитьОбъект();
Клиент.Проверка();
"}
},
{0,
{"Примеры использования объектов ",0,0,"","1.  // Глобальный контекст
  // Справочники
// Пример: вывести все типы ссылок на элементы справочников, существующие в конфигурации.
Массив = Справочники.ТипВсеСсылки().Типы();
Для Каждого ОчереднойТип из Массив Цикл
  Сообщить(ОчереднойТип);
КонецЦикла;   

2.  // объект СправочникиМенеджер
  // .<имя справочника>
  // [<имя справочника>]
  // Для Каждого … Из … Цикл … КонецЦикла;
// Пример: создать новую группу справочника ""Номенклатура"".
НоваяГруппа = Справочники.Номенклатура.СоздатьГруппу();
НоваяГруппа.Наименование = ""Моя новая группа"";
НоваяГруппа.Записать();
// Пример: получить ссылку на справочник ""Номенклатура"".
Справочники[""Номенклатура""].ПолучитьСсылку();

3.   // объект СправочникМенеджер.<Имя справочника>
  // НайтиПоКоду()
  // НайтиПоНаименованию()
  // НайтиПоРеквизиту()
  // ПустаяСсылка()
  // ПолучитьСсылку()
  // .<имя предопределенного элемента справочника>
// Пример: проверить, помечен ли на удаление элемент справочника ""Номенклатура"" с кодом 13.
Если Справочники.Номенклатура.НайтиПоКоду(13).ПометкаУдаления Тогда
  Сообщить(""Элемент с кодом 13 помечен на удаление"");
КонецЕсли;
// Пример: является ли элемент справочника ""Номенклатура"" с наименованием ""Услуги"" группой.
Если Справочники.Номенклатура.НайтиПоНаименованию(""Услуги"", Истина).ЭтоГруппа Тогда
  Сообщить(""Элемент Услуги является группой"");
КонецЕсли;
// Пример: проверить, что для всех элементов задан вид номенклатуры.
ПустаяСсылкаПеречисления = Перечисления.ВидыНоменклатуры.ПустаяСсылка();
Если Не Справочники.Номенклатура.НайтиПоРеквизиту(
        ""ВидНоменклатуры"", ПустаяСсылкаПеречисления).Пустая() Тогда 
  Сообщить(""Есть элементы, для которых не задан вид номенклатуры"");
КонецЕсли;
// Пример: передать пустую ссылку в параметр метода.
Выборка = Справочники.Номенклатура.Выбрать(Справочники.Номенклатура.ПустаяСсылка());

4.  // объект СправочникМенеджер.<Имя справочника>
  // Выбрать()
  // ВыбратьИерархически()
// Пример: вывести список элементов, расположенных в корне справочника.
Выборка = Справочники.Номенклатура.Выбрать(Справочники.Номенклатура.ПустаяСсылка());
Пока Выборка.Следующий() Цикл 
  Если Не Выборка.ЭтоГруппа тогда Сообщить(Выборка);
  КонецЕсли;
КонецЦикла;
// Пример: удалить все элементы иерархического справочника.
Выборка = Справочники.Номенклатура.ВыбратьИерархически();
Пока Выборка.Следующий() Цикл 
  Выборка.Удалить();
КонецЦикла;

5.  // объект СправочникМенеджер.<Имя справочника>
  // СоздатьГруппу()
  // СоздатьЭлемент()
// Пример: создать новый элемент справочника ""Сотрудники"".
НовыйЭлемент = Справочники.Сотрудники.СоздатьЭлемент();
НовыйЭлемент.Наименование = ""Смирнов Андрей Анатольевич"";
// Заполнить табличную часть ""ТрудоваяДеятельность"".
НоваяСтрокаТабличнойЧасти = НовыйЭлемент.ТрудоваяДеятельность.Добавить();
НоваяСтрокаТабличнойЧасти.Организация = ""ООО НТЦ"";
НоваяСтрокаТабличнойЧасти.НачалоРаботы = Дата(2013,02,01);
НоваяСтрокаТабличнойЧасти.ОкончаниеРаботы = Дата(2013,08,31);
НоваяСтрокаТабличнойЧасти.Должность = ""Программист"";
НовыйЭлемент.Записать();

6.  // объект СправочникОбъект.<Имя справочника>, СправочникСсылка.<Имя справочника>
  // Владелец
  // Родитель
  // Ссылка
// Пример: запретить изменение подчиненных элементов, если у
// владельца установлено соответствующее свойство
// ""ИзмененияЗапрещены"" в модуле формы элемента справочника.
Процедура ПередЗаписью(Отказ)
  Если Владелец.ИзмененияЗапрещены Тогда Отказ = Истина; 
  КонецЕсли;
КонецПроцедуры

7.  // объект СправочникСсылка.<Имя справочника>
  // ПолучитьОбъект()
  // СправочникОбъект.<Имя справочника>
  // Скопировать()
// Пример: изменить наименование элемента справочника.
Элемент = Справочники.Номенклатура.НайтиПоКоду(10).ПолучитьОбъект();
Элемент.Наименование = ""Мое новое наименование"";
Элемент.Записать();
// Пример: заполнить справочник тестовыми данными.
Элемент = Справочники.Номенклатура.СоздатьЭлемент();
Элемент.Наименование = ""Тестовый элемент"";
Элемент.Записать();
Для ш = 1 по 1000 Цикл 
  НовыйЭлемент = Элемент.Скопировать();
  НовыйЭлемент.Записать();
КонецЦикла;

8.  // объект СправочникВыборка.<Имя справочника>
  // Ссылка
 
// Пример: заполнить табличную часть документа
// ""ПриходнаяНакладная"" всеми элементами из указанной группы справочника ""Номенклатура"".
Выборка = Справочники.Номенклатура.ВыбратьИерархически(ПолеВвода1);
Пока Выборка.Следующий() Цикл 
  СсылкаНаНоменклатуру = Выборка.Ссылка;
  Если СсылкаНаНоменклатуру.ЭтоГруппа Тогда Продолжить; 
  КонецЕсли;
  НоваяСтрока = Материалы.Добавить();
  НоваяСтрока.Материал = СсылкаНаНоменклатуру;
КонецЦикла;

9.  // объект СправочникВыборка.<Имя справочника>
  // ПолучитьОбъект() 
// Пример: пометить все элементы неиерархического справочника на удаление.
Выборка = Справочники.Клиенты.Выбрать();
Пока Выборка.Следующий() Цикл 
  Выборка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
КонецЦикла;
"}
}
},
{1,
{"Информация",1,0,"",""},
{0,
{"ЗаполнитьЗначенияСвойств(КудаКопировать, ОткудаКопировать)",0,0,"","//Для использования процедуры ЗаполнитьЗначенияСвойств(КудаКопировать, ОткудаКопировать) в 1С необходимо выполнить следующие условия:

//1. Оба параметра КудаКопировать и ОткудаКопировать должны быть ссылками на объекты, у которых совпадают типы и имена свойств.
//2. Оба объекта должны быть открытыми для записи.
//3. Объект КудаКопировать должен быть создан и инициализирован.
//4. Объект ОткудаКопировать должен быть создан и содержать значения свойств, которые будут скопированы в объект КудаКопировать.

//Пример использования:

//```1C
Перем КудаКопировать, ОткудаКопировать;
КудаКопировать = Новый Объект(""Справочник.НовыйСправочник"");
ОткудаКопировать = Справочники.СуществующийСправочник.НайтиПоКоду(""123"");

ЗаполнитьЗначенияСвойств(КудаКопировать, ОткудаКопировать);
```

//В данном примере происходит копирование значений свойств объекта ОткудаКопировать в объект КудаКопировать."}
}
},
{0,
{"Уникальный идентификатор (GUID)",0,0,"","СправочникСсылка = Справочники.ИмяСправочника.НайтиПоНаименованию(""Наименование"");
GUID = СправочникСсылка.УникальныйИдентификатор();

//Любой элемент справочника или документ хранится в базе данных. 
//Для идентификации он имеет уникальный «номер» в рамках базы 
//данных - GUID. В понятиях встроенного языка 1С, этот GUID это ссылка.

//GUID назначается в момент первой записи объекта. Уже до записи 
//можно узнать GUID, который будет назначен объекту при записи

СправочникОбъект = Справочники.ИмяСправочника.СоздатьЭлемент();
GUID = СправочникОбъект.ПолучитьСсылкуНового().УникальныйИдентификатор();

//Также перед записью можно назначить свой GUID. Это бывает 
//полезным, например, при обмене данными:
GUID = ""Нужный нам GUID""; //строка GUID обычно выглядит 6F9619FF-8B86-D011-B42D-00CF4FC964FF
СправочникОбъект = Справочники.ИмяСправочника.СоздатьЭлемент();
СправочникОбъект.УстановитьСсылкуНового(Справочники.ИмяСправочника.ПолучитьСсылку(Новый УникальныйИдентификатор(GUID)));
"}
}
},
{3,
{"Оповещения",1,0,"",""},
{0,
{"Оповещение объекта(Передача параметра)",0,0,"","//Модуль формы
//Событие ""ПриИзменении"" поля ""Покупатель""
&НаКлиенте
Процедура ПокупательПриИзменении(Элемент)
    //Отправляем оповещение о событии
    Оповестить(""ИзменилиПокупателя"", Объект.Покупатель);
КонецПроцедуры
//Обработка оповещения формы
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
    Если ИмяСобытия = ""ИзменилиПокупателя"" Тогда
        Сообщить(""Текущий покупатель: "" + Параметр);
    КонецЕсли;
КонецПроцедуры"}
},
{0,
{"Оповещение пользователя",0,0,"","ПоказатьОповещениеПользователя(""Простое оповещение пользователя!"");"}
},
{0,
{"Оповещение со ссылкой",0,0,"","Оповещение со ссылкой
//Событие ""ПриОткрытии"" формы документа
&НаКлиенте
Процедура ПриОткрытии(Отказ)
    //Если документ за предыдущие года
    Если Год(ТекущаяДата()) > Год(Объект.Дата) Тогда
        //Получаем ссылку на документ
        НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Объект.Ссылка);
        //Оповещаем пользователя о запрете редактирования
        ПоказатьОповещениеПользователя(""Разрешен только просмотр!"",
            НавигационнаяСсылка,
            ""Документ №"" + Объект.Номер + "" от "" + Объект.Дата);
    КонецЕсли;
КонецПроцедуры"}
}
},
{5,
{"ФункциональныеОпции",1,0,"",""},
{0,
{"Обновить Интерфейс",0,0,"","//При изменении значений ФО в константах, результат можно увидеть сразу же в текущем сеансе,
//после выполнения следующей команды
ОбновитьИнтерфейс();
"}
},
{0,
{"Получение значения",0,0,"","ПолучитьФункциональнуюОпцию(<Имя ФО>);"}
},
{0,
{"Установить параметры реквизит справочника",0,0,"","Процедура ПриСозданииНаСервере()  
	// Модуль формы Контрагент 
	//Пример управления видимостью команды «Договоры» в форме элемента справочника «Контрагенты»:
	
	//Необходимо создать ФО с местом хранения – реквизит справочника «Контрагенты.ИспользоватьДоговоры». 
	//В состав ФО включить справочник «Договоры». Также, необходимо создать параметр ФО «Контрагент» и установить 
	//для свойства «Использование» - справочник Контрагенты
	
	// нужно присваивать значению параметра ФО ссылку на текущий объект
     УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура(""Контрагент"", Ссылка));  
	 
	 //Недостатком данного решения, является необходимость записи контрагента для управления 
	 //видимостью команды «Договоры». Для решения этой проблемы, можно использовать
	 //для хранения значений функциональных опций отдельный справочник. В таком варианте, при изменении 
	 //управляющего реквизита нет необходимости перезаписывать данные текущего справочника,
	 //и результат будет виден непосредственно после изменения. Дополнительным преимуществом такого варианта, будет использование одного параметра ФО «НастройкаФормы» для управления видимостью команд навигации произвольного количества объектов.
	 //Свойство параметра ФО «Использование», 
	 //в данном случае, должно указывать на справочник с настройками 
	 
 КонецПроцедуры
 
 Процедура ПриСозданииНаСервере() 
    // Модуль формы НастройкиФормы
	Запрос = Новый Запрос;
    Запрос.Текст = ""ВЫБРАТЬ
                        |          ПараметрыФО.Ссылка
                        |ИЗ
                        |          Справочник. ПараметрыФО КАК ПараметрыФО
                        |ГДЕ
                        |          ПараметрыФО. ИспользоватьДоговоры = & ИспользоватьДоговоры "";
    Запрос.УстановитьПараметр(""ИспользоватьДоговоры "", Объект. ИспользоватьДоговоры);

    РезультатЗапроса = Запрос.Выполнить();
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

    Если ВыборкаДетальныеЗаписи.Следующий() Тогда
       ЭлементНастройки = ВыборкаДетальныеЗаписи.Ссылка;
    Иначе
       НовыйЭлементНастройки = Справочники. ПараметрыФО.СоздатьЭлемент();
       НовыйЭлементНастройки. ИспользоватьДоговоры = Объект. ИспользоватьДоговоры;
       НовыйЭлементНастройки.Записать();
       ЭлементНастройки = НовыйЭлементНастройки.Ссылка;                
    КонецЕсли;  

    УстановитьПараметрыФункциональныхОпцийФормы Новый Структура(""НастройкаФормы"", ЭлементНастройки));
 КонецПроцедуры
	 "}
},
{0,
{"Установить параметры ресурс регистра сведений",0,0,"","//Применение данного варианта параметризуемых ФО похоже на вариант с местом хранения – реквизит справочника. 
//Отличием можно считать возможность использования нескольких параметров для отбора значения ФО.
//А также использование системного параметра ФО «Период» для отбора значения по дате в том случае, если для 
//хранения значений ФО используется периодический регистр сведений:
//Каждое измерение регистра сведений – это отдельный параметр ФО, 
//который необходимо установить в форме. Дополнительно, можно установить параметр «Период», 
//если требуется получить значение на определенную дату.

//Данный функционал удобно использовать в формах документов, для управления видимостью элементов
//в зависимости от даты. Например, настроить видимость реквизитов или команд панели навигации в 
//зависимости от данных учетной политики, действующей на дату документа 

ПараметрыФО = Новый Структура;
ПараметрыФО.Вставить(""Период"", Объект.Дата);
ПараметрыФО.Вставить(""Организация"", Объект.Организация);
ПараметрыФО.Вставить(""Склад"", Объект.Склад);
УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);  

//Также, можно настроить опционально (в зависимости от даты документа)
//выполнение каких либо произвольных действий. Например дополнительные отборы при
//выборе значений реквизитов. Для этого нужно будет обращаться к значению ФО напрямую:

Если ПолучитьФукнциональнуюОпциюФормы(«ИспользоватьДополнительныйОтбор») Тогда
   //...
КонецЕсли;  

//существует возможность получения значений параметризуемой ФО вне контекста 
//определенной формы, в любом месте программного кода:

ПараметрыФО = Новый Структура;
ПараметрыФО.Вставить(""Период"", Объект.Дата);
ПараметрыФО.Вставить(""Организация"", Объект.Организация);
ПараметрыФО.Вставить(""Склад"", Объект.Склад);
ПолучитьФункциональнуюОпцию(""ИспользоватьДополнительныйОтбор "", ПараметрыФО);   
//В качестве второго параметра, в данном случае, передается структура со значениями параметров ФО

"}
},
{0,
{"Настройка интерфейса",0,0,""," // можно управлять видимостью интерфейса в зависимости от текущего пользователя системы,
 //или в зависимости от любого другого выбранного параметра (организации, склада, подразделения).

//Допустим, в зависимости от организации, которая выбрана для пользователя основной, необходимо
//показывать в интерфейсе дополнительные команды. Для решения такой задачи, нужно добавить в справочник
//«Организации» новый реквизит «ВыводитьДопКоманды» с типом «булево». Создать новую ФО, указав в качестве
//места хранения созданный реквизит. В качестве состава ФО, выбрать необходимые команды или объекты (если нужно выводить стандартные команды).
//Создать новый параметр ФО с указанием в свойстве «Использование» - справочник Организации.  Далее, необходимо при запуске системы, в модуле 
//управляемого приложения, определять организацию, которая выбрана для текущего пользователя основной, и устанавливать параметр функциональных опций интерфейса:

ПараметрыФОИнтерфейса = Новый Структура;
ПараметрыФОИнтерфейса.Вставить(""Организация"",  ОсновнаяОрганизацияПользователя);
УстановитьПараметрыФункциональныхОпцийИнтерфейса(ПараметрыФОИнтерфейса);

//можно получить значение параметра ФО, который задан для текущего сеанса
ПараметрФООрганизация = ПолучитьПараметрыФункциональныхОпцийИнтерфейса().Организация;

//параметры, установленные для интерфейса, по умолчанию передаются в управляемую форму"}
}
},
{7,
{"БСП",1,0,"",""},
{0,
{"Печать в Word из 1С(Пример)",0,0,"","// Шаг 1: Создать макет печатной формы  

//Макет – обычный офисный документ,
//в которым специальным образом
//выделены области и параметры.
//Может быть создан в программах:
//• Microsoft Word
//• OpenOffice.org Writer
//• Google Docs   

//Типы областей в макете

//• Общая
//• СтрокаТаблицы
//• Список
//• ВерхнийКолонтитул
//• НижнийКолонтитул
//• ВерхнийТитульныйКолонтитул
//• НижнийТитульныйКолонтитул
//• ВерхнийЧетныйКолонтитул
//• НижнийЧетныйКолонтитул

//Правила оформления макета

//Область выделяется с помощью
//разделителей вида:
//{v8 Область.<Имя области>}
//...
//{/v8 Область.<Имя области>}

//Параметры выделяются с помощью
//маркеров вида:
//{v8 <Имя параметра>}

//Модуль Формы

//Шаг 2: Добавление описания команды печати
//Модуль Менеджера
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
   КомандаПечати = КомандыПечати.Добавить();
   КомандаПечати.Идентификатор = ""<НаименованиеИндентификатора>"";
   КомандаПечати.Представление = НСтр(""ru ='<Название представления>(Word)'"");
   КомандаПечати.Картинка = БиблиотекаКартинок.ФорматWord;
КонецПроцедуры	   
Процедура Печать(МассивОбъектов,ПараметрыПечати,КоллекцияПечатныхФорм,ОбъектыПечати,ПараметрыВывода) Экспорт
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм,""<НаименованиеИндентификатора>"");
	Если  ПечатнаяФорма <> Неопределено Тогда
	   //ОфисныеДокументы – это Соответствие:
       //   • Ключ – адрес во временном хранилище, по которому находится сформированный документ
       //   • Значение – Имя документа	
	   ОфисныеДокументы = СформироватьКоммерческоеПредложение(МассивОбъектов); 
	   ПечатнаяФорма.ОфисныеДокументы = ОфисныеДокументы;
	   ПечатнаяФорма.СинонимМакета = НСтр(""ru ='<Название>'"");
	КонецЕсли
КонецПроцедуры

//Алгоритм формирования печатной формы:
//1. Получить макет печатной формы:
//  - метод УправлениеПечатью.МакетПечатнойФормы
//2. Инициализировать макет для заполнения документа Open XМL
//  - метод УправлениеПечатью.ИнициализироватьМакетОфисногоДокумента
//3. Создать и заполнить структуру областей формируемой печатной формы
//4. Получить данные для печати из информационной базы
//5. Сформировать печатную форму в следующей последовательности:
//  • Подготовить печатную форму в формате офисного документа
//    - метод УправлениеПечатью.ИнициализироватьПечатнуюФорму
//  • Произвести заполнение областей печатной формы
//    - для получения области метод УправлениеПечатью.ОбластьМакета
//    - для заполнения области УправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры
//  • Поместить заполненную печатную форму в соответствие, являющееся результатом функции
//6. Удалить временные файлы с помощью метода УправлениеПечатью.ОчиститьСсылки

Функция СформироватьКоммерческоеПредложение(Ссылка)
  
 	// Подготавливаем макет для формирования печатной формы OpenXML
    МакетДокумента = УправлениеПечатью.МакетПечатнойФормы(""Документ.ЗаказКлиента.ПФ_DOC_КоммерческоеПредложение"");
    Макет = УправлениеПечатью.ИнициализироватьМакетОфисногоДокумента(МакетДокумента, Неопределено);
	
	// Создаем структуру областей формируемой печатной формы OpenXМL
	ОписаниеОбластей = Новый Структура;
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, ""Заголовок"", ""Общая"");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, ""Шапка"", ""Общая"");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, ""ШапкаТаблицы"", ""Общая"");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, ""СтрокаТаблицы"", ""СтрокаТаблицы"");
	УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, ""Подвал"", ""Общая"");
	
	// Подготавливаем печатную форму в формате офисного документа
	ПечатнаяФорма = УправлениеПечатью.ИнициализироватьПечатнуюФорму(Неопределено, Неопределено, Макет);

	//получаем данные документа
	Запрос = Новый Запрос;
	Запрос.Текст = 
		""ВЫБРАТЬ
		|	ЗаказКлиента.Номер КАК Номер,
		|	ЗаказКлиента.Дата КАК Дата,
		|	ЗаказКлиента.Контрагент КАК ПредставлениеЗаказчика,
		|	ЗаказКлиента.Договор КАК Договор,
		|	ЗаказКлиента.СуммаДокумента КАК СуммаДокумента,
		|	ЗаказКлиента.Ответственный КАК Менеджер,
		|	ЗаказКлиента.Комментарий КАК Комментарий,
		|	ЗаказКлиента.Организация КАК ПредставлениеОрганизации,
		|	ЗаказКлиента.Организация.Телефон КАК Телефон,
		|	ЗаказКлиента.Организация.ЭлПочта КАК Email
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|ГДЕ
		|	ЗаказКлиента.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказКлиентаТовары.Ссылка КАК Ссылка,
		|	ЗаказКлиентаТовары.НомерСтроки КАК НС,
		|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
		|	ЗаказКлиентаТовары.Количество КАК Количество,
		|	ЗаказКлиентаТовары.ЕдиницаИзмерения КАК ЕдИзм,
		|	ЗаказКлиентаТовары.Цена КАК Цена,
		|	ЗаказКлиентаТовары.СтавкаНДС КАК СтавкаНДС,
		|	ЗаказКлиентаТовары.Сумма КАК Сумма,
		|	ЗаказКлиентаТовары.СуммаНДС КАК СуммаНДС,
		|	ЗаказКлиентаТовары.СуммаВсего КАК СуммаВсего
		|ИЗ
		|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
		|ГДЕ
		|	ЗаказКлиентаТовары.Ссылка = &Ссылка"";
	
	Запрос.УстановитьПараметр(""Ссылка"", Ссылка);
	
	ДанныеДляПечати = Запрос.ВыполнитьПакет();

	Шапка = ДанныеДляПечати[0].Выгрузить();
	Товары = ДанныеДляПечати[1].Выгрузить();
	
	ДанныеШапка = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Шапка[0]);
	ДанныеШапка[""Номер""] = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеШапка[""Номер""]);
	ДанныеШапка[""Дата""] = Формат(ДанныеШапка[""Дата""], ""ДФ=dd.MM.yyyy"");
	
	ДанныеТовары = ОбщегоНазначения.ТаблицаЗначенийВМассив(Товары);
	
	// Вывод заголовка
	Область = УправлениеПечатью.ОбластьМакета(Макет, ОписаниеОбластей[""Заголовок""]);
	УправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеШапка);
		
	// Вывод шапки документа
	Область = УправлениеПечатью.ОбластьМакета(Макет, ОписаниеОбластей[""Шапка""]);
	УправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеШапка);
	
	// Вывод таблицы
	Если ДанныеТовары.Количество() > 0 Тогда
		Область = УправлениеПечатью.ОбластьМакета(Макет, ОписаниеОбластей[""ШапкаТаблицы""]);
		УправлениеПечатью.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
		Область = УправлениеПечатью.ОбластьМакета(Макет, ОписаниеОбластей[""СтрокаТаблицы""]);
		УправлениеПечатью.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеТовары);
	КонецЕсли;

	// Вывод подвала
	Область = УправлениеПечатью.ОбластьМакета(Макет, ОписаниеОбластей[""Подвал""]);
	УправлениеПечатью.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеШапка);

	// Помещаем сформированную печатную форму в соответствие ОфисныеДокументы
	АдресХранилищаПечатнойФормы = УправлениеПечатью.СформироватьДокумент(ПечатнаяФорма);
	
	//удаление временных файлов
	УправлениеПечатью.ОчиститьСсылки(ПечатнаяФорма);	
	УправлениеПечатью.ОчиститьСсылки(Макет);

	Возврат АдресХранилищаПечатнойФормы;
	
КонецФункции // СформироватьКоммерческоеПредложение()
"}
},
{0,
{"Печать Создание печатной формы ",0,0,"","//1. ОбщийМодуль УправлениеПечатьюПредопределенный
// Добавить в процедуру ПриОпределенииОбъектовСКомандамиПечати
СписокОбъектов.Добавить(Документы.<ИмяДокумента>);

//2.МОДУЛЬ МЕНЕДЖЕРА ОБЪЕКТА 
#Область ПрограммныйИнтерфейс

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати – ТаблицаЗначений – состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Счет на оплату
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = ""Документ.<ИмяДокумента>"";
	КомандаПечати.Идентификатор = ""<Идентификатор>"";                     
	//КомандаПечати.МестоРазмещения = ""<ИмяПодменюНаФорме>"";
	КомандаПечати.Представление = НСтр(""ru = '<Представление>'"");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь; 

КонецПроцедуры

#КонецОбласти 

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов – Массив – ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати – Структура – дополнительные настройки печати;
//  КоллекцияПечатныхФорм – ТаблицаЗначений – сформированные табличные документы (выходной параметр)
//  ОбъектыПечати – СписокЗначений – значение – ссылка на объект;
//                                            представление – имя области, в которой был выведен объект (выходной параметр);
//  ПараметрыВывода – Структура – дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, ""<Идентификатор>"");
    Если ПечатнаяФорма <> Неопределено Тогда
        ПечатнаяФорма.ТабличныйДокумент = <ИмяПроцедурыФормированияТабДокумента>(МассивОбъектов, ОбъектыПечати);
        ПечатнаяФорма.СинонимМакета = НСтр(""ru = '<СинонимМакета>'"");
        ПечатнаяФорма.ПолныйПутьКМакету = ""Документ.<ИмяДокумента>.<ИмяМакета>"";
	КонецЕсли;
	
КонецПроцедуры      

// Формирует табличный документ печатной формы ""Счет на оплату""
//
// Параметры:
//  МассивОбъектов – Массив – ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати – Структура – дополнительные настройки печати;
//
Функция ПечатьСчетаНаОплату(МассивОбъектов, ОбъектыПечати)
	
	// Создаем табличный документ и устанавливаем имя параметров печати.
    ТабличныйДокумент = Новый ТабличныйДокумент;
    ТабличныйДокумент.КлючПараметровПечати = ""ПараметрыПечати_<Идентификатор>"";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы(""Документ.<ИмяДокумента>.<ИмяМакета>"");
	
    // Получаем запросом необходимые данные.
    Запрос = Новый Запрос();
    Запрос.Текст =
    ""ВЫБРАТЬ
    |	ТаблицаДокумента.Ссылка КАК Ссылка
    |ИЗ
    |	Документ.<ИмяДокумента> КАК ТаблицаДокумента
    |ГДЕ
    |	ТаблицаДокумента.Ссылка В(&МассивОбъектов)"";
	
	Запрос.УстановитьПараметр(""МассивОбъектов"", МассивОбъектов);
    Шапка = Запрос.Выполнить().Выбрать();
    
    ПервыйДокумент = Истина;
    
    Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
            // Все документы нужно выводить на разных страницах.
            ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
        КонецЕсли;
        ПервыйДокумент = Ложь;
        // Запомним номер строки, с которой начали выводить текущий документ.
        НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

		//Начало вывода документа
		//...алгоритм заполнения табличного документа...
		//Конец вывода документа
		
        // В табличном документе необходимо задать имя области, в которую был 
        // выведен объект. Нужно для возможности печати комплектов документов.
        УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
            НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);

	КонецЦикла;

	Возврат ТабличныйДокумент;
	
КонецФункции    

//3. МОДУЛЬ ФОРМЫ ДОКУМЕНТА

//1. Добавить в процедуру ""ПриСозданииНаСервере""

// СтандартныеПодсистемы.ПодключаемыеКоманды
ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

//*****************************************************

//2. Добавить в процедуру ""ПриЧтенииНаСервере""
// СтандартныеПодсистемы.ПодключаемыеКоманды
ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

//*****************************************************

//3. Добавить в процедуру ""ПриОткрытии""

// СтандартныеПодсистемы.ПодключаемыеКоманды
ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

//*****************************************************

//4. Добавить в процедуру ""ПослеЗаписи""
	
// СтандартныеПодсистемы.ПодключаемыеКоманды
ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды


//*****************************************************

//5. Добавить в модуль формы следующие процедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

//*****************************************************
//Примечание:
//Объект - Имя реквизита формы типа ""ДанныеФормыСтруктура"" (основной реквизит формы документа)   

//4. МОДУЛЬ ФОРМЫ СПИСКА

//1. Добавить в процедуру ""ПриСозданииНаСервере""

// СтандартныеПодсистемы.ПодключаемыеКоманды
ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

//*****************************************************

//2. Добавить в обработчик события ""ПриАктивизацииСтроки"" таблицы формы, которая отображает список

// СтандартныеПодсистемы.ПодключаемыеКоманды
ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

//*****************************************************

//3. Добавить в модуль формы следующие процедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры         

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры         

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
КонецПроцедуры         

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

//*****************************************************
//Примечание:
//Элементы.Список - элемент формы с типом ""ТаблицаФормы"" (который связан с динамическим списком)"}
},
{0,
{"Инициализация и установка параметров сеанса",0,0,"","//Параметры сеанса устанавливаются ""лениво"", лишь при обращении к нему.

// Модуль Сеанса 

Процедура УстановкаПараметровСеанса(ИменаПараметровСеанса)
	
	// СтандартныеПодсистемы
	СтандартныеПодсистемыСервер.УстановкаПараметровСеанса(ИменаПараметровСеанса);
	// Конец СтандартныеПодсистемы
	
КонецПроцедуры

 //Общий модуль   ОбщегоНазначенияПереопределяемый  
 
 // Определяет соответствие имен параметров сеанса и обработчиков для их установки.
// Вызывается для инициализации параметров сеанса из обработчика события модуля сеанса УстановкаПараметровСеанса
// (подробнее о нем см. синтакс-помощник).
//
// В указанных модулях должна быть размещена процедура обработчика, в которую передаются параметры:
//  ИмяПараметра           - Строка - имя параметра сеанса, который требуется установить.
//  УстановленныеПараметры - Массив - имена параметров, которые уже установлены.
// 
// Далее пример процедуры обработчика для копирования в указанные модули.
//
//// Параметры:
////  ИмяПараметра  - Строка
////  УстановленныеПараметры - Массив из Строка
////
//Процедура УстановкаПараметровСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
//	
//  Если ИмяПараметра = ""ТекущийПользователь"" Тогда
//		ПараметрыСеанса.ТекущийПользователь = Значение;
//		УстановленныеПараметры.Добавить(""ТекущийПользователь"");
//  КонецЕсли;
//	
//КонецПроцедуры
//
// Параметры:
//  Обработчики - Соответствие из КлючИЗначение:
//    * Ключ     - Строка - в формате ""<ИмяПараметраСеанса>|<НачалоИмениПараметраСеанса*>"".
//                   Символ '*'используется в конце имени параметра сеанса и обозначает,
//                   что один обработчик будет вызван для инициализации всех параметров сеанса
//                   с именем, начинающимся на слово НачалоИмениПараметраСеанса.
//
//    * Значение - Строка - в формате ""<ИмяМодуля>.УстановкаПараметровСеанса"".
//
//  Пример:
//   Обработчики.Вставить(""ТекущийПользователь"", ""ПользователиСлужебный.УстановкаПараметровСеанса"");
//

  Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	
	Обработчики.Вставить(""ТекущийНачальникУправления"",""РаботаСПараметрамиСеансаНаСервере.УстановитьПараметрыСеанса"");
	
КонецПроцедуры


//Процедура иницаизирущая параметры сианса  Общий модуль РаботаСПараметрамиСеансаНаСервере   
//Тут мы пишем свои параметры сианса

 Процедура УстановитьПараметрыСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
   
  ОпределитьТекущегоНачальника(ТекущаяДата());  
  
  УстановленныеПараметры.Добавить(""ТекущийНачальникУправления"");
               
КонецПроцедуры

Процедура ОпределитьТекущегоНачальника(Период) Экспорт
	   	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		""ВЫБРАТЬ
		|	УчетнаяПолитикаСрезПоследних.НачальникУправления КАК НачальникУправления
		|ИЗ
		|	РегистрСведений.УчетнаяПолитика.СрезПоследних(&Период, ) КАК УчетнаяПолитикаСрезПоследних"";
	
	Запрос.УстановитьПараметр(""Период"", Период);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ПараметрыСеанса.ТекущийНачальникУправления =  Выборка.НачальникУправления;
	Иначе
		Сообщить(""В регистре сведений 'Учетная политика' не указан BOSS всея управления"");
	КонецЕсли;
	
КонецПроцедуры	
"}
},
{0,
{"Дополнительные отчеты и обработки",0,0,"","//Эта функция позволяет добавить внешний отчет в справочник ""Дополнительные отчеты и обработки"". Ее необходимо разместить в модуле отчета.
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации         = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();
	ПараметрыРегистрации.Вид     = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительныйОтчет();
	ПараметрыРегистрации.Версия  = ""1.0"";
	Команда                      = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление        = Метаданные().Представление();
	Команда.Идентификатор        = Метаданные().ПолноеИмя();
	Команда.Использование        = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	Команда.ПоказыватьОповещение = Ложь;

	Возврат ПараметрыРегистрации;

КонецФункции"}
},
{0,
{"ПроверитьПроведенностьДокументов",0,0,"","//Вызов с клиента
ДокументыТребующиеПроведение = ОбщегоНазначенияВызовСервера.ПроверитьПроведенностьДокументов(ДокументыМассив);

// Вызов с сервера
ДокументыТребующиеПроведение = ОбщегоНазначения.ПроверитьПроведенностьДокументов(ДокументыМассив);"}
},
{0,
{"Как узнать версию БСП в 1С 8.3",0,0,"","// Текущую версию БСП можно узнать через регистр ""Версии подсистем"",
// Пункт меню -> Функции для технического специалиста
// И найти запись ""СтандартныеПодсистемы"" или программно:

&НаСервере
Функция ПолучитьВерсиюБСП()
   ВерсияБСП = СтандартныеПодсистемыСервер.ВерсияБиблиотеки();
   ОбщегоНазначения.СообщитьПользователю(ВерсияБСП);
   Возврат ВерсияБСП;
КонецФункции"}
},
{4,
{"Буфер обмена",1,0,"",""},
{0,
{"СкопироватьВБуферОбмена",0,0,"","ОбщегоНазначения.СкопироватьВБуферОбмена(Данные, Источник);

Процедура ПоместитьТаблицуЗначенийВБуферОбмена(Таблица) Экспорт

   ТаблицаДляБуфера = Таблица.Скопировать();
   ОбщегоНазначения.СкопироватьВБуферОбмена(ТаблицаДляБуфера, ""КопированиеВставкаСтрок"");

КонецПроцедуры  

// Помещает произвольные данные во внутренний буфер обмена, откуда их можно получить с помощью СтрокиИзБуфераОбмена.
//
// Параметры:
//  Данные           - Произвольный - данные, которые необходимо поместить в внутренний буфер обмена.
//  Источник         - Строка       - произвольный строковый идентификатор, например, имя объекта,
//                                    строки табличной части которого помещаются во внутренний буфер обмена.
//
Процедура СкопироватьВБуферОбмена(Данные, Источник = Неопределено) Экспорт
	
	ТекущийБуферОбмена = ПараметрыСеанса.БуферОбмена;
	
	Если ЗначениеЗаполнено(ТекущийБуферОбмена.Данные) Тогда
		Адрес = ТекущийБуферОбмена.Данные;
	Иначе
		Адрес = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	ДанныеВХранилище = ПоместитьВоВременноеХранилище(Данные, Адрес);
	
	СтруктураБуфераОбмена = Новый Структура;
	СтруктураБуфераОбмена.Вставить(""Источник"", Источник);
	СтруктураБуфераОбмена.Вставить(""Данные"", ДанныеВХранилище);
	
	ПараметрыСеанса.БуферОбмена = Новый ФиксированнаяСтруктура(СтруктураБуфераОбмена);
	
КонецПроцедуры
"}
},
{0,
{"ПустойБуферОбмена",0,0,"","Результат = ОбщегоНазначения.ПустойБуферОбмена(Источник);

/ Проверяет наличие сохраненных данных во внутренний буфере обмена.
//
// Параметры:
//  Источник - Строка - если передан, то проверяется наличие данных
//             в внутреннем буфере обмена с этим ключом.
//             По умолчанию - Неопределено.
// Возвращаемое значение:
//  Булево - Истина, если пустой.
//
Функция ПустойБуферОбмена(Источник = Неопределено) Экспорт

   ТекущийБуферОбмена = ПараметрыСеанса.БуферОбмена; // см. СтрокиИзБуфераОбмена
   ИсточникСовпадает = Истина;
   Если Источник <> Неопределено Тогда
       ИсточникСовпадает = (Источник = ТекущийБуферОбмена.Источник);
   КонецЕсли;
   Возврат (Не ИсточникСовпадает Или Не ЗначениеЗаполнено(ТекущийБуферОбмена.Данные));

КонецФункции"}
},
{0,
{"СкопироватьВБуферОбмена",0,0,"","ОбщегоНазначения.СкопироватьВБуферОбмена(Данные, Источник);

Процедура ПоместитьТаблицуЗначенийВБуферОбмена(Таблица) Экспорт

   ТаблицаДляБуфера = Таблица.Скопировать();
   ОбщегоНазначения.СкопироватьВБуферОбмена(ТаблицаДляБуфера, ""КопированиеВставкаСтрок"");

КонецПроцедуры        

// Помещает произвольные данные во внутренний буфер обмена, откуда их можно получить с помощью СтрокиИзБуфераОбмена.
//
// Параметры:
//  Данные           - Произвольный - данные, которые необходимо поместить в внутренний буфер обмена.
//  Источник         - Строка       - произвольный строковый идентификатор, например, имя объекта,
//                                    строки табличной части которого помещаются во внутренний буфер обмена.
//
Процедура СкопироватьВБуферОбмена(Данные, Источник = Неопределено) Экспорт
	
	ТекущийБуферОбмена = ПараметрыСеанса.БуферОбмена;
	
	Если ЗначениеЗаполнено(ТекущийБуферОбмена.Данные) Тогда
		Адрес = ТекущийБуферОбмена.Данные;
	Иначе
		Адрес = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	ДанныеВХранилище = ПоместитьВоВременноеХранилище(Данные, Адрес);
	
	СтруктураБуфераОбмена = Новый Структура;
	СтруктураБуфераОбмена.Вставить(""Источник"", Источник);
	СтруктураБуфераОбмена.Вставить(""Данные"", ДанныеВХранилище);
	
	ПараметрыСеанса.БуферОбмена = Новый ФиксированнаяСтруктура(СтруктураБуфераОбмена);
	
КонецПроцедуры
"}
},
{0,
{"СтрокиИзБуфераОбмена",0,0,"","Результат = ОбщегоНазначения.СтрокиИзБуфераОбмена();


ДанныеИзБуфераОбмена = ОбщегоНазначения.СтрокиИзБуфераОбмена();
Если ДанныеИзБуфераОбмена.Источник <> ""Товары"" Тогда
   Возврат 0;
КонецЕсли;

БуферОбмена = ОбщегоНазначения.СтрокиИзБуфераОбмена();
Если ТипЗнч(БуферОбмена.Данные) = Тип(""Соответствие"") Тогда
   СообщенияПользователю = БуферОбмена.Данные;
КонецЕсли;

// Получает строки табличной части, помещенные во внутренний буфер обмена с помощью СкопироватьСтрокиВБуферОбмена.
//
// Возвращаемое значение:
//  Структура:
//     * Данные   - Произвольный - данные из внутреннего буфера обмена.
//                                 Например, ТаблицаЗначений при вызове СкопироватьСтрокиВБуферОбмена.
//     * Источник - Строка       - объект, к которому относятся данные.
//                                 Если при помещении во внутренний буфер не был указан, то Неопределено.
//
Функция СтрокиИзБуфераОбмена() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить(""Источник"", Неопределено);
	Результат.Вставить(""Данные"", Неопределено);
	
	Если ПустойБуферОбмена() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТекущийБуферОбмена = ПараметрыСеанса.БуферОбмена; // см. СтрокиИзБуфераОбмена
	Результат.Источник = ТекущийБуферОбмена.Источник;
	Результат.Данные = ПолучитьИзВременногоХранилища(ТекущийБуферОбмена.Данные);
	
	Возврат Результат;
КонецФункции
"}
}
}
},
{6,
{"Инициализация типов",1,0,"",""},
{0,
{"Дерево значений",1,0,"",""}
},
{0,
{"Массивы",1,0,"",""}
},
{0,
{"Словари",1,0,"",""}
},
{0,
{"Список значений",1,0,"",""}
},
{0,
{"Структура",1,0,"",""}
},
{0,
{"Таблица значений",1,0,"",""}
}
},
{4,
{"Отчеты и обработки",1,0,"",""},
{0,
{"Заполнение макета",0,0,"","//Создаем табличный документ
ТабДокумент = Новый ТабличныйДокумент;

//Указываем ориентацию страницы.
//Портретная по умолчанию
ТабДокумент.ОриентацияСтраницы =
ОриентацияСтраницы.Портрет;

//Получаем макет по его названию (модуль объекта)
Макет = ПолучитьМакет(""Макет"");
//Или так (если из модуля формы)
Макет = Отчеты.Номенклатура.ПолучитьМакет(""Макет"");

//Получаем доступ к разделу ""Шапка""
Шапка = Макет.ПолучитьОбласть(""Шапка"");
//Заполняем параметр ""Заголовок""
Шапка.Параметры.Заголовок =
""Перечень номенклатуры"";

//Добавляем шапку в табличный документ
ТабДокумент.Вывести(Шапка);

//Получаем доступ к разделу ""Строка""
Строка = Макет.ПолучитьОбласть(""Строка"");

Выборка = Справочники.Номенклатура.Выбрать();
Пока Выборка.Следующий() Цикл
     //Заполняем строку макета данными полей справочника
     Строка.Параметры.Заполнить(Выборка);
     //Добавляем строку в табличный документ
     ТабДокумент.Вывести(Строка);
КонецЦикла;"}
},
{0,
{"Открыть форму настроек отчёта",0,0,"","Форма = ПолучитьФорму(""Отчет.Материалы.ФормаНастроек"");
Форма.Открыть();


"}
},
{0,
{"Открыть форму отчёта",0,0,"","Форма = ПолучитьФорму(""Отчет.Материалы.Форма"");
Форма.Открыть();"}
},
{0,
{"пример внешней обработки",0,0,"","//Пример внешней обработки с печатной формой 
//подключаемой к документу ИнвентаризацияТоваровНаСкладе
//стандартной конфигурации 1С 8.3 .
//Размещение кода: Модуль объекта вынешней обработки.
//Обработка добавляет документу две команды печати:
// - Инвентаризационная опись склада
// - Инвентаризационная опись склада (альбомная) 
Функция СведенияОВнешнейОбработке() Экспорт
   //Получаем шаблон сведений о внешнем отчете или обработке
   ПараметрыРегистрации =
   ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

   //Указываем что обработка является печатной формой
   ПараметрыРегистрации.Вид =
   ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиПечатнаяФорма();
   //Задаем версию обработки
   ПараметрыРегистрации.Версия = ""1.0"";
   //Указываем список документов, к которому будет подключаться обработка
   ПараметрыРегистрации.Назначение.Добавить(""Документ.ИнвентаризацияТоваровНаСкладе"");

   //Добавляем команды для пункта меню ""Печать""
   НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
   //Задаем представление команды
   НоваяКоманда.Представление = НСтр(""ru = 'Инвентаризационная опись склада'"");
   //Идентификатор, который используется в функции ""Печать""
   НоваяКоманда.Идентификатор = ""ИнвентаризационнаяОписьСклада"";
   //Серверный тип команды
   НоваяКоманда.Использование =
   ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();

  //Вторая команда в пункт меню ""Печать""
  НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
  НоваяКоманда.Представление = НСтр(""ru = 'Инвентаризационная опись склада (альбомная)'"");
  НоваяКоманда.Идентификатор = ""ИнвентаризационнаяОписьСкладаАльбомная"";
  НоваяКоманда.Использование =
  ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();

  Возврат ПараметрыРегистрации;

КонецФункции

// Функция является точкой входа в обработку.
Функция Печать(МассивОбъектов, КоллекцияПечатныхФорм,
  ОбъектыПечати, ПараметрыВывода) Экспорт

  //Проверяем по идентификатору, какая из команд вызвана:
  // ИнвентаризационнаяОписьСклада или 
  // ИнвентаризационнаяОписьСкладаАльбомная
  Если УправлениеПечатью.НужноПечататьМакет(
    КоллекцияПечатныхФорм, ""ИнвентаризационнаяОписьСклада"") Тогда
    //Формируем портретный табличный документ
    ТабДокумент = ПечатьДокумента(МассивОбъектов,
    ""МакетОписи"", ОриентацияСтраницы.Портрет);

    //Выводим печатную форму
    УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
    КоллекцияПечатныхФорм, ""ИнвентаризационнаяОписьСклада"",
    НСтр(""ru = 'Инвентаризационная опись склада'""), ТабДокумент);

  ИначеЕсли УправлениеПечатью.НужноПечататьМакет(
  КоллекцияПечатныхФорм, ""ИнвентаризационнаяОписьСкладаАльбомная"") Тогда
  //Формируем альбомный табличный документ
  ТабДокумент = ПечатьДокумента(МассивОбъектов,
  ""МакетОписи"", ОриентацияСтраницы.Ландшафт);

  УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
  КоллекцияПечатныхФорм,
  ""ИнвентаризационнаяОписьСкладаАльбомная"",
  НСтр(""ru = 'Инвентаризационная опись склада (альбомная)'""),
  ТабДокумент);
 КонецЕсли;

КонецФункции

// Функция, возвращающая готовый ТабличныйДокумент
Функция ПечатьДокумента(МассивОбъектов, НазваниеМакета, Ориентация)

  //Создадим и заполним табличный документ
  ТабДокумент = Новый ТабличныйДокумент;
  ТабДокумент.ОриентацияСтраницы  = Ориентация;

  Макет = ПолучитьМакет(НазваниеМакета);
  //Далее следует заполнение макета
  //...
КонецФункции

"}
}
},
{3,
{"Параметры сеанса",1,0,"",""},
{0,
{"Выбор документов пользователя",0,0,"","&НаСервере

//Выбираем документы текущего пользователя
Запрос = Новый Запрос;
Запрос.Текст = 
""ВЫБРАТЬ
| Приходник.Номер КАК Номер,
| Приходник.Дата КАК Дата
|ИЗ
| Документ.ПриходныйКассовыйОрдер КАК Приходник
|ГДЕ
| Приходник.Ответственный = &Ответственный"";

Пользователь = ПараметрыСеанса.ТекущийПользователь;
Запрос.УстановитьПараметр(""Ответственный"", Пользователь);

Выборка = Запрос.Выполнить().Выбрать();

//Выводим информацию о найденных документах
Пока Выборка.Следующий() Цикл
Информация = СтрШаблон(""№ %1 от %2"", 
Выборка.Номер, Выборка.Дата);
Сообщить(Информация);
КонецЦикла;"}
},
{0,
{"Получение текущего пользователя",0,0,"","&НаСервере 

Пользователь = ПараметрыСеанса.ТекущийПользователь; 
Сообщить(Пользователь);
//Если в справочнике пользователей
//задано физическое лицо
Сообщить(Пользователь.ФизическоеЛицо);"}
},
{0,
{"Установка параметров сеанса",0,0,"","//Модуль сеанса
Процедура УстановкаПараметровСеанса(ИменаПараметровСеанса)

Если ИменаПараметровСеанса = Неопределено Тогда
//Заполняем созданный в конфигурации
//параметр ""Регионы""
Регионы = Новый Массив;
Регионы.Добавить(41);
Регионы.Добавить(777);

ПараметрыСеанса.Регионы = Новый ФиксированныйМассив(Регионы);
Иначе
// Установка параметров сеанса ""по требованию""
Если ИменаПараметровСеанса.Найти(""ТекущийПользователь"") <> Неопределено Тогда
Пользователь = Справочники.Пользователи.НайтиПоКоду(""000000001"");
ПараметрыСеанса.ТекущийПользователь = Пользователь;
КонецЕсли;
КонецЕсли;

//...

КонецПроцедуры

"}
}
},
{0,
{"Поток управления",1,0,"",""}
},
{1,
{"Процедуры и функции",1,0,"",""},
{0,
{"Валидация Email в 1С Предприятие",0,0,"","//Валидация — это доказательство, что продуктом, оборудованием или процессом можно пользоваться по назначению.

Функция EmailValid(Адрес) Экспорт

    //Адрес = ""test@me@gmail.narod.am"";

    ЛатинскиеБуквы = ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"";

    Цифры = ""0123456789"";

    //ищем крайний справа символ @ для правильного выделения локальной и доменной части

    ИндексСобаки = Найти(Адрес,""@"");

    //1. строка адреса вообще не содержит разделителя

    Если ИндексСобаки = 0 Тогда

        Возврат ЛОЖЬ;

    КонецЕсли;

    УрезаемаяСтрока = Сред(Адрес, ИндексСобаки+1);

    Пока Найти(УрезаемаяСтрока,""@"") > 0 Цикл

        ИндексСобаки = ИндексСобаки + Найти(УрезаемаяСтрока,""@"");

        УрезаемаяСтрока = Сред(УрезаемаяСтрока, ИндексСобаки+1);

    КонецЦикла;

    ДоменнаяЧасть = Сред(Адрес, ИндексСобаки+1);

    ЛокальнаяЧасть = Лев(Адрес, ИндексСобаки-1);

    //2. Проверяем длину локальной части

    Если СтрДлина(ЛокальнаяЧасть) < 1 ИЛИ СтрДлина(ЛокальнаяЧасть) > 64 Тогда

        Возврат ЛОЖЬ;

    КонецЕсли;

    //3. Проверяем длину доменной части

    Если СтрДлина(ДоменнаяЧасть) < 1 ИЛИ СтрДлина(ДоменнаяЧасть) > 255 Тогда

        Возврат ЛОЖЬ;

    КонецЕсли;

    //4. Проверяем что локальная части не начинается и не заканчивается на "".""

    Если Лев(ЛокальнаяЧасть, 1) = ""."" ИЛИ Прав(ЛокальнаяЧасть, 1) = ""."" Тогда

        Возврат ЛОЖЬ;

    КонецЕсли;

    //5. Локальная части не содержит 2 или более ""."" подряд

    Если Найти(ЛокальнаяЧасть, "".."") > 0 Тогда

        Возврат ЛОЖЬ;

    КонецЕсли;

    //Проверка доменной части

    //6. Доменная часть не начинается с точки

    Если Лев(ДоменнаяЧасть, 1) = ""."" Тогда

        Возврат ЛОЖЬ;

    КонецЕсли;

    //7. Доменная часть не содержит 2 или более ""."" подряд

    Если Найти(ДоменнаяЧасть, "".."") > 0 Тогда

        Возврат ЛОЖЬ;

    КонецЕсли;

    //8. Проверка частей доменной части

    //каждая часть начинается с буквы и заканчивается буквой или цифрой

    //каждая часть длиной не более 63 символов

    ИдентификаторыДоменнойЧасти = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДоменнаяЧасть, ""."");

    Для Каждого ИдентификаторДомена ИЗ ИдентификаторыДоменнойЧасти Цикл

        Если СтрДлина(ИдентификаторДомена) > 63 Тогда

            Возврат ЛОЖЬ;

        КонецЕсли;

        Если Найти(ЛатинскиеБуквы, Лев(ИдентификаторДомена,1)) = 0

            //для доменов, нарушающих RFC 1035 п.2.3.1, например @1c.ru :)

            И Найти(Цифры, Лев(ИдентификаторДомена,1)) = 0

            Тогда

            Возврат ЛОЖЬ;

        КонецЕсли;

        Если Найти(ЛатинскиеБуквы, Прав(ИдентификаторДомена,1)) = 0 И Найти(Цифры, Прав(ИдентификаторДомена,1)) = 0 Тогда

            Возврат ЛОЖЬ;

        КонецЕсли;

    КонецЦикла;



    //Все проверки пройдены - радуемся

    Возврат ИСТИНА;

КонецФункции"}
}
},
{5,
{"Работа с простыми типами",1,0,"",""},
{0,
{"Boolean",1,0,"",""}
},
{5,
{"Дата и Время",1,0,"",""},
{0,
{"Проверить дату на пустое значение",0,0,"","Функция ДатаНеЗаполнена(ПереданноеЗначение)
   Если ПереданноеЗначение = Дата('00010101') Тогда
      Возврат Истина;
   Иначе
      Возврат Ложь;
   КонецЕсли; 
КонецФункции
"}
},
{0,
{"Как получить формат даты без времени",0,0,"","ДатаСтрокой = Формат(ТекущаяДата(), ""ДЛФ=D"");//08.11.2019
ДатаСтрокой = Формат(ТекущаяДата(), ""ДЛФ=DD"");//08 ноября 2019 г
ДатаСтрокой = Формат(ТекущаяДата(), ""ДФ=dd.MM.yyyy"");//08.11.2019
ДатаСтрокой = Формат(ТекущаяДата(), ""ДФ=dd MMMM yyyy"");//08 ноября 2019"}
},
{0,
{"Как посчитать количество месяцев между датами(1)",0,0,"","Функция РазностьДатМесяц(ДатаНачала,ДатаКонца)
   МесяцНачала = Месяц(ДатаНачала);
   МесяцКонца = Месяц(ДатаКонца);
   ЛетМеждуДатами = Год(ДатаКонца) - Год(ДатаНачала);
   РезультатВМесяцах = ЛетМеждуДатами * 12 - МесяцНачала + МесяцКонца;
   Возврат РезультатВМесяцах;
КонецФункции"}
},
{0,
{"Как посчитать количество месяцев между датами(2)",0,0,"","Функция РазностьДатМесяцРекурсия(ДатаНачала,ДатаКонца)
   Если НачалоМесяца(ДатаНачала) >= НачалоМесяца(ДатаКонца) Тогда
      Результат = 0;
   Иначе
      Результат = 1 + РазностьДатМесяцРекурсия(ДатаНачала,НачалоМесяца(ДатаКонца)-1);
   КонецЕсли;
   Возврат Результат;
КонецФункции"}
},
{16,
{"Как перевести секунды в часы и минуты",1,0,"",""},
{0,
{"Получить часы",0,0,"","//получаем часы
Часы = Цел(КоличествоСекунд / 3600);
//считаем остаток
ОстатокСекунд = КоличествоСекунд - Часы * 3600;
//или 
ОстатокСекунд = КоличествоСекунд % 3600;

Сообщить("""" + Часы + "" часов "" );
//Результат:
//	2 часов"}
},
{0,
{"Получить минуты",0,0,"","//получаем минуты
Минуты = Цел(ОстатокСекунд / 60);//в минуте 60 сек

Сообщить("""" + Часы + "" часов, "" + Минуты + "" минут "" );"}
},
{0,
{"Получить секунды",0,0,"","Секунды = ОстатокСекунд % 60;

"}
},
{0,
{"Функция ПолучитьЧасыМинутыСекунды",0,0,"","Функция ПериодЧасыМинутыСекунды(Знач КоличествоСекунд)
	
	Перем Часы, Минуты, Секунды;
	
	//получаем часы
	Часы = Цел(КоличествоСекунд / 3600);
	//считаем остаток
	КоличествоСекунд = КоличествоСекунд % 3600;
	//получаем минуты
	Минуты = Цел(КоличествоСекунд / 60);//в минуте 60 сек
	//остались секунды
	Секунды = КоличествоСекунд % 60;
	
	Возврат ("""" + Часы + "" часов, "" + Минуты + "" минут, "" + Секунды + "" секунд"");
	
КонецФункции"}
},
{0,
{"Прибавить секунду",0,0,"","//Прибавить секунду
Дата = Дата + 1; 

//В запросе
""ДОБАВИТЬКДАТЕ(Дата, СЕКУНДА, 1)"""}
},
{0,
{"Вычесть минуту",0,0,"","//Вычесть минуту
Дата = Дата - 60;

//В запросе
""ДОБАВИТЬКДАТЕ(Дата, МИНУТА, -1)"""}
},
{0,
{"Вычесть час",0,0,"","//Вычесть час
Дата = Дата - 60 * 60;

//В запросе
""ДОБАВИТЬКДАТЕ(Дата, ЧАС, -1)"""}
},
{0,
{"Вычесть определенное количество дней",0,0,"","//Вычесть определенное количество дней
Дата = Дата - 60 * 60 * 24 * Количество;

//В запросе
""ДОБАВИТЬКДАТЕ(Дата, ДЕНЬ, -1)""
"}
},
{0,
{"Как вычислить количество дней между двумя датами (Запрос)",0,0,""," Запрос = Новый Запрос;
Запрос.Текст =
	“ВЫБРАТЬ 
	|	РАЗНОСТЬДАТ(&НачалоПериода,&КонецПериода,МЕСЯЦ) КАК Месяцев,
	|	РАЗНОСТЬДАТ(&НачалоПериода,&КонецПериода,ДЕНЬ) КАК Дней”;"}
},
{0,
{"Как вычислить количество дней между двумя датами",0,0,"","КоличествоДней = (ДатаОкончания – ДатаНачала)/60/60/24;"}
},
{0,
{"Как добавить к дате секунду",0,0,"","  // Прибавили секунду
  Результат = Дата(2016, 07, 21) + 1; "}
},
{0,
{"Как добавить к дате минуту",0,0,"","// Прибавили 2 минуты
Результат = Дата(2016, 07, 21) + 2 * 60; 		"}
},
{0,
{"Как добавить к дате час",0,0,"","// Прибавили 10 часов
Результат = Дата(2016, 07, 21) + 60*60*10; 		"}
},
{0,
{"Как добавить к дате день",0,0,"","// Прибавили 5 дней		
Результат = Дата(2016, 07, 21) + 5 * 60*60*24; 			"}
},
{0,
{"Как добавить к дате месяц",0,0,"","// Добавим к дате 5 месяцев
Результат = ДобавитьМесяц(Дата(2016, 07, 21), 5); "}
},
{0,
{"Как отнять от даты месяц",0,0,"","// Отнимаем от даты 3 месяца
Результат = ДобавитьМесяц(Дата(2016, 07, 21), –3) "}
}
}
},
{0,
{"Символьный тип",1,0,"",""}
},
{2,
{"Строки",1,0,"",""},
{0,
{"Как обрезать строку",0,0,"","Позиция=Найти(НашаСтрока,""/"");
НашаСтрока=Лев(НашаСтрока,Позиция-1);

"}
},
{0,
{"Удалить все пробелы",0,0,"","Строка = СтрЗаменить(Строка(ПрСтрока),"" "","""");"}
}
},
{0,
{"Числа",1,0,"",""}
}
},
{0,
{"Регулярные выражения",1,0,"",""}
},
{7,
{"Описание типов значений",1,0,"",""},
{5,
{"ОписаниеТипов ",1,0,"",""},
{0,
{"Создание",0,0,"","//Число
ОписаниеЧисла = Новый ОписаниеТипов(""Число"");
//Строка
ОписаниеСтроки = Новый ОписаниеТипов(""Строка"");
//Дата
ОписаниеДаты = Новый ОписаниеТипов(""Дата""); 
//Булево
ОписаниеБулево = Новый ОписаниеТипов(""Булево"");
//Ссылочный тип  
ОписаниеПеречисление = Новый ОписаниеТипов(""ПеречислениеСсылка.ВидРегиона"");
ОписаниеСправочник = Новый ОписаниеТипов(""СправочникСсылка.Контрагенты"");
ОписаниеДокумент = Новый ОписаниеТипов(""ДокументСсылка.ПродажаТоваров"");

//Далее можно использовать описание в объектах ПРИМЕР таблица значений
ТЗ = Новый ТаблицаЗначений;
ТЗ.Колонки.Добавить(""КолонкаЧисло"", ОписаниеЧисла);
ТЗ.Колонки.Добавить(""КолонкаСтрока"", ОписаниеСтроки);
ТЗ.Колонки.Добавить(""КолонкаДокумент"", ОписаниеДокумент);
"}
},
{3,
{"Классификаторы",1,0,"",""},
{0,
{"Классификатор числа",0,0,"","//Новый ОписаниеТипов(<Типы>, <КвалификаторыЧисла>, <КвалификаторыСтроки>, 
//                    <КвалификаторыДаты>, <КвалификаторыДвоичныхДанных>)

//Новый КвалификаторыЧисла(<ЧислоРазрядов>, <ЧислоРазрядовДробнойЧасти>, <ДопустимыйЗнак>)
//Где: ЧислоРазрядов – общее число разрядов;
//ЧислоРазрядовДробнойЧасти – число разрядов после запятой;
//ДопустимыйЗнак – системное перечисления (значения Любой, Неотрицательный).
КвалификаторЧисла = Новый КвалификаторыЧисла(6,2,ДопустимыйЗнак.Неотрицательный);
ОписаниеЧисла = Новый ОписаниеТипов(""Число"",КвалификаторЧисла);
"}
},
{0,
{"Классификатор строки",0,0,"","//Новый ОписаниеТипов(<Типы>, <КвалификаторыЧисла>, <КвалификаторыСтроки>, 
//                    <КвалификаторыДаты>, <КвалификаторыДвоичныхДанных>)

//Новый КвалификаторыСтроки(<ДлинаСтроки>, <ДопустимаяДлина>)
//Где:  ДлинаСтроки – длина задаваемой строки
//ДопустимаяДлина – системное перечисление ДопустимаяДлина, которое определяет, будет строка переменная или фиксированная.
//Например, задать строку длинной 10 символов фиксированной длины нужно так:
КвалификаторСтроки = Новый КвалификаторыСтроки(10,ДопустимаяДлина.Фиксированная);
ОписаниеСтроки = Новый ОписаниеТипов(""Строка"",,КвалификаторСтроки);
"}
},
{0,
{"Классификатор даты",0,0,"","//Новый ОписаниеТипов(<Типы>, <КвалификаторыЧисла>, <КвалификаторыСтроки>, 
//                    <КвалификаторыДаты>, <КвалификаторыДвоичныхДанных>)
//Новый КвалификаторыДаты(<ЧастиДаты>)
//Где ЧастиДаты – системное перечисление, с тремя значениями Время, Дата, ДатаВремя.
//Например, задать дату, которая будет иметь формат времени нужно так:
КвалификаторДаты = Новый КвалификаторыДаты(ЧастиДаты.Время);
ОписаниеДаты = Новый ОписаниеТипов(""Дата"",,,КвалификаторДаты);
"}
}
},
{0,
{"Массив типов",0,0,"","МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип(""Число""));
МассивТипов.Добавить(Тип(""Строка""));
МассивТипов.Добавить(Тип(""Дата""));
МассивТипов.Добавить(Тип(""Булево""));	
КвалификаторЧисла = Новый КвалификаторыЧисла(6,2,ДопустимыйЗнак.Неотрицательный);
КвалификаторСтроки = Новый КвалификаторыСтроки(10,ДопустимаяДлина.Фиксированная);
КвалификаторДаты = Новый КвалификаторыДаты(ЧастиДаты.Время);
ОписаниеТипов = Новый ОписаниеТипов(МассивТипов,КвалификаторЧисла,КвалификаторСтроки,КвалификаторДаты);

//массив из ссылочных типов, например из справочников

МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип(""СправочникСсылка.Валюта""));
МассивТипов.Добавить(Тип(""СправочникСсылка.Контрагенты""));
МассивТипов.Добавить(Тип(""СправочникСсылка.Номенклатура""));
	
ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
"}
},
{0,
{"Описание типов на основании описания типов",0,0,"","МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип(""Число""));
МассивТипов.Добавить(Тип(""Строка""));
МассивТипов.Добавить(Тип(""Булево""));
	
КвалификаторЧисла = Новый КвалификаторыЧисла(6,2,ДопустимыйЗнак.Неотрицательный);
КвалификаторСтроки = Новый КвалификаторыСтроки(10,ДопустимаяДлина.Фиксированная);
	
ОписаниеТипов = Новый ОписаниеТипов(МассивТипов,КвалификаторЧисла,КвалификаторСтроки,);

КвалификаторДаты = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
//Новый ОписаниеТипов(<ИсходноеОписаниеТипов>, <ДобавляемыеТипы>, <ВычитаемыеТипы>, 
//                   <КвалификаторыЧисла>, <КвалификаторыСтроки>, <КвалификаторыДаты>, 
//                   <КвалификаторыДвоичныхДанных>)   
ОписаниеТиповНовое = Новый ОписаниеТипов(ОписаниеТипов,""Дата"",""Булево"",,,КвалификаторДаты);
"}
},
{0,
{"Проверка наличия типа в списке",0,0,"","//ли требуется просто проверить есть ли в списке типов требуемый, можно использовать метод СодержитТип()
Если ЭлементыФормы.ИмяПоля.ТипЗначения.СодержитТип(Тип(""Строка"") ) Тогда
//…
КонецЕсли;"}
}
},
{0,
{"Способы определить тип (4)",0,0,"","//способ 1 – сравнение с известными типами
Переменная1 = 12;
Если ТипЗнч(Переменная1) = Тип(""Число"") Тогда
//…
ИначеЕсли ТипЗнч(Переменная1) = Тип(""СправочникСсылка.ИмяСправочника"") Тогда
//…
КонецЕсли;

//способ 2 – с помощью готового списка типов
СписокТипов = Новый Массив();
СписокТипов.Добавить(Тип(""СправочникСсылка.Справочник1""));
СписокТипов.Добавить(Тип(""Число""));
Типы = Новый ОписаниеТипов(СписокТипов);
Переменная1 = 12;
Если Типы.СодержитТип(ТипЗнч(Переменная1)) Тогда
//…
КонецЕсли

//способ3 – аналогично 2, но список типов берем у реквизита, определенного для справочника
ЗнчСправочника = Справочники.Справочник1.НайтиПоНаименованию(""Какое-то наименование"");
Переменная1 = 12;
Если ЗнчСправочника.Метаданные().Реквизиты.Реквизит1.Тип.СодержитТип(ТипЗнч(Переменная1)) Тогда
//…
КонецЕсли

//способ 4 – для ссылочных типов – определение имени типа
ЗнчСправочника = 
Справочники.Справочник1.НайтиПоНаименованию(""Какое-то наименование"");
ИмяСправочника = Строка(ТипЗнч(ЗнчСправочника)); //будет равно ""Справочник1""
ИмяСправочника = ЗнчСправочника.Метаданные().Имя; //аналогично
ЭтоСправочник = Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ЗнчСправочника)); //определение, что это справочник"}
},
{2,
{"Преобразование типов",1,0,"",""},
{0,
{"Преобразование простых типов",0,0,"","//Значение простых типов можно преобразовывать с помощью оператора - наименования типа:

//в число
ЗнчЧисло = Число(""22""); //при невозможности преобразовать будет
вызвана ошибка, поэтому лучше использовать обработчик ошибок 
(см. далее)

//в строку
ЗнчСтрока = Строка(22);
ЗнчСтрока = СокрЛП(22);
ЗнчСтрока = Формат(22, ""ЧГ=0"");

//в дату
ЗнчДата = Дата(""20120101120000""); //01.01.2012 12:00:00
ЗнчДата = Дата(2012, 01, 01, 12, 0, 0);
ЗнчДата = Дата(2012, 01, 01);"}
},
{0,
{"Преобразование сложных типов",0,0,"","//создаем список типов, в которые требуется преобразовывать
СписокТипов = Новый Массив();
СписокТипов.Добавить(Тип(""СправочникСсылка.Справочник1""));
Типы = Новый ОписаниеТипов(СписокТипов);

//преобразование
Знч = Типы.ПривестиЗначение(Стр);"}
}
},
{3,
{"Форматирование значений",1,0,"",""},
{0,
{"Формат даты и числа по правилам различных стран",0,0,"","L = КраткоеНаименованиеНужнойСтраны
//> 28.03.2012 14:21:32
Формат( ТекущаяДата(), «L=ru»)
//> 3/28/2012 2:21:24 PM
Формат( ТекущаяДата(), «L=en»)
//> 28/03/2012 14:22:08
Формат( ТекущаяДата(), «L=fr»)
"}
},
{0,
{"Формат даты",0,0,"","ДФ = ""дмг чмс""   

//Расшифровка частей даты:
//    д день
//      o маленькая «д»
//      o может быть указана от 1 до 4 раз
//    М месяц
//      o большая «М»
//      o может быть указана от 1 до 4 раз
//    г год
//      o маленькая «г»
//      o может быть указана 1 или 2 или 4 раза
//    ч часы
//      o маленькая «ч» 12ти часовой формат
//      o большая «Ч» 24х часовой формат
//      o может быть указана 1 или 2 раза
//    м минуты
//      o маленькая «м»
//      o может быть указана 1 или 2 раза
//    с секунды
//      o маленькая «с»
//      o может быть указана 1 или 2 раза
//    вв отображение AM/PM для 12ти часового формата
//    к квартал. 

//> 28.03.2012 02:44:44
Формат(ТекущаяДата(), ""ДФ=""""дд.ММ.гггг чч:мм:сс"""""")
//> 3/28/2012 2:44:44 PM
Формат(ТекущаяДата(), ""ДФ="""" М / д /гггг ч:м:с вв"""""")
//> 28/03/2012 02:44:44
Формат(ТекущаяДата(), ""ДФ=""""дд/ММ/гггг чч:мм:сс"""""")
//> среда, 28 марта 2012
Формат(ТекущаяДата(), ""ДФ=""""дддд, дд ММММ гггг"""""")   

Дата = '20050101200103'; // 01 января 2005 года 20:01:03
 
    // год
    Формат(Дата, ""ДФ=г""); // 5
    Формат(Дата, ""ДФ=гг""); // 05
    Формат(Дата, ""ДФ=гггг""); // 2005
 
    // номер квартала
    Формат(Дата, ""ДФ=к""); // 1
 
    // месяц
    Формат(Дата, ""ДФ=М""); // 1
    Формат(Дата, ""ДФ=ММ""); // 01
    Формат(Дата, ""ДФ=МММ""); // янв.
    Формат(Дата, ""ДФ=ММММ""); // Январь
 
    // день
    Формат(Дата, ""ДФ=д""); // 1
    Формат(Дата, ""ДФ=дд""); // 01
    Формат(Дата, ""ДФ=ддд""); // Сб
    Формат(Дата, ""ДФ=дддд""); // суббота
 
    // час
    Формат(Дата, ""ДФ=ч""); // 8
    Формат(Дата, ""ДФ=чч""); // 08
    Формат(Дата, ""ДФ=Ч""); // 20
    Формат(Дата, ""ДФ=ЧЧ""); // 20
 
    // минута
    Формат(Дата, ""ДФ=м""); // 1
    Формат(Дата, ""ДФ=мм""); // 01
 
    // секунда
    Формат(Дата, ""ДФ=с""); // 3
    Формат(Дата, ""ДФ=сс""); // 03
	
	//локальный формат даты при выводе
	Формат(Дата, ""ДЛФ=Д""); // 01.01.2005
    Формат(Дата, ""ДЛФ=ДД""); // 1 января 2005 г.
    Формат(Дата, ""ДЛФ=В""); // 20:01:03
    Формат(Дата, ""ДЛФ=ДДВ""); // 1 января 2005 г. 20:01:03
    Формат(Дата, ""ДЛФ=ДВ""); // 01.01.2005 20:01:03"}
},
{0,
{"Формат числа",0,0,"","//группировка «ЧГ»
СтрЧисло = Строка(22300500)
//> 22 300 500
Формат(22300500, ""ЧГ=0"")
//>22300500 //вообще убрали нули
Формат(22300500, ""ЧГ=6"")
//> 22 300500 //сделали группировку только миллионов

// оругление  «ЧДЦ»
Формат(3.535353, ""ЧДЦ=""""2"""""")
//> 3,54

//символ-разделитель целой и дробной части «ЧРД» 
Формат(3.535353, ""ЧРД=""""."""""")
//> 3.535353

//вместо числа 0 «ЧН»
Формат(0, ""ЧН=""""<не заполнено>"""""")
//> <не заполнено>

//ЧЦ (ND)     устанавливает общую длину представления числа (целой и дробной частей вместе взятых).
              //При этом исходное число округляется в соответствии с общепринятыми правилами округления (0.5 как 1).
			  //Если этот параметр задан, то для отображения дробной части числа обязательно указание следующего
			  //параметра ЧДЦ, иначе дробная часть отображаться не будет.      
			  ""ЧЦ=15""
//ЧДЦ (NFD)	  устанавливает длину дробной части представления числа. Исходное число округляется 
              //при этом в соответствии с общепринятыми правилами округления (0.5 как 1).		  
			  ""ЧДЦ=2""
			  
//ЧС (NS)	  устанавливает сдвиг разрядов: положительный — деление, отрицательный — умножение. Иными словами, 
              //исходное число будет умножено или поделено на 10 в степени n, где n — значение параметра 

//ЧРД (NDS)	  устанавливает символ-разделитель целой и дробной части
              ""ЧРД=.""

//ЧРГ (NGS)	  устанавливает символ-разделитель триад целой части числа. Если в качестве разделителя использовать пустую строку,
              //то в этом случае разделителем будет символ неразрывного пробела
			  ""ЧРГ=""

//ЧН (NZ)	  устанавливает представление для нулевого значения числа. По умолчанию число 0 представляется в виде пустой строки. 
	          //Если задано только имя параметра, а значение не задано, то число 0 выводится как есть.
			  //Внимание! Для числовых полей ввода этот параметр игнорируется
			  ""ЧН=""
			  
//ЧВН (NLZ)	  определяет вывод лидирующих нулей для числа: если параметр задан, 
              //лидирующие нули выводятся; если не задан — не выводятся	
			  ""ЧВН=""  

//ЧГ (NG)	  определяет порядок группировки разрядов числа.
              //В качестве значения указываются числа, через запятую, 
			  //обозначающие количество группируемых разрядов справа налево. 
			  //Имеют смысл только два первых числа. Первое из них указывает
			  //первичную группировку, которая будет использована для наименее
			  //значимых разрядов целой части числа. Если второе число не указано, 
			  //то будут сгруппированы только наименее значимые разряды. 
			  //Если в качестве второго числа задан 0, то для всех разрядов целой
			  //части числа будет применено значение указанное для первичной группировки. 
			  //Если в качестве второго числа используется значение, отличное от 0, 
			  //то это значение будет использовано для группировки всех разрядов, 
			  //кроме уже сгруппированных наименее значимых.			  
			  ""ЧГ=3,0""
			  
//ЧО (NN)	  определяет код представления отрицательных чисел. Возможные варианты:
              //0	представление отрицательных чисел в скобках: -1 как (1)
              //1	стандартное представление отрицательных чисел: -1 как -1
              //2	стандартное представление отрицательных чисел минус через пробел: -1 как — 1
              //3	представление отрицательных чисел с суффиксом: -1 как 1-
              //4	представление отрицательных чисел с суффиксом через пробел: -1 как 1 —
              ""ЧО=1""
			  
//ЧФ (NF)	  задает шаблон форматирования числа. Позиция исходного числа, отформатированного 
              //с учетом остальных параметров, указывается символом Ч. Остальные символы выводятся как есть.
			  //Символы, находящиеся между двойными или одинарными кавычками выводятся как есть
              ""ЧФ='Ч тыс'""
"}
}
},
{0,
{"Определение типа и сравнение типов",0,0,"","Если ТипЗнч(Переменная) = Тип(""ИмяТипа"") Тогда
	// пишем тут 
КонецЕсли	 

//Базовые типы
Если ТипЗнч(Знч) = Тип(""Число"") Тогда
ИначеЕсли Знч = Тип(""Строка"") Тогда
ИначеЕсли Знч = Тип(""Дата"") Тогда
ИначеЕсли Знч = Тип(""Булево"") Тогда
КонецЕсли; 
//Типы базы данных
Знч = Справочники.Организации.ПустаяСсылка();
Если ТипЗнч(Знч) = Тип(""СправочникСсылка.Организации"") Тогда
ИначеЕсли Знч = Тип(""СправочникОбъект.Организации"") Тогда
ИначеЕсли ТипЗнч(Знч) = Тип(""ДокументСсылка.ПоступлениеТоваров"") Тогда
ИначеЕсли Знч = Тип(""ДокументОбъект.ПоступлениеТоваров"") Тогда
КонецЕсли;

Если ТипЗнч(Знч) = Тип(""РегистрСведенийСписок.ИмяРегистра"") Тогда
ИначеЕсли Знч = Тип(""РегистрНакопленияНаборЗаписей.ИмяРегистра"") Тогда
КонецЕсли 
//Типы 1С
Если ТипЗнч(Знч) = Тип(""Массив"") Тогда
ИначеЕсли Знч = Тип(""СписокЗначений"") Тогда
КонецЕсли;
"}
},
{0,
{"Определение значения ссылочного типа",0,0,"","Значение = Справочники.Организации.ПустаяСсылка();
Если Справочники.ТипВсеСсылки().Содержит(ТипЗнч(Значение)) Тогда
//это справочник
ИначеЕсли Документы.ТипВсеСсылки().Содержит( ТипЗнч(Значение)) Тогда
//это документ
КонецЕсли;"}
},
{2,
{"Работа с типами в запросе",1,0,"",""},
{0,
{"Способ1",0,0,""," ""ВЫБРАТЬ
| ВЫБОР
| КОГДА ТИПЗНАЧЕНИЯ(Организация) = ТИП(Справочник.Организации)
| ТОГДА Организация
| ИНАЧЕ NULL
| КОНЕЦ КАК Организация
|ИЗ
| Документ.ПоступлениеТоваров КАК ПоступлениеТоваров"""}
},
{0,
{"Способ2",0,0,"","""ВЫБРАТЬ
| ВЫБОР
| КОГДА Организация ССЫЛКА Справочник.Организации
| ТОГДА Организация
| ИНАЧЕ NULL
| КОНЕЦ КАК Организация
|ИЗ
| Документ.ПоступлениеТоваров КАК ПоступлениеТоваров"""}
}
}
},
{6,
{"Хранилище значений",1,0,"",""},
{0,
{"Пример работы с Хранилищем значений",0,0,"","//Создаем значение
Знч = Новый ТаблицаЗначений(); 
//Помещаем значение в хранилище значений:
Хранилище = Новый ХранилищеЗначения(Знч, Новый СжатиеДанных(9));     
// 9 - степень сжатия, это мах - значение 
// сохраняем значение в БД
СправочникСсылка = Справочники.Хранилище.СоздатьЭлемент();
СправочникСсылка.ХранилищеЗначения = Хранилище;
СправочникСсылка.Записать();

//Пример с сохранением файла в БД
Настройки = Новый Структура();
Настройки.Вставить(""ПоУмолчанию"", Истина);
Настройки.Вставить(""Наименование"", ""Наименование1"");
Хранилище = Новый ХранилищеЗначения(Настройки, Новый 
СжатиеДанных(9));
ЗначениеВФайл(""C:\"", Хранилище);

//Пример – сохранение значения из файла://Значение - картинка из файла
Файл = Новый Картинка(""C:\ФайлКартинки.jpg"");
Хранилище = Новый ХранилищеЗначения(Файл, Новый 
СжатиеДанных(9));
//Значение - произвольный файл
Файл = Новый ДвоичныеДанные(""C:\ИсполняемыйФайл.exe"");
Хранилище = Новый ХранилищеЗначения(Файл, Новый 
СжатиеДанных(9));
//Значение - текстовый файл
Файл = Новый ЧтениеТекста(""C:\ТекстовыйФайл.txt"");
ТекстовыеДанные = Файл.Прочитать();
Хранилище = Новый ХранилищеЗначения(ТекстовыеДанные, Новый 
СжатиеДанных(9));

//Распаковка значений из хранилища значений
Знч = Хранилище.Получить();
Если Знч = Неопределено Тогда
Сообщить(""Ошибка получения значения из хранилища"");
КонецЕсли"}
},
{7,
{"Сохранение в Хранилище Значений",1,0,"",""},
{0,
{"Таблица значений",0,0,"","// *** 1.Пример (Таблица значений):
   ЗначенияТЗ = Новый ТаблицаЗначений(); // Создание значения ""ТЗ""

   // Вставка в хранилище значений
   Хранилище_Зн = Новый ХранилищеЗначения(ЗначенияТЗ, Новый СжатиеДанных(9));// ""9"" - макс.степень сжатия

   // Сохранение значения в реквизит объекта конфигурации (тип: ХранилищеЗначения)
   СправочникСтранаСсылка = Справочники.Страны.НайтиПоНаименованию(""Испания"");
   Если Не СправочникСтранаСсылка.Пустая() Тогда
       // Изменим и запишем численность жителей в стране
       СтранаИспания = СправочникСтранаСсылка.ПолучитьОбъект();
       СтранаИспания.ХранилищеЗначения = Хранилище_Зн;
       СтранаИспания.Записать();
   КонецЕсли;"}
},
{0,
{"Табличный документ",0,0,"","   // *** 2.Пример (Табличный документ):
   ЗначенияТабДок=Новый ТабличныйДокумент;
   ЗначенияТабДок.Вывести(ЭлементыФормы.ПолеТабличногоДокумента1);
   Хранилище_ТабДок=Новый ХранилищеЗначения(ЗначенияТабДок);"}
},
{0,
{"Структура",0,0,"","// *** 3.Пример (Структура):
   ЗначенияСтр = Новый Структура(); // Создание значения ""Структура""
   ЗначенияСтр.Вставить(""Код"", ""34"");
   ЗначенияСтр.Вставить(""Наименование"", ""Испания"");
   ЗначенияСтр.Вставить(""Описание"", ""Европейская страна, расположенная на Пиренейском полуострове"");
   ЗначенияСтр.Вставить(""Население"", 46600000);
   // Вставка в хранилище значений
   Хранилище_Стр = Новый ХранилищеЗначения(ЗначенияСтр, Новый СжатиеДанных(9));// ""9"" - макс.степень сжатия
   ЗначениеВФайл(""D:\import\"", Хранилище_Стр); // Сохранение значения в файл"}
},
{0,
{"Любой файл",0,0,"","// *** 4.Пример (Любой файл) :
   ФайлДвоичныеДанные = Новый ДвоичныеДанные(""D:\import\КлиентБанк_РБ.exe"");
   Хранилище_Файл = Новый ХранилищеЗначения(ФайлДвоичныеДанные, Новый СжатиеДанных(0));// ""0"" - без сжатия"}
},
{0,
{"Файл картинка",0,0,""," // 5.Пример (Файл картинка) :
   ФайлФото = Новый Картинка(""D:\import\ФотоСотрудника.png"");
   Хранилище_Фото = Новый ХранилищеЗначения(ФайлФото, Новый СжатиеДанных(5));// ""5"" - средн.степень сжатия
"}
},
{0,
{"Текстовый файл",0,0,"","// *** 6.Пример (Текстовый файл) :
   ФайлТекст = Новый ЧтениеТекста(""D:\import\Война_и_мир.txt"");
   ТекстИзФайла = ФайлТекст.Прочитать();
   Хранилище_Текст = Новый ХранилищеЗначения(ТекстИзФайла, Новый СжатиеДанных(1));// ""1"" - мин.степень сжатия"}
},
{0,
{"Отчет/обработка 1С",0,0,"","// *** 7.Пример (Отчет/обработка 1С) :
   Хранилище_Epf = Новый ХранилищеЗначения(Новый ДвоичныеДанные(""D:\import\Otchet_realizacija_2020.epf"", СтепеньСжатия));
"}
}
},
{1,
{"Восстановление из Хранилище Значений",1,0,"",""},
{0,
{"Процедура ВосстановлениеИзХранилищеЗначений()",0,0,"","&НаСервере
Процедура ВосстановлениеИзХранилищеЗначений();

    ИмяФайла = ""D:\import\Война_и_мир.txt"";

    // Двоичные данные можно восстановить из хранилища значения методом Получить и записать в файл методом Записать()
    Если ТипЗнч(РеквизитХранилище) = Тип(""ДвоичныеДанные"") Тогда

        // Хранилище.Получить()<>Неопределено Тогда // Процедура извлекает данные из хранилища (требует времени)
        // Для больших объемов данных рекомендуется использовать доп.реквизит (Например: Булево) Содержит данные - Истина
        ДанныеХранилища = РеквизитХранилище.Получить();
        Если ДанныеХранилища = Неопределено Тогда
            Сообщить(""Ошибка получения данных из хранилища значений 1С"");
        КонецЕсли;
        ДанныеХранилища.Записать(ИмяФайла); // Записываем восстановленые данные в файл

        // Восстановление Табличного документа
        ЭлементыФормы.ПолеТабличногоДокумента1.Вывести(ДанныеХранилища);

        // Восстановление и запуск Отчета/обработки 1С
        ИмяФайла_Epf = ""D:\import\Otchet_realizacija_2020.epf"";
        ДвоичныеДанные = РеквизитХранилище.Получить();
        ДвоичныеДанные.Записать(ИмяФайла_Epf);
        Epf = ВнешниеОбработки.Создать(ИмяФайла_Epf);
        Epf.ПолучитьФорму().Открыть();

    Иначе
        ДанныеХранилища = РеквизитХранилище;
    КонецЕсли;

    // Файлы зарегистрированного типа (doc, xls, pdf, jpg, txt, exe...)
    ЗапуститьПриложение(ИмяФайла);

КонецПроцедуры"}
}
},
{0,
{"Очистка реквизита Хранилище Значений",0,0,"","&НаКлиенте
Процедура ОчисткаРеквизитаХранилищеЗначений();

    РеквизитХранилище = Неопределено;

КонецПроцедуры"}
},
{0,
{"Проверка значения Хранилище Значений",0,0,"","&НаКлиенте
Процедура ПроверкаЗначенияХранилищеЗначений();

    Значение = РеквизитХранилище.Получить();
    Если Значение <> Неопределено Тогда
        Если ТипЗнч(Значение) = Тип(""Строка"") Тогда
            Сообщить(""Это строка"");
        ИначеЕсли ТипЗнч(Значение) = Тип(""Картинка"") Тогда
            Сообщить(""Это фотография (картинка)"");
        КонецЕсли;
    КонецЕсли;

КонецПроцедуры"}
},
{2,
{"Готовые Решения",1,0,"",""},
{0,
{"Загрузка файла (скан подписи/печати для документов) в хранилище значения",0,0,"","&НаКлиенте
Процедура ЗагрузитьФайлСПодписью(Команда) // кнопка на форме

    ФильтрФорматов =
   ""Все картинки (*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf)|""
    +""*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf|""
    + ""Формат PNG (*.png)|*.png|""
    + ""Формат JPEG (*.jpg;*.jpeg)|*.jpg;*.jpeg|""
    + ""Формат GIF (*.gif)|*.gif|""
    + ""Формат TIFF (*.tif)|*.tif|""
    + ""Формат BMP (*.bmp;*.dib;*.rle)|*.bmp;*.dib;*.rle|""
    + ""Формат ICON (*.ico)|*.ico|""
    + ""Формат метафайл (*.wmf;*.emf)|*.wmf;*.emf|"";

    ПараметрыДиалога = Новый ПараметрыДиалогаПомещенияФайлов(""Выберите картинку с подписью"", Ложь, ФильтрФорматов);

    ОписаниеОповещения = Новый ОписаниеОповещения(""ПослеЗакрытияДиалогаВыбораПодписи"", ЭтаФорма);
    // Описание оповещение будет вызвана после помещения файла во временное хранилище

    НачатьПомещениеФайлаНаСервер(ОписаниеОповещения,,,, ПараметрыДиалога, УникальныйИдентификатор); // c 8.3.15
    // Асинх.метод НачатьПомещениеФайлаНаСервер() возвращает результат и доп.параметры.
    // Результат - переменная (с типом ОписаниеФайла)
    // Доп.параметры - в примере пустые

КонецПроцедуры

 &НаКлиенте
Процедура ПослеЗакрытияДиалогаВыбораПодписи(ОписаниеФайла, ДопПараметры) Экспорт

    Если ОписаниеФайла.ПомещениеФайлаОтменено Тогда
        Возврат;
    КонецЕсли;

    АдресХранилища = ОписаниеФайла.Адрес; // АдресХранилища - реквизит формы

КонецПроцедуры

 &НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

    // Получаем файл из временного хранилища и кладём его в реквизит (с типом ХранилищеЗначения)
    Если ЭтоАдресВременногоХранилища(АдресХранилища) Тогда // АдресХранилища - реквизит формы
        ТекущийОбъект.Подпись = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресХранилища));
    КонецЕсли;

КонецПроцедуры"}
},
{0,
{"Замена файла в хранилище значения",0,0,"","&НаСервере
Процедура ЗаменаФайлаВХранилище() Экспорт

    НазваниеФайла = ""Война_и_мир"";
    ИмяФайла = ""D:\import\""+НазваниеФайла+"".txt"";

    Хранилище_Файл = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ИмяФайла));

    Текущая_книга = Справочники.Книги.НайтиПоНаименованию(НазваниеФайла);
    Если Текущая_книга.Пустая() Тогда
         Сообщить(""Книга ""+НазваниеФайла+"" в базе данных 1С не найдена!"");
    Иначе // Найдена - меняем!
        Справочник_Книга = Текущая_книга.ПолучитьОбъект();
        Справочник_Книга.Хранилище = Хранилище_Файл;
        Справочник_Книга.Записать();
    КонецЕсли;

КонецПроцедуры"}
}
}
},
{2,
{"Метаданные",1,0,"",""},
{7,
{"Метаданные конфигурации",1,0,"",""},
{0,
{"Пример Выбор всех документов в список значений",0,0,"","спДокументовКонфигурации = Новый СписокЗначений(); //сюда будем сохранять список
//Метаданные - глобальная переменная, которая дает доступ ко всем метаданным конфигурации
//Метаданные.Документы - коллекция документов конфигурации
Для каждого Документ из Метаданные.Документы Цикл
   //Документ - это метаданные документа (каждого, так как мы обходим их в цикле)
   //.Имя - наименование документа так, как оно задано в конфигурации
   //.Синоним - ""человеческое"" наименование документа, которое отображается пользователю
   //список значений может хранить значение (имя документа) и ""представление для пользователя"" (как раз - синоним документа) 
   спДокументовКонфигурации.Добавить( Документ.Имя, Документ.Синоним );
КонецЦикла;
//даем возможность пользователю выбрать из списка нужный документ
элДокумент = спДокументовКонфигурации.ВыбратьЭлемент();
//если пользователь нажал ""Отмена"", то результатом выбора будет значение НЕОПРЕДЕЛЕНО, иначе результатом будет - выбранный элемент
Если элДокумент <> Неопределено Тогда
    //в .Значение списка значений мы записывали имя документа ""как в конфигурации""
	//создадим новый документ с таким именем, напомним - к документам можно обращаться Документы.ИмяДокумента или Документы[ИмяДокумента]
   обДокумент = Документы[элДокумент.Значение].СоздатьДокумент();
   //ДокументОбъект.ПолучитьФорму() - возвращает форму с указанным именем, а если имя не указано - то форму ""поумолчанию""
   обДокумент.ПолучитьФорму().Открыть();
КонецЕсли;"}
},
{0,
{"Список всех документов через запрос",0,0,"","ТекстЗапроса = """";
Для каждого Документ из Метаданные.Документы Цикл
//несколько запросов объединяются друг с другом строкой ""ОБЪЕДИНИТЬ ВСЕ""
//если это не первая итерация цикла, то нужно добавить объединение запросов
   Если не ПустаяСтрока(ТекстЗапроса) Тогда
        ТекстЗапроса = ТекстЗапроса + ""
        |
        | ОБЪЕДИНИТЬ ВСЕ
        | "";
	КонецЕсли;
	
//добавляем имя документа
//вид документа - добавляем строкой, выведем пользователю синоним метаданных
//момент времени - используем для сортировки документов (подробнее см. ""Момент времени"")
//ссылка - для обращения потом к документу
//ограничим по периоду, так как если много документов - получение списка может занять слишком много ресурсов
//обратите внимание - если в конфигурации много видов документов, то запрос работать не будет - так как существует 
//ограничение на кол-во таблиц в одном запросе
//в этом случае нужно прописать разбиение запроса на пакеты по N документов и объединение результатов серии запросов в одной таблице	
    ТекстЗапроса = ТекстЗапроса + ""
    |ВЫБРАТЬ
    | """""" + Документ.Синоним + """""" КАК ВидДокумента,
    | Дата,
    | Номер,
    | МоментВремени,
    | Ссылка
    |ИЗ
    | Документ."" + Документ.Имя + ""
    |ГДЕ
    | Дата между &НачалоПериода И &ОкончаниеПериода"";
КонецЦикла;	

//добавим сортировку
ТекстЗапроса = ТекстЗапроса + ""
       |УПОРЯДОЧИТЬ ПО 
       | МоментВремени"";
Запрос = Новый Запрос(ТекстЗапроса);
//параметры запроса - период - текущий месяц
Запрос.УстановитьПараметр(""НачалоПериода"", НачалоМесяца(ТекущаяДата()));
Запрос.УстановитьПараметр(""ОкончаниеПериода"", КонецМесяца(ТекущаяДата()));
//в нашем примере просто покажем результат пользователю
//аккуратно - если в базе много документов, то показ результатов займет много времени
Запрос.Выполнить().Выгрузить().ВыбратьСтроку(); 
"}
},
{0,
{"Получить метаданные объекта",0,0,"","// Получение метаданных объекта
Процедура ПолучитьМетаданныеОбъекта(Объект)
    // Создаем ссылку на метаданные объекта
    СсылкаНаМетаданные = Метаданные.НайтиПоТипу(Объект);
    
    // Проверяем, найдены ли метаданные
    Если СсылкаНаМетаданные <> Неопределено Тогда
        // Выводим название объекта
        Сообщить(""Название объекта: "" + СсылкаНаМетаданные.Название);
        
        // Выводим описание объекта
        Сообщить(""Описание объекта: "" + СсылкаНаМетаданные.Описание);
        
        // Выводим список полей объекта
        Сообщить(""Список полей объекта:"");
        Для Каждого Поле Из СсылкаНаМетаданные.Реквизиты Цикл
            Сообщить(Поле.Название);
        КонецЦикла;
    Иначе
        Сообщить(""Метаданные объекта не найдены"");
    КонецЕсли;
КонецПроцедуры"}
},
{0,
{"Структура метаданных конфигурации (пример оформления интерфейса обработки с использованием макета)",0,0,"","//В данном примере создается форма МояОбработкаФорма, которая содержит макет.
//В макет добавляются элементы, такие как текстовый объект ТекстМетаданных, 
//который будет выводить структуру метаданных конфигурации, и кнопка КнопкаЗакрыть для закрытия формы. 
//После добавления элементов в макет, форма открывается модально с помощью метода ОткрытьМодально().
Форма = Новый Форма(""МояОбработкаФорма"");
Форма.Текст = ""Структура метаданных конфигурации"";
Форма.Размеры = Новый Размеры(400, 300);
Форма.Макет = Новый Макет();
Форма.Макет.РасположениеЭлементов = РасположениеЭлементов.Вертикаль;
Форма.Макет.Отступ = 10;

// Добавление элементов в макет
ТекстМетаданных = Новый Текст(""ТекстМетаданных"");
ТекстМетаданных.Текст = ""Здесь будет выводиться структура метаданных конфигурации"";
ТекстМетаданных.АвтоРазмер = Истина;
Форма.Макет.Добавить(ТекстМетаданных);

КнопкаЗакрыть = Новый Кнопка(""КнопкаЗакрыть"");
КнопкаЗакрыть.Текст = ""Закрыть"";
КнопкаЗакрыть.АвтоРазмер = Истина;
КнопкаЗакрыть.ОбработчикНажатия = Процедура()
    Форма.Закрыть();
КонецПроцедуры;
Форма.Макет.Добавить(КнопкаЗакрыть);

Форма.ОткрытьМодально();"}
},
{0,
{"Вывести структуру метаданных спомощью запроса",0,0,"","Процедура ВывестиСтруктуруМетаданных()
    Запрос = Новый Запрос;
    Запрос.Текст = ""
    |    ВЫБРАТЬ
    |        КлассыМетаданных.Имя,
    |        КлассыМетаданных.Наименование,
    |        КлассыМетаданных.Родитель,
    |        КлассыМетаданных.Вид
    |    ИЗ
    |        ИнформационнаяБаза.Метаданные.КлассыМетаданных КАК КлассыМетаданных
    |    ГДЕ
    |        НЕ КлассыМетаданных.ПометкаУдаления
    |    УПОРЯДОЧИТЬ ПО
    |        КлассыМетаданных.Имя"";
    
    Результат = Запрос.Выполнить();
    
    Если Результат.Пустой() Тогда
        Сообщить(""Структура метаданных пуста"");
    Иначе
        Пока Результат.Следующий() Цикл
            Сообщить(Результат.Имя + "", "" + Результат.Наименование + "", "" + Результат.Родитель + "", "" + Результат.Вид);
        КонецЦикла;
    КонецЕсли;
КонецПроцедуры"}
},
{0,
{"Вывести структуру метаданных спомощью запроса(2)",0,0,"","//В данном примере мы создаем запрос, который выбирает все объекты метаданных типа ""Объект"". 
//Затем мы проходим по результатам запроса и выводим информацию о каждом объекте. 
//Для каждого объекта мы также вызываем функцию `ПолучитьСтруктуруРеквизитов`, 
//которая возвращает структуру реквизитов объекта. Затем мы выводим информацию о каждом реквизите.

Процедура ВывестиСтруктуруМетаданных()
    Запрос = Новый Запрос;
    Запрос.Текст = ""
       | ВЫБРАТЬ
       |     Метаданные.Ссылка КАК Ссылка,
       |     Метаданные.Имя КАК Имя,
       |     Метаданные.Тип.Имя КАК Тип
       | ИЗ
       |     Метаданные.Объекты КАК Метаданные
       | ГДЕ
       |     Метаданные.Тип.Имя = 'Объект'"";
    Результат = Запрос.Выполнить();
    
    Если Результат.Пустой() Тогда
        Сообщить(""Не найдены метаданные объектов"");
    Иначе
        Пока Результат.Следующий() Цикл
            Ссылка = Результат.Ссылка;
            Имя = Результат.Имя;
            Тип = Результат.Тип;
            
            Сообщить(""Объект: "" + Имя + "", Тип: "" + Тип);
            
            // Получение структуры реквизитов объекта
            СтруктураРеквизитов = ПолучитьСтруктуруРеквизитов(Ссылка);
            
            // Вывод структуры реквизитов
            Для Каждого Реквизит Из СтруктураРеквизитов Цикл
                Сообщить(""Реквизит: "" + Реквизит.Имя + "", Тип: "" + Реквизит.Тип);
            КонецЦикла;
        КонецЕсли;
    КонецПроцедуры

Функция ПолучитьСтруктуруРеквизитов(Ссылка) Экспорт
    СтруктураРеквизитов = Новый Структура;
    Метаданные = Метаданные.НайтиПоСсылке(Ссылка);
    
    Если Метаданные <> Неопределено Тогда
        Для Каждого Реквизит Из Метаданные.Реквизиты Цикл
            СтруктураРеквизитов.Вставить(Реквизит.Имя, Реквизит.Тип.Имя);
        КонецЦикла;
    КонецЕсли;
    
    Возврат СтруктураРеквизитов;
КонецФункции"}
},
{0,
{"Очищение Реквезитов и Табличных частей объектов",0,0,"","Для Каждого Реквизит Из Контрагент. Метаданные().Реквизиты Цикл
    Контрагент[ Реквизит. Имя] = Неопределено ;
КонецЦикла ;
Для Каждого ТаблЧасть Из Контрагент. Метаданные().ТабличныеЧасти Цикл
    Контрагент[ТаблЧасть.Имя].Очистить();
КонецЦикла ;

Контрагент.Записать() ;"}
}
},
{1,
{"Метаданные объекта",1,0,"",""},
{0,
{"проверка на наличие реквизитов с типом «Справочник.Организация» в документе и обнуление значения этих реквизитов",0,0,"","//ДокументОбъект - документ, полученный на изменение или 
создание
//аналогичным образом можно работать со ссылками, например: 
ДокументСсылка = 
Документ.ИмяДокумента.ПустаяСсылка().Метаданные()
ДокументОбъект = Документы.ПоступлениеТоваров.СоздатьДокумент();
//цикл по реквизитам
Для каждого Реквизит из ДокументОбъект.Метаданные().Реквизиты Цикл
    //у каждого реквизита может быть как один, так и несколько типов, подробнее см. ""ОписаниеТипов""
    мТипов = Реквизит.Тип.Типы();
   //проверяем по каждому типу - тот ли это нужный нам?
   Для каждого Тип из мТипов Цикл
      Если Тип = Тип(""СправочникСсылка.Организации"") Тогда
         //обнуляем реквизит с этим именем в документе
         //для ""обнуления"" можно приравнивать его к Неопределено, 
         //по факту значение будет установлено не Неопределено, а ""пустое значение"" типа реквизита 
         //Неопределено только если у реквизита несколько типов
         ДокументОбъект[Реквизит.Имя] = Неопределено;
      КонецЕсли;
   КонецЦикла;
КонецЦикла;
//цикл по табличным частям
Для каждого ТабЧасть из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл
     //в табличной части тоже реквизиты (колонки таб.части)
     Для каждого Реквизит из ТабЧасть.Реквизиты Цикл
        //здесь аналогично
        мТипов = Реквизит.Тип.Типы();
        Для каждого Тип из мТипов Цикл
           Если Тип = Тип(""СправочникСсылка.Организации"") Тогда
               //так как это таб.часть, то мы должны пройтись по всем строкам этой тач. части
               Для каждого Строка из ДокументОбъект[ТабЧасть.Имя] Цикл
                   Строка[Реквизит.Имя] = Неопределено;
               КонецЦикла;
           КонецЕсли;
        КонецЦикла;
     КонецЦикла;
КонецЦикла"}
}
}
},
{6,
{"Запросы",1,0,"",""},
{0,
{"Преобразование выборки запроса в структуру",0,0,"",""}
},
{0,
{"Ст_ЗапросыКонкатенация",0,0,""," Разделитель =
""
|;
|/////////////////////////////////////////////////////////////
|"";

ТекстыЗапросовПакета = Новый Массив;

ТекстЗапроса =
""ВЫБРАТЬ
| Упаковки.Ссылка КАК Ссылка
|ИЗ
| Справочник.Упаковки КАК Упаковки"";

ТекстыЗапросовПакета.Добавить(ТекстЗапроса);

ТекстЗапроса =
""ВЫБРАТЬ
| Номенклатура.Ссылка КАК Ссылка
|ИЗ
| Справочник.Номенклатура КАК Номенклатура"";

ТекстыЗапросовПакета.Добавить(ТекстЗапроса);
ТекстЗапроса = СтрСоединить(ТекстыЗапросовПакета, Разделитель);"}
},
{0,
{"Ст_ЗапросыРазыменнованныеПолей",0,0,""," Запрос.Текст = ""ВЫБРАТЬ РАЗРЕШЕННЫЕ
|	ВЫБОР
|		КОГДА Продажи.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
|			ТОГДА ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.РеализацияТоваровУслуг).Номер
|		КОГДА Продажи.Регистратор ССЫЛКА Документ.ЗаказКлиента
|			ТОГДА ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.ЗаказКлиента).Номер
|	КОНЕЦ КАК Номер,
|	ВЫБОР
|		КОГДА Продажи.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
|			ТОГДА ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.РеализацияТоваровУслуг).Дата
|		КОГДА Продажи.Регистратор ССЫЛКА Документ.ЗаказКлиента
|			ТОГДА ВЫРАЗИТЬ(Продажи.Регистратор КАК Документ.ЗаказКлиента).Дата
|	КОНЕЦ КАК Дата,
|	Продажи.ВРезерве КАК ВРезерве,
|	Продажи.КОтгрузке КАК КОтгрузке
|ИЗ
|	РегистрНакопления.ТоварыКОтгрузке КАК Продажи
|ГДЕ
|	(Продажи.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
|			ИЛИ Продажи.Регистратор ССЫЛКА Документ.ЗаказКлиента)"";"}
},
{0,
{"Условия сравнения и проверки в Запросах. Отбор не заполненного значения",0,0,"","Запрос.Текст =
    ""ВЫБРАТЬ 
    |    усЕдиницыХранения.Ссылка
    |ИЗ
    |    Справочник.усЕдиницыХранения КАК усЕдиницыХранения""

    // Пример 1. сравнение с не заполненным булевым значением:
    |ГДЕ
    |     усЕдиницыХранения.РазрешитьОтборИзРезервнойЗоны = Ложь

    // Пример 2. но если это булево определено, то лучше так: // условие на отрицательное булево:
    |ГДЕ
    |     НЕ усЕдиницыХранения.РазрешитьОтборИзРезервнойЗоны

    // Пример 3. выборка по условию не заполненного поля, имеющего тип ""справочник конкретного типа""
    |ГДЕ
    |    усЕдиницыХранения.АктивнаяОбластьОтбора = ЗНАЧЕНИЕ(Справочник.усОбластиОтбора.ПустаяСсылка)

    // Пример 3а. выборка по условию не заполненного поля, имеющего тип ""документ конкретного типа""
    |ГДЕ
    |    НашРегистрСведений.Документ = ЗНАЧЕНИЕ(Документ.НашДокумент.ПустаяСсылка)

    // Пример 3б. выборка по условию не заполненного поля, имеющего тип ""документы разных типов"" (составное поле)
    |ГДЕ
    |    (НашРегистрСведений.Документ = ЗНАЧЕНИЕ(Документ.НашДокумент1.ПустаяСсылка)
    |    ИЛИ НашРегистрСведений.Документ = ЗНАЧЕНИЕ(Документ.НашДокумент2.ПустаяСсылка)
    |    ИЛИ ...(и т.д. - последовательно перечисляем условия для всех возможных типов этого составного поля))

    // Пример 4. или наоборот, если нужно выбрать заполненное значение типа ""строка"", то поможет условие:
    |ГДЕ
    |    усЕдиницыХранения.Наименование > """"""""

    // Пример 5. если нужно выбрать документы конкретного типа, при составном типе данных, например в регистре ""ВыполняемыеЗадания"" ресурс ""Задание"" имеет составной тип, среди значений которого возможен документ ""Отбор""
    |ГДЕ
    |    ВЫРАЗИТЬ(РегистрСведенийВыполняемыеЗадания.Задание КАК Документ.Отбор) ССЫЛКА Документ.Отбор

    // Пример 5а. Еще аналогичный пример, когда нужно выбрать документы конкретного типа
    |	ВЫБОР
    |		КОГДА ВЫРАЗИТЬ(агСоответствиеДокументов.ДокументБУ КАК Документ.ПоступлениеТоваровУслуг) ССЫЛКА Документ.ПоступлениеТоваровУслуг
    |			ТОГДА """"ПоступлениеТоваровУслуг""""
    |		КОГДА ВЫРАЗИТЬ(агСоответствиеДокументов.ДокументБУ КАК Документ.РеализацияТоваровУслуг) ССЫЛКА Документ.РеализацияТоваровУслуг
    |			ТОГДА """"РеализацияТоваровУслуг""""
    |		ИНАЧЕ """"""""
    |	КОНЕЦ КАК ВидДокумента

    // Пример 6. выбор по условию не определенного значения:
    |ГДЕ
    |    СохраненныеНастройки.Пользователь = НЕОПРЕДЕЛЕНО

    // Пример 7. выбор по виду движения ""Приход"" регистра накопления, ""Расход"" - аналогично):
    |ГДЕ
    |    РегТоварыВРознице.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)

    // Пример 8. Как в запросе указать, что выполнять запрос не нужно (например, нужно программно в зависимости от какого-то
    // условия вернуть пустой результат запроса - 
    // Запрос.Текст = СтрЗаменить(Запрос.Текст, ""ГДЕ Док.Ссылка = &ДокументСсылка"", ""ГДЕ ЛОЖЬ"");).
    // Для этого достаточно добавить условие ""Где Ложь"".
    // Кстати, независимо от объема запрашиваемых в выборке данных, такой запрос будет выполнен мгновенно.
    |ГДЕ ЛОЖЬ

    // Пример 9. Проверка на то, что результат выполнения запроса содержит данные:
    Если НЕ Запрос.Выполнить().Пустой() Тогда

    // Пример 10. выбор по условию не заполненной даты:
    |ГДЕ
    |    тбСтроки.ДатаОтмены = ДАТАВРЕМЯ(1, 1, 1)   "}
},
{0,
{"Сравнение двух таблиц в запросе",0,0,"","""ВЫБРАТЬ
|	Т1.Номенклатура КАК Номенклатура,
|	Т1.Характеристика КАК Характеристика,
|	Т1.Количество КАК Количество
|ИЗ
|	Таблица1 КАК Т1
|		ЛЕВОЕ СОЕДИНЕНИЕ Таблица2 КАК Т2
|		ПО Т1.Номенклатура = Т2.Номенклатура
|			И Т1.Характеристика = Т2.Характеристика
|ГДЕ
|	Т2.Количество ЕСТЬ NULL
|
|ОБЪЕДИНИТЬ ВСЕ
|
|ВЫБРАТЬ
|	Т2.Номенклатура,
|	Т2.Характеристика,
|	Т2.Количество
|ИЗ
|	Таблица2 КАК Т2
|		ЛЕВОЕ СОЕДИНЕНИЕ Таблица1 КАК Т1
|		ПО Т2.Номенклатура = Т1.Номенклатура
|			И Т2.Характеристика = Т1.Характеристика
|ГДЕ
|	Т1.Количество ЕСТЬ NULL
|
|ОБЪЕДИНИТЬ ВСЕ
|
|ВЫБРАТЬ
|	Т1.Номенклатура,
|	Т1.Характеристика,
|	Т1.Количество - Т2.Количество
|ИЗ
|	Таблица1 КАК Т1
|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Таблица2 КАК Т2
|		ПО Т1.Номенклатура = Т2.Номенклатура
|			И Т1.Характеристика = Т2.Характеристика"""}
},
{4,
{"синтаксис оператора проверки совпадений",1,0,"",""},
{0,
{"Форма оператора В для проверки совпадения с одним из перечисленных <Выражение> [НЕ] В  ( <Список значений> | <Массив значений> ) ",0,0,"","  ""Выбрать
  | 	Справочник.Номенклатура.Наименование
  |	Где
  | 	Справочник.Номенклатура.Родитель.Наименование
  | 		В (""""Бытовая техника"""",""""Оргтехника"""")""
  
"}
},
{0,
{"Форма оператора В для проверки принадлежности по иерархии <Выражение> [НЕ] В ИЕРАРХИИ  ( <Выражение> | <Список значений> | <Массив значений> )",0,0,"","// В качестве параметра Группа в запрос передается ссылка
// на какую-либо группу справочника Номенклатура.
""Выбрать
|   Справочник.Номенклатура.Наименование
|Где
|   Справочник.Номенклатура.Ссылка В ИЕРАРХИИ (&Группа)""  

//еще пример

""Выбрать
|   Справочник.Номенклатура.Наименование
|Где
|   Справочник.Номенклатура.Ссылка В ИЕРАРХИИ
|   (
|      ВЫБРАТЬ
|         Справочник.Номенклатура.Ссылка
|      ГДЕ
|         Справочник.Номенклатура.Наименование = """"Одежда"""")""
"}
},
{0,
{"Форма оператора В для проверки совпадения значения с одним из результата запроса <Выражение> [НЕ] В [ИЕРАРХИИ] ( <Описание запроса> )",0,0,"","// Выбрать названия товаров, которые присутствовали в расходных накладных
""ВЫБРАТЬ
|   Товары.Наименование
|ИЗ
|   Справочник.Товары КАК Товары
|ГДЕ
|   Товары.Ссылка В
|     (
|      ВЫБРАТЬ
|         РасхНаклСостав.Товар
|      ИЗ
|         Документ.РасхНакл.Состав КАК РасхНаклСостав
|     )""  

// еще пример

// Выбрать названия товаров, которые присутствовали в расходных накладных
""ВЫБРАТЬ
|   Товары.Наименование
|ИЗ
|   Справочник.Товары КАК Товары
|ГДЕ
|   Товары.Ссылка НЕ В
|     (
|      ВЫБРАТЬ
|         РасхНаклСостав.Товар
|      ИЗ
|         Документ.РасхНакл.Состав КАК РасхНаклСостав
|     )""

// еще пример 
// Выбрать названия товаров, которые присутствовали в расходных накладных
""ВЫБРАТЬ
|   Товары.Наименование
|ИЗ
|   Справочник.Товары КАК Товары
|ГДЕ
|   Товары.Ссылка В
|     (
|      ВЫБРАТЬ
|         РасхНаклСостав.Товар
|      ИЗ
|         Документ.РасхНакл.Состав КАК РасхНаклСостав
|      ГДЕ
|         РасхНаклСостав.Товар = Товары.Ссылка
|     )"""}
},
{0,
{"(<Выражение>[, <Выражение> [, …]]) [НЕ] В  ( <Описание запроса> )",0,0,"","//Поиск дублей элементов справочника по набору полей
""ВЫБРАТЬ
|    Номенклатура.Ссылка
|ИЗ
|    Справочник.Номенклатура КАК Номенклатура
|    ГДЕ (Ссылка.Код,Ссылка.Наименование,1) НЕ В (ВЫБРАТЬ
|                                                      Номенклатура.Код,
|                                                      Номенклатура.Наименование,
|                                                      СУММА(1) КАК Флаг
|                                                  ИЗ
|                                                    Справочник.Номенклатура КАК Номенклатура
|                                                
|                                                  СГРУППИРОВАТЬ ПО
|                                                    Номенклатура.Наименование,
|                                                    Номенклатура.Код)"""}
}
}
},
{1,
{"Транзакции",1,0,"",""},
{0,
{"Ст_ТранзакцияЯвная",0,0,"","НачатьТранзакцию();
Попытка
    БлокировкаДанных = Новый БлокировкаДанных;
    ЭлементБлокировкиДанных = БлокировкаДанных.Добавить(""Документ.ПриходнаяНакладная"");
    ЭлементБлокировкиДанных.УстановитьЗначение(""Ссылка"", СсылкаДляОбработки);
    ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
    БлокировкаДанных.Заблокировать();

    // ... // чтение или запись данных

    ДокументОбъект.Записать();

    ЗафиксироватьТранзакцию(); // Пишем всегда перед словом Исключение
Исключение
    ОтменитьТранзакцию(); // Пишем сразу после слова Исключение
    ПодробноеПредставлениеОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
    ЗаписьЖурналаРегистрации(НСтр(""ru = 'Выполнение операции'""), // записывать в ЖР с ВызватьИсключение не нужно
        УровеньЖурналаРегистрации.Ошибка,                        // без ВызватьИсключение пишем в ЖР
        ,
        ,
        СтрШаблон(НСтр("" ru = '%1'""), ПодробноеПредставлениеОбОшибке));

    ВызватьИсключение; // есть внешняя транзакция

КонецПопытки;"}
}
},
{1,
{"Безопасность",1,0,"",""},
{0,
{"Ст_БезовасностьПОВызовЧерезОткрытыеИнтерфейсы",0,0,"","   // В частности, перед программным открытием документов Microsoft Word и Microsoft Excel 
// через COM следует запрещать исполнение макросов. 
// Иначе это может привести к выполнению вредоносных макросов (вирусов),
// если таковые присутствуют в документе.
// НЕПРАВИЛЬНО открывать документ Microsoft Word по умолчанию:
ОбъектWord = Новый COMОбъект(""Word.Application"");
Документ = ОбъектWord.Documents.Open(ИмяФайла);
// ПРАВИЛЬНО открывать документ Microsoft Word с отключением макросов:
ОбъектWord = Новый COMОбъект(""Word.Application"");
ОбъектWord.WordBasic.DisableAutoMacros(1);
Документ = ОбъектWord.Documents.Open(ИмяФайла);
// ПРАВИЛЬНО открывать документ Microsoft Excel с отключением макросов:
ОбъектExcel = Новый COMОбъект(""Excel.Application"");
ОбъектExcel.AutomationSecurity = 3; // msoAutomationSecurityForceDisable = 3
Документ = ОбъектExcel.Workbooks.Open(ИмяФайла);
// Проверку наличия подписи макросов в документах Microsoft Word можно реализовать так:
ОбъектWord = Новый COMОбъект(""Word.Application"");
ОбъектWord.WordBasic.DisableAutoMacros(1); // Отключить автозапуск
Документ = ОбъектWord.Documents.Open(ФайлДокумента);
Если Документ.VBASigned Тогда
	ОбъектWord.WordBasic.DisableAutoMacros(0); // Включить автозапуск
	Документ.RunAutoMacro(2); // wdAutoOpen = 2
Иначе
	Документ.Close();
	ВызватьИсключение НСтр("" ru = 'Документ не подписан. Открытие отменено.'"");
КонецЕсли;
// Проверку наличия подписи макросов в документах Microsoft Excel можно реализовать так:
ОбъектExcel = Новый COMОбъект(""Excel.Application"");
ИсходныйУровеньБезопасности = ОбъектExcel.AutomationSecurity;
ОбъектExcel.AutomationSecurity = 3; // msoAutomationSecurityForceDisable = 3
Документ = ОбъектExcel.Workbooks.Open(ФайлДокумента);
ОбъектExcel.AutomationSecurity = ИсходныйУровеньБезопасности;
Если Документ.VBASigned Тогда
	Документ.Close();
	Документ = ОбъектExcel.Workbooks.Open(ФайлДокумента);
Иначе
	Документ.Close();
	ВызватьИсключение НСтр("" ru = 'Документ не подписан. Открытие отменено.'"");
КонецЕсли;"}
}
},
{1,
{"Блокировки",1,0,"",""},
{0,
{"Ст_БлокировкаОтветственноеЧтение",0,0,"","// Неправильно:
// 1. Прочитать регистр сведений
Запрос = Новый Запрос(
""ВЫБРАТЬ РАЗРЕШЕННЫЕ
| ЗаметкиПоПредмету.КоличествоЗаметок КАК КоличествоЗаметок
|ИЗ
| РегистрСведений.ЗаметкиПоПредмету КАК ЗаметкиПоПредмету
|ГДЕ
| ЗаметкиПоПредмету.Предмет = &Предмет"");
Запрос.УстановитьПараметр(""Предмет"", ПредметЗаметок);
Выборка = Запрос.Выполнить().Выбрать();
КоличествоЗаметок = 0;
Если Выборка.Следующий() Тогда
	КоличествоЗаметок = Выборка.КоличествоЗаметок;
КонецЕсли;
// 2. Записать в регистр сведений
НаборЗаписей = РегистрыСведений.ЗаметкиПоПредмету.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.Предмет.Установить(ПредметЗаметок);
НоваяЗапись = НаборЗаписей.Добавить();
НоваяЗапись.Предмет = ПредметЗаметок;
НоваяЗапись.КоличествоЗаметок = КоличествоЗаметок + 1;
НаборЗаписей.Записать();

// Правильно:
// 1. Начать транзакцию для пакета из двух операций чтения и записи регистра
НачатьТранзакцию();
Попытка
	// 2. Установить исключительную блокировку на интересующий диапазон записей регистра,
	// для того чтобы гарантировать, что в момент записи количество заметок не изменилось с момента чтения в каком-либо другом сеансе.
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировкиДанных = БлокировкаДанных.Добавить(""РегистрСведений.ЗаметкиПоПредмету"");
	ЭлементБлокировкиДанных.УстановитьЗначение(""Предмет"", ПредметЗаметок);
	ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
	БлокировкаДанных.Заблокировать();
	// 3. Прочитать регистр сведений
	Запрос = Новый Запрос(
	""ВЫБРАТЬ РАЗРЕШЕННЫЕ
	| ЗаметкиПоПредмету.КоличествоЗаметок КАК КоличествоЗаметок
	|ИЗ
	| РегистрСведений.ЗаметкиПоПредмету КАК ЗаметкиПоПредмету
	|ГДЕ
	| ЗаметкиПоПредмету.Предмет = &Предмет"");
	Запрос.УстановитьПараметр(""Предмет"", ПредметЗаметок);
	Выборка = Запрос.Выполнить().Выбрать();
	КоличествоЗаметок = 0;
	Если Выборка.Следующий() Тогда
		КоличествоЗаметок = Выборка.КоличествоЗаметок;
	КонецЕсли;
	// 4. Записать в регистр сведений
	НаборЗаписей = РегистрыСведений.ЗаметкиПоПредмету.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Предмет.Установить(ПредметЗаметок);
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Предмет = ПредметЗаметок;
	НоваяЗапись.КоличествоЗаметок = КоличествоЗаметок + 1;
	НаборЗаписей.Записать();
	ЗафиксироватьТранзакцию(); // Пишем всегда перед словом Исключение
Исключение
	// 5. Если при установке блокировки возникла исключительная ситуация из-за того, что регистр уже заблокирован в другом сеансе (или по другим причинам),
	// отменить транзакцию и записать сведения об ошибке в журнал регистрации.
	ОтменитьТранзакцию(); // Пишем сразу после слова Исключение
	ПодробноеПредставлениеОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
        ЗаписьЖурналаРегистрации(НСтр("" ru = 'Заметки'"", ОбщегоНазначения.КодОсновногоЯзыка()),       // записывать в ЖР с ВызватьИсключение не нужно 
	    УровеньЖурналаРегистрации.Ошибка,,, СтрШаблон(НСтр("" ru = '%1'""), ПодробноеПредставлениеОбОшибке)); // без ВызватьИсключение пишем в ЖР
	ВызватьИсключение; // есть внешняя транзакция
КонецПопытки;"}
}
},
{5,
{"JSON",1,0,"",""},
{0,
{"Чтение JSON (Строка JSON >> Структура)",0,0,"","// Функция - Простое чтение JSON
// Функция преобразует строку JSON  в структура 1С
// Параметры:
//  Данные	 - 	Строка - Строка в формате JS
// 
// Возвращаемое значение:
//  Структура - Результат преоборазования
//
Функция ПростоеЧтениеJSON(Данные)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Данные);  		
	Возврат ПрочитатьJSON(ЧтениеJSON);
	
КонецФункции"}
},
{0,
{"Запись JSON (Структура >> Строка JSON)",0,0,"","Процедура ТестЗаписиJSON()

	Данные = Новый Структура();
	Данные.Вставить(""date"",ТекущаяДата());
	Данные.Вставить(""base"",""RUB""); 
	Результат = ПростаяЗаписьJSON(Данные);	

КонецПроцедуры


Функция ПростаяЗаписьJSON(Данные)
	
	ЗаписьJSON = Новый ЗаписьJSON;			
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON,Данные);			
	Возврат ЗаписьJSON.Закрыть();  
	
КонецФункции

//{
//""date"": ""2021-02-13T13:46:17"",
//""base"": ""RUB""
//}"}
},
{0,
{"Чтение JSON с преобразованием типов (Строка >> Структура JSON)",0,0,"","// https://www.cbr-xml-daily.ru/latest.js

Процедура ЗапроситьКурсыВалют()
	
	HTTPСоединение = Новый HTTPСоединение(""www.cbr-xml-daily.ru"");
	HTTPЗапрос = Новый HTTPЗапрос(""latest.js""); 
	HTTPЗапрос.Заголовки.Вставить(""Content-type"", ""application/json"");	
	
	//GET Запрос
	Запрос = HTTPСоединение.Получить(HTTPЗапрос);
	Результат = ЧтениеJSON(Запрос.ПолучитьТелоКакСтроку());

КонецПроцедуры

Функция ЧтениеJSON(Данные)
	
	ЧтениеJSON = Новый ЧтениеJSON;
    ЧтениеJSON.УстановитьСтроку(Данные);  		
	Возврат ПрочитатьJSON(ЧтениеJSON,,,,""ФункцияВосстановленияJSON"", ЭтотОбъект);
	
КонецФункции


Функция ФункцияВосстановленияJSON(Свойство, Значение, ДополнительныеПараметры) Экспорт
	
	Если СтрНайти(Свойство,""date"") > 0  Тогда // В название свойства есть Дата
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	ИначеЕсли Свойство = ""base"" Тогда
		Возврат Справочники.Валюты.НайтиПоНаименованию(Значение);	
	КонецЕсли;      
	
КонецФункции   


//{
//    ""date"": ""2021-02-13"",
//    ""timestamp"": 1613174400,
//    ""base"": ""RUB"",
//    ""rates"": {
//        ""AUD"": 0.017483,
//        ....
//        ""USD"": 0.013525,
//        ""EUR"": 0.01116
//    }
//}"}
},
{0,
{"Запись JSON с преобразованием типов (Структура >> Строка JSON)",0,0,""," Процедура ТестЗаписиJSON()

	Данные = Новый Структура();
	Данные.Вставить(""date"",ТекущаяДата());
	Данные.Вставить(""base"",Константы.ВалютаРегламентированногоУчета.Получить()); 
	Результат = ЗаписьJSON(Данные);	

КонецПроцедуры

Функция ЗаписьJSON(Данные)
	
	ЗаписьJSON = Новый ЗаписьJSON;			
	ЗаписьJSON.УстановитьСтроку();
	НастройкиJSON = Новый НастройкиСериализацииJSON;
	НастройкиJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	НастройкиJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	ЗаписатьJSON(ЗаписьJSON,Данные,НастройкиJSON,""ФункцияПреобразованияJSON"", ЭтотОбъект);			
	Возврат ЗаписьJSON.Закрыть();  
	
КонецФункции

Функция ФункцияПреобразованияJSON(Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
	
	Если ТипЗнч(Значение) = Тип(""СправочникСсылка.Валюты"")  Тогда		
		Возврат СокрЛП(Значение.Наименование);	
	КонецЕсли; 
	
КонецФункции"}
},
{0,
{"Пример функции упаковки в JSON из регистра сведений ШтрихКод ",0,0,"","Функция ПолучитьНоменклатуру()Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	""ВЫБРАТЬ
	|	Штрихкоды.Штрихкод КАК barcode,
	|	Штрихкоды.Номенклатура.Код КАК cod,
	|	Штрихкоды.Номенклатура.Наименование КАК name,
	|	Штрихкоды.Номенклатура.Артикул КАК articul
	|ИЗ
	|	РегистрСведений.Штрихкоды КАК Штрихкоды"";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Массив = Новый Массив;
	Пока Выборка.Следующий()Цикл
		Структура = Новый Структура(""barcode, cod, name, articul"");
		ЗаполнитьЗначенияСвойств(Структура, Выборка);
		Массив.Добавить(Структура);
	КонецЦикла;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Массив);
	
	СтрокаJSON = ЗаписьJSON.Закрыть();
	Возврат СтрокаJSON;
	

КонецФункции"}
}
},
{3,
{"Встроенные Функции",1,0,"",""},
{0,
{"Использование генератора случайных чисел - Random",0,0,"","НачальноеЧисло = 167;
ГСЧ = Новый ГенераторСлучайныхЧисел(НачальноеЧисло);
СлучайноеЧисло = ГСЧ.СлучайноеЧисло(0, 1000);"}
},
{0,
{"Функция Random",0,0,"","Функция Рандом() Экспорт
   UID=Новый УникальныйИдентификатор();
   UID = СтрЗаменить(UID,""-"","""");
   Значение = """";
   Для Н=1 По СтрДлина(UID) Цикл
      Симв = Сред(UID,Н,1);
      Значение = Значение+Прав(КодСимвола(Симв),1);
   КонецЦикла;
   Возврат Число(""0.""+Значение);
КонецФункции   "}
},
{0,
{"Функция Random2",0,0,"","Функция Ранд(Парам=0)
    Если Парам<>0 Тогда
        Случай=Парам;
    КонецЕсли;
    Если Число(Случай)=0 Тогда
        Случай=Число(СтрЗаменить(""""+ТекущееВремя(),"":"",""""));
        Случай=(16807*Случай)%2147483647;
    КонецЕсли;
    Случай=(16807*Случай)%2147483647;
    Случай=макс(Случай,-Случай);
    Возврат(Случай/2147483647);
КонецФункции   "}
}
},
{2,
{"Работа с операционной системой",1,0,"",""},
{0,
{"Запустить внешнюю программу",0,0,"","//ЗапуститьПриложение(СтрокаКоманды, [ТекущийКаталог], [ДождатьсяЗавершения], [КодВозврата])

ЗапуститьПриложение(
        ""calc.exe"",
        """", // текущий каталог для запускаемого приложения
        Ложь, // дожидаться завершения работы запущенного приложения
        КодВозврата // сюда попадёт код, возвращаемый программой
);"}
},
{0,
{"Запустить файл с проверкой",0,0,"","//открывает web-страницу с помощью браузера ""по-умолчанию""
ЗапуститьПриложение(""C:\temp\test.html"");
//открывает pdf-файл на просмотр
ФайлPDF = Новый Файл(""C:\test.pdf"");
Если ФайлPDF.Существует() Тогда
	ЗапуститьПриложение(ФайлPDF.ПолноеИмя);
КонецЕсли;"}
}
}
}
}